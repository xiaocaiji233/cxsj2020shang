[{"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/24652133", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/24652133/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/24652133/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc1", "id": 24652133, "node_id": "MDc6UmVsZWFzZTI0NjUyMTMz", "tag_name": "v2.2.0-rc1", "target_commitish": "r2.2", "name": "TensorFlow Release 2.2.0-rc1", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2020-03-18T22:54:49Z", "published_at": "2020-03-19T17:04:35Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.2.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.2.0-rc1", "body": "# Release 2.2.0\r\n\r\n## Major Features and Improvements\r\n\r\n* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r\n* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) and [guide](https://www.tensorflow.org/guide/profiler) for usage guidelines.\r\n* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r\n* `tf.distribute`:\r\n  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r\n  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r\n    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r\n    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r\n    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r\n* `tf.keras`:\r\n  * `Model.fit` major improvements:\r\n     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r\n     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r\n     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L433) for an example of what this function should look like\r\n     * Same applies for validation and inference via `Model.test_step` and `Model.predict_step`\r\n  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r\n* `tf.lite`:\r\n  * Enable TFLite experimental new converter by default.\r\n* XLA\r\n  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r\n  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r\n) with \u201ccompile or throw exception\u201d semantics on CPU and GPU.\r\n\r\n## Breaking Changes\r\n* `tf.keras`: \r\n  * In `tf.keras.applications` the name of the \"top\" layer has been standardized to \"predictions\". This is only a problem if your code relies on the exact name of the layer.\r\n  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r\n* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r\n* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r\n* Increasing the minimum bazel version to build TF to 2.0.0 to use Bazel's `cc_experimental_shared_library`.\r\n\r\n## Known Caveats\r\n* MacOS binaries are **not available** on pypi at tensorflow-cpu project, but they are identical to the binaries in [tensorflow project](https://pypi.org/project/tensorflow/2.2.0rc0/#files), since MacOS has no GPU.\r\n* Due to certain unforeseen circumstances, we are unable to release MacOS py3.8 binaries, but Windows/Linux binaries for py3.8 are available.\r\n* The current TensorFlow release now **requires** gast version 0.3.3. \r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Removed `autotune_algorithm` from experimental optimization options.\r\n* TF Core:\r\n  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r\n  * Eager `TensorHandles` maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r\n  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r\n  * `pfor/vectorized_map`: Added support for vectorizing 56 more ops. Vectorizing `tf.cond` is also supported now.\r\n  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r\n  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r\n  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r\n  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r\n  * Improve error message when attempting to use `None` in data-dependent control flow.\r\n  * Add `RaggedTensor.numpy()`.\r\n  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r\n  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r\n  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r\n  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r\n  * Add support for bfloat16 in `tf.print`.  \r\n* `tf.distribute`: \r\n  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r\n* `tf.keras`:\r\n  * Added `all_reduce_sum_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r\n  * Allow `pathlib.Path` paths for loading models via Keras API.\r\n* `tf.function`/AutoGraph:\r\n  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r\n  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r\n  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r\n  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r\n  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r\n  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r\n  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r\n* `tf.lite`:\r\n  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r\n  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r\n  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r\n  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r\n  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r\n  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r\n  * TFLite's unpack op now supports boolean tensor inputs.\r\n  * Microcontroller and embedded code moved from experimental to main TFLite folder\r\n  * Check for large TFLite tensors.\r\n  * Fix GPU delegate crash with C++17.\r\n  * Add 5D support to TFLite `strided_slice`.\r\n  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r\n  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r\n  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r\n  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r\n  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r\n  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r\n* `tf.random`:\r\n  * Various random number generation improvements: \r\n    * Add a fast path for default `random_uniform`\r\n    * `random_seed` documentation improvement.\r\n    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r\n  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r\n  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r\n* Math and Linear Algebra:\r\n  * Add `tf.linalg.LinearOperatorTridiag`.\r\n  * Add `LinearOperatorBlockLowerTriangular`\r\n  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r\n  * Add `tf.math.sobol_sample` op.\r\n  * Add `tf.math.xlog1py`.\r\n  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r\n  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r\n* TPU Enhancements:\r\n  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r\n  * Support configuring TPU software version from cloud tpu client.\r\n  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r\n* XLA Support:\r\n  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r\n  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r\n  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r\n  * Enable `Igamma`, `Igammac` for XLA.\r\n  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r\n* Tracing and Debugging:\r\n  * Add source, destination name to `_send` traceme to allow easier debugging.\r\n  * Add traceme event to `fastpathexecute`.\r\n* Other:\r\n  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r\n  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r\n  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Fr\u00e9d\u00e9ric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sj\u00f6berg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, M\u00e5ns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/24407698", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/24407698/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/24407698/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.2.0-rc0", "id": 24407698, "node_id": "MDc6UmVsZWFzZTI0NDA3Njk4", "tag_name": "v2.2.0-rc0", "target_commitish": "r2.2", "name": "TensorFlow 2.2.0-rc0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2020-03-10T17:18:52Z", "published_at": "2020-03-10T23:42:54Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.2.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.2.0-rc0", "body": "# Release 2.2.0\r\n## Major Features and Improvements\r\n\r\n* Replaced the scalar type for string tensors from `std::string` to `tensorflow::tstring` which is now ABI stable.\r\n* A new Profiler for TF 2 for CPU/GPU/TPU. It offers both device and host performance analysis, including input pipeline and TF Ops. Optimization advisory is provided whenever possible. Please see [this tutorial](https://www.tensorflow.org/tensorboard/tensorboard_profiling_keras) for usage guidelines.\r\n* Export C++ functions to Python using `pybind11` as opposed to `SWIG` as a part of our [deprecation of swig efforts](https://github.com/tensorflow/community/blob/master/rfcs/20190208-pybind11.md).\r\n* `tf.distribute`:\r\n  * Support added for global sync `BatchNormalization` by using the newly added `tf.keras.layers.experimental.SyncBatchNormalization` layer. This layer will sync `BatchNormalization` statistics every step across all replicas taking part in sync training.\r\n  * Performance improvements for GPU multi-worker distributed training using `tf.distribute.experimental.MultiWorkerMirroredStrategy`\r\n    * Update NVIDIA `NCCL` to `2.5.7-1` for better performance and performance tuning. Please see [nccl developer guide](https://docs.nvidia.com/deeplearning/sdk/nccl-developer-guide/docs/env.html) for more information on this.\r\n    * Support gradient `allreduce` in `float16`. See this [example](https://github.com/tensorflow/models/blob/master/official/staging/training/grad_utils.py) usage.\r\n    * Experimental support of [all reduce gradient packing](https://www.tensorflow.org/api_docs/python/tf/distribute/experimental/CollectiveHints) to allow overlapping gradient aggregation with backward path computation. \r\n* `tf.keras`:\r\n  * `Model.fit` major improvements:\r\n     * You can now use custom training logic with `Model.fit` by overriding `Model.train_step`.\r\n     * Easily write state-of-the-art training loops without worrying about all of the features `Model.fit` handles for you (distribution strategies, callbacks, data formats, looping logic, etc)\r\n     * See the default [`Model.train_step`](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/keras/engine/training.py#L433) for an example of what this function should look like\r\n     * Same applies for validation and inference via `Model.test_step` and `Model.predict_step`\r\n  * The SavedModel format now supports all Keras built-in layers (including metrics, preprocessing layers, and stateful RNN layers)\r\n* `tf.lite`:\r\n  * Enable TFLite experimental new converter by default.\r\n* XLA\r\n  * XLA now builds and works on windows. All prebuilt packages come with XLA available.\r\n  * XLA can be [enabled for a `tf.function`](https://www.tensorflow.org/xla#explicit_compilation_with_tffunction\r\n) with \u201ccompile or throw exception\u201d semantics on CPU and GPU.\r\n\r\n## Breaking Changes\r\n* `tf.keras`: \r\n  * In `tf.keras.applications` the name of the \"top\" layer has been standardized to \"predictions\". This is only a problem if your code relies on the exact name of the layer.\r\n  * Huber loss function has been updated to be consistent with other Keras losses. It now computes mean over the last axis of per-sample losses before applying the reduction function.\r\n* AutoGraph no longer converts functions passed to `tf.py_function`, `tf.py_func` and `tf.numpy_function`.\r\n* Deprecating `XLA_CPU` and `XLA_GPU` devices with this release.\r\n* Increasing the minimum bazel version to build TF to 1.2.1 to use Bazel's `cc_experimental_shared_library`.\r\n\r\n## Known Caveats\r\n* MacOS binaries are **not available** on pypi at tensorflow-cpu project, but they are identical to the binaries in [tensorflow project](https://pypi.org/project/tensorflow/2.2.0rc0/#files), since MacOS has no GPU.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Removed `autotune_algorithm` from experimental optimization options.\r\n* TF Core:\r\n  * `tf.constant` always creates CPU tensors irrespective of the current device context.  \r\n  * Eager TensorHandles maintain a list of mirrors for any copies to local or remote devices. This avoids any redundant copies due to op execution.\r\n  * For `tf.Tensor` & `tf.Variable`, `.experimental_ref()` is no longer experimental and is available as simply `.ref()`.\r\n  * Support matrix inverse and solves in `pfor/vectorized_map`.\r\n  * Set as much partial shape as we can infer statically within the gradient impl of the gather op.\r\n  * Gradient of `tf.while_loop` emits `StatelessWhile` op if `cond` and body functions are stateless. This allows multiple gradients while ops to run in parallel under distribution strategy.\r\n  * Speed up `GradientTape` in eager mode by auto-generating list of op inputs/outputs which are unused and hence not cached for gradient functions.\r\n  * Support `back_prop=False` in `while_v2` but mark it as deprecated.\r\n  * Improve error message when attempting to use `None` in data-dependent control flow.\r\n  * Add `RaggedTensor.numpy()`.\r\n  * Update `RaggedTensor.__getitem__` to preserve uniform dimensions & allow indexing into uniform dimensions.\r\n  * Update `tf.expand_dims` to always insert the new dimension as a non-ragged dimension.\r\n  * Update `tf.embedding_lookup` to use `partition_strategy` and `max_norm` when `ids` is ragged.\r\n  * Allow `batch_dims==rank(indices)` in `tf.gather`.\r\n  * Add support for bfloat16 in `tf.print`.  \r\n* `tf.distribute`: \r\n  * Support `embedding_column` with variable-length input features for `MultiWorkerMirroredStrategy`.\r\n* `tf.keras`:\r\n  * Added `all_reduce_sum_gradients` argument to `tf.keras.optimizer.Optimizer.apply_gradients`. This allows custom gradient aggregation and processing aggregated gradients in custom training loop.\r\n  * Allow `pathlib.Path` paths for loading models via Keras API.\r\n* `tf.function`/AutoGraph:\r\n  * AutoGraph is now available in `ReplicaContext.merge_call`, `Strategy.extended.update` and `Strategy.extended.update_non_slot`.\r\n  * Experimental support for shape invariants has been enabled in `tf.function`. See the API docs for `tf.autograph.experimental.set_loop_options` for additonal info.\r\n  * AutoGraph error messages now exclude frames corresponding to APIs internal to AutoGraph.\r\n  * Improve shape inference for `tf.function` input arguments to unlock more Grappler optimizations in TensorFlow 2.x.\r\n  * Improve automatic control dependency management of resources by allowing resource reads to occur in parallel and synchronizing only on writes.\r\n  * Fix execution order of multiple stateful calls to `experimental_run_v2` in `tf.function`.\r\n  * You can now iterate over `RaggedTensors` using a for loop inside `tf.function`.\r\n* `tf.lite`:\r\n  *  Migrated the `tf.lite` C inference API out of experimental into lite/c.\r\n  * Add an option to disallow `NNAPI` CPU / partial acceleration on Android 10\r\n  * TFLite Android AARs now include the C headers and APIs are required to use TFLite from native code.\r\n  * Refactors the delegate and delegate kernel sources to allow usage in the linter.\r\n  * Limit delegated ops to actually supported ones if a device name is specified or `NNAPI` CPU Fallback is disabled.\r\n  * TFLite now supports `tf.math.reciprocal1` op by lowering to `tf.div op`.\r\n  * TFLite's unpack op now supports boolean tensor inputs.\r\n  * Microcontroller and embedded code moved from experimental to main TensorFlow Lite folder\r\n  * Check for large TFLite tensors.\r\n  * Fix GPU delegate crash with C++17.\r\n  * Add 5D support to TFLite `strided_slice`.\r\n  * Fix error in delegation of `DEPTH_TO_SPACE` to `NNAPI` causing op not to be accelerated.\r\n  * Fix segmentation fault when running a model with LSTM nodes using `NNAPI` Delegate\r\n  * Fix `NNAPI` delegate failure when an operand for Maximum/Minimum operation is a scalar.\r\n  * Fix `NNAPI` delegate failure when Axis input for reduce operation is a scalar.\r\n  * Expose option to limit the number of partitions that will be delegated to `NNAPI`.\r\n  * If a target accelerator is specified, use its feature level to determine operations to delegate instead of SDK version.\r\n* `tf.random`:\r\n  * Various random number generation improvements: \r\n    * Add a fast path for default `random_uniform`\r\n    * `random_seed` documentation improvement.\r\n    * `RandomBinomial` broadcasts and appends the sample shape to the left rather than the right. \r\n  * Added `tf.random.stateless_binomial`, `tf.random.stateless_gamma`, `tf.random.stateless_poisson`\r\n  * `tf.random.stateless_uniform` now supports unbounded sampling of `int` types.\r\n* Math and Linear Algebra:\r\n  * Add `tf.linalg.LinearOperatorTridiag`.\r\n  * Add `LinearOperatorBlockLowerTriangular`\r\n  * Add broadcasting support to tf.linalg.triangular_solve[#26204](https://github.com/tensorflow/tensorflow/issues/26204), tf.math.invert_permutation.\r\n  * Add `tf.math.sobol_sample` op.\r\n  * Add `tf.math.xlog1py`.\r\n  * Add `tf.math.special.{dawsn,expi,fresnel_cos,fresnel_sin,spence}`.\r\n  * Add a Modified Discrete Cosine Transform (MDCT) and its inverse to `tf.signal`.\r\n* TPU Enhancements:\r\n  * Refactor `TpuClusterResolver` to move shared logic to a separate pip package.\r\n  * Support configuring TPU software version from cloud tpu client.\r\n  * Allowed TPU embedding weight decay factor to be multiplied by learning rate.\r\n* XLA Support:\r\n  * Add standalone XLA AOT runtime target + relevant .cc sources to pip package.\r\n  * Add check for memory alignment to MemoryAllocation::MemoryAllocation() on 32-bit ARM. This ensures a deterministic early exit instead of a hard to debug bus error later.\r\n  * `saved_model_cli aot_compile_cpu` allows you to compile saved models to XLA header+object files and include them in your C++ programs.\r\n  * Enable `Igamma`, `Igammac` for XLA.\r\n  * XLA reduction emitter is deterministic when the environment variable `TF_DETERMINISTIC_OPS` is set.\r\n* Tracing and Debugging:\r\n  * Add source, destination name to `_send` traceme to allow easier debugging.\r\n  * Add traceme event to `fastpathexecute`.\r\n* Other:\r\n  * Fix an issue with AUC.reset_states for multi-label AUC [#35852](https://github.com/tensorflow/tensorflow/issues/35852)\r\n  * Fix the TF upgrade script to not delete files when there is a parsing error and the output mode is `in-place`.\r\n  * Move `tensorflow/core:framework/*_pyclif` rules to `tensorflow/core/framework:*_pyclif`.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n372046933, 8bitmp3, aaronhma, Abin Shahab, Aditya Patwardhan, Agoniii, Ahti Kitsik, Alan Yee, Albin Joy, Alex Hoffman, Alexander Grund, Alexandre E. Eichenberger, Amit Kumar Jaiswal, amoitra, Andrew Anderson, Angus-Luo, Anthony Barbier, Anton Kachatkou, Anuj Rawat, archis, Arpan-Dhatt, Arvind Sundararajan, Ashutosh Hathidara, autoih, Bairen Yi, Balint Cristian, Bas Aarts, BashirSbaiti, Basit Ayantunde, Ben Barsdell, Benjamin Gaillard, boron, Brett Koonce, Bryan Cutler, Christian Goll, Christian Sachs, Clayne Robison, comet, Daniel Falbel, Daria Zhuravleva, darsh8200, David Truby, Dayananda-V, deepakm, Denis Khalikov, Devansh Singh, Dheeraj R Reddy, Diederik Van Liere, Diego Caballero, Dominic Jack, dothinking, Douman, Drake Gens, Duncan Riach, Ehsan Toosi, ekuznetsov139, Elena Zhelezina, elzino, Ending2015a, Eric Schweitz, Erik Zettel, Ethan Saadia, Eugene Kuznetsov, Evgeniy Zheltonozhskiy, Ewout Ter Hoeven, exfalso, FAIJUL, Fangjun Kuang, Fei Hu, Frank Laub, Frederic Bastien, Fredrik Knutsson, frreiss, Fr\u00e9d\u00e9ric Rechtenstein, fsx950223, Gaurav Singh, gbaned, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, Hans Gaiser, Hans Pabst, Haoyu Wu, Harry Slatyer, hsahovic, Hugo, Hugo Sj\u00f6berg, IrinaM21, jacco, Jake Tae, Jean-Denis Lesage, Jean-Michel Gorius, Jeff Daily, Jens Elofsson, Jerry Shih, jerryyin, Jin Mingjian, Jinjing Zhou, JKIsaacLee, jojimonv, Jonathan Dekhtiar, Jose Ignacio Gomez, Joseph-Rance, Judd, Julian Gross, Kaixi Hou, Kaustubh Maske Patil, Keunwoo Choi, Kevin Hanselman, Khor Chean Wei, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koki Ibukuro, Kristian Holsheimer, kurileo, Lakshay Tokas, Lee Netherton, leike666666, Leslie-Fang-Intel, Li, Guizi, LIUJIAN435, Lukas Geiger, Lyo Nguyen, madisetti, Maher Jendoubi, Mahmoud Abuzaina, Manuel Freiberger, Marcel Koester, Marco Jacopo Ferrarotti, Markus Franke, marload, Mbah-Javis, mbhuiyan, Meng Zhang, Michael Liao, MichaelKonobeev, Michal Tarnowski, Milan Straka, minoring, Mohamed Nour Abouelseoud, MoussaMM, Mrinal Jain, mrTsjolder, M\u00e5ns Nilsson, Namrata Bhave, Nicholas Gao, Niels Ole Salscheider, nikochiko, Niranjan Hasabnis, Nishidha Panpaliya, nmostafa, Noah Trenaman, nuka137, Officium, Owen L - Sfe, Pallavi G, Paul Andrey, Peng Sun, Peng Wu, Phil Pearl, PhilipMay, pingsutw, Pooya Davoodi, PragmaTwice, pshiko, Qwerty71, R Gomathi, Rahul Huilgol, Richard Xiao, Rick Wierenga, Roberto Rosmaninho, ruchit2801, Rushabh Vasani, Sami, Sana Damani, Sarvesh Dubey, Sasan Jafarnejad, Sergii Khomenko, Shane Smiskol, Shaochen Shi, sharkdtu, Shawn Presser, ShengYang1, Shreyash Patodia, Shyam Sundar Dhanabalan, Siju Samuel, Somyajit Chakraborty Sam, Srihari Humbarwadi, srinivasan.narayanamoorthy, Srishti Yadav, Steph-En-M, Stephan Uphoff, Stephen Mugisha, SumanSudhir, Taehun Kim, Tamas Bela Feher, TengLu, Tetragramm, Thierry Herrmann, Tian Jin, tigertang, Tom Carchrae, Tom Forbes, Trent Lo, Victor Peng, vijayphoenix, Vincent Abriou, Vishal Bhola, Vishnuvardhan Janapati, vladbataev, VoVAllen, Wallyss Lima, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, William Zhang, Xiaoming (Jason) Cui, Xiaoquan Kong, Xinan Jiang, Yasir Modak, Yasuhiro Matsumoto, Yaxun (Sam) Liu, Yong Tang, Ytyt-Yt, yuan, Yuan Mingshuai, Yuan Tang, Yuki Ueda, Yusup, zhangshijin, zhuwenxi\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/23133744", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/23133744/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/23133744/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.2", "id": 23133744, "node_id": "MDc6UmVsZWFzZTIzMTMzNzQ0", "tag_name": "v1.15.2", "target_commitish": "r1.15", "name": "TensorFlow 1.15.2", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2020-01-26T03:57:51Z", "published_at": "2020-01-26T15:02:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.2", "body": "# Release 1.15.2\r\n\r\nNote that this release no longer has a single pip package for GPU and CPU. Please see #36347 for history and details\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes a security vulnerability where converting a Python string to a `tf.float16` value produces a segmentation fault ([CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215))\r\n* Updates `curl` to `7.66.0` to handle [CVE-2019-5482](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5482) and [CVE-2019-5481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5481)\r\n* Updates `sqlite3` to `3.30.01` to handle [CVE-2019-19646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19646), [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645) and [CVE-2019-16168](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16168)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/23125231", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/23125231/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/23125231/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.1", "id": 23125231, "node_id": "MDc6UmVsZWFzZTIzMTI1MjMx", "tag_name": "v2.0.1", "target_commitish": "r2.0", "name": "TensorFlow 2.0.1", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2020-01-22T23:43:57Z", "published_at": "2020-01-25T16:46:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.1", "body": "# Release 2.0.1\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes a security vulnerability where converting a Python string to a `tf.float16` value produces a segmentation fault ([CVE-2020-5215](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2020-5215))\r\n* Updates `curl` to `7.66.0` to handle [CVE-2019-5482](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5482) and [CVE-2019-5481](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-5481)\r\n* Updates `sqlite3` to `3.30.01` to handle [CVE-2019-19646](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19646), [CVE-2019-19645](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-19645) and [CVE-2019-16168](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-16168)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22687731", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22687731/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/22687731/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0", "id": 22687731, "node_id": "MDc6UmVsZWFzZTIyNjg3NzMx", "tag_name": "v2.1.0", "target_commitish": "r2.1", "name": "TensorFlow 2.1.0", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2020-01-07T16:57:39Z", "published_at": "2020-01-08T18:54:32Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.1.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.1.0", "body": "# Release 2.1.0\r\n\r\nTensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r\n\r\n## Major Features and Improvements\r\n* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* **Windows users:** Officially-released `tensorflow` Pip packages are now built with Visual Studio 2019 version 16.4 in order to take advantage of the new `/d2ReducedOptimizeHugeFunctions` compiler flag. To use these new packages, you must install \"Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019\", available from Microsoft's website [here](https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads).\r\n  * This does not change the minimum required version for building TensorFlow from source on Windows, but builds enabling `EIGEN_STRONG_INLINE` can take over 48 hours to compile without this flag. Refer to `configure.py` for more information about `EIGEN_STRONG_INLINE` and `/d2ReducedOptimizeHugeFunctions`.\r\n  * If either of the required DLLs, `msvcp140.dll` (old) or `msvcp140_1.dll` (new), are missing on your machine, `import tensorflow` will print a warning message.\r\n* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r\n* `tf.keras`\r\n  * Experimental support for mixed precision is available on GPUs and Cloud TPUs. See [usage guide](https://www.tensorflow.org/guide/keras/mixed_precision).\r\n  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r\n  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r\n  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPUs, Cloud TPU, for all types of Keras models (sequential, functional and subclassing models).\r\n  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r\n  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r\n  * Support for `.fit`, `.evaluate`, `.predict` on TPU using numpy data, in addition to `tf.data.Dataset`.\r\n  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r\n* `tf.data`\r\n  * Changes rebatching for `tf.data datasets` + DistributionStrategy for better performance. Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r\n  * `tf.data.Dataset` now supports automatic data distribution and sharding in distributed environments, including on TPU pods.\r\n  * Distribution policies for `tf.data.Dataset` can now be tuned with 1. `tf.data.experimental.AutoShardPolicy(OFF, AUTO, FILE, DATA)` 2. `tf.data.experimental.ExternalStatePolicy(WARN, IGNORE, FAIL)`\r\n* `tf.debugging`\r\n  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to help debugging the root causes of issues involving infinities and `NaN`s.\r\n* `tf.distribute`\r\n  * Custom training loop support on TPUs and TPU pods is avaiable through `strategy.experimental_distribute_dataset`, `strategy.experimental_distribute_datasets_from_function`, `strategy.experimental_run_v2`, `strategy.reduce`.\r\n  * Support for a global distribution strategy through `tf.distribute.experimental_set_strategy(),` in addition to `strategy.scope()`.\r\n* `TensorRT`\r\n  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r\n* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to \"true\" or \"1\", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to \"true\" or \"1\" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r\n\r\n## Breaking Changes\r\n* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r\n* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r\n* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r\n* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r\n* `tf.config.experimental_list_devices` has been removed, please use\r\n`tf.config.list_logical_devices`.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`\r\n  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with `sloppy=True`.\r\n  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r\n  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r\n* `tf.distribute`\r\n  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r\n* `tf.estimator`\r\n  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r\n  * Moving the checkpoint reader from swig to pybind11.\r\n* `tf.keras`\r\n  * Export `depthwise_conv2d` in `tf.keras.backend`.\r\n  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r\n  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r\n  * Fix the input shape caching behavior of Keras convolutional layers.\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using `tf.function` by default. Note that `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r\n* `tf.lite`\r\n  * Legalization for `NMS` ops in TFLite.\r\n  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r\n  * Added support for `FusedBatchNormV3` in converter.\r\n  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r\n  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Other\r\n  * Critical stability updates for TPUs, especially in cases where the XLA compiler produces compilation errors.\r\n  * TPUs can now be re-initialized multiple times, using `tf.tpu.experimental.initialize_tpu_system`. \r\n  * Add `RaggedTensor.merge_dims()`.\r\n  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r\n  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r\n  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r\n  * Fix `while_v2` with variables in custom gradient.\r\n  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r\n  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r\n  * Add preliminary support for sparse CSR matrices.\r\n  * Tensor equality with `None` now behaves as expected.\r\n  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r\n  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r\n  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r\n  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r\n  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r\n  * Add `pfor` converter for `SelfAdjointEigV2`.\r\n  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r\n  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r\n  * Added support for MatrixSolve on Cloud TPU / XLA.\r\n  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r\n  * Add `LinearOperatorPermutation`.\r\n  * A few performance optimizations on `tf.reduce_logsumexp`.\r\n  * Added multilabel handling to `AUC` metric\r\n  * Optimization on `zeros_like`.\r\n  * Dimension constructor now requires `None` or types with an `__index__` method.\r\n  * Add `tf.random.uniform` microbenchmark.\r\n  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r\n  * Moving the checkpoint reader from `swig` to `pybind11`.\r\n  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r\n  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelbuild/bazelisk) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n8bitmp3, Aaron Ma, Abd\u00fcLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, \u738b\u632f\u534e (Zhenhua Wang), \u97e9\u8463, \uc774\uc911\uac74 Isaac Lee"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22435583", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22435583/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/22435583/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc2", "id": 22435583, "node_id": "MDc6UmVsZWFzZTIyNDM1NTgz", "tag_name": "v2.1.0-rc2", "target_commitish": "r2.1", "name": "TensorFlow 2.1.0-rc2", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-12-21T02:27:18Z", "published_at": "2019-12-23T20:42:30Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.1.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.1.0-rc2", "body": "# Release 2.1.0\r\n\r\nTensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r\n\r\n## Major Features and Improvements\r\n* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* **Windows users:** Officially-released `tensorflow` Pip packages are now built with Visual Studio 2019 version 16.4 in order to take advantage of the new `/d2ReducedOptimizeHugeFunctions` compiler flag. To use these new packages, you must install \"Microsoft Visual C++ Redistributable for Visual Studio 2015, 2017 and 2019\", available from Microsoft's website [here](https://support.microsoft.com/help/2977003/the-latest-supported-visual-c-downloads).\r\n  * This does not change the minimum required version for building TensorFlow from source on Windows, but builds enabling `EIGEN_STRONG_INLINE` can take over 48 hours to compile without this flag. Refer to `configure.py` for more information about `EIGEN_STRONG_INLINE` and `/d2ReducedOptimizeHugeFunctions`.\r\n  * If either of the required DLLs, `msvcp140.dll` (old) or `msvcp140_1.dll` (new), are missing on your machine, `import tensorflow` will print a warning message.\r\n* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r\n* `tf.keras`\r\n  * Experimental support for mixed precision is available on GPUs and Cloud TPUs. See [usage guide](https://www.tensorflow.org/guide/keras/mixed_precision).\r\n  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r\n  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r\n  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPUs, Cloud TPU, for all types of Keras models (sequential, functional and subclassing models).\r\n  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r\n  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r\n  * Support for `.fit`, `.evaluate`, `.predict` on TPU using numpy data, in addition to `tf.data.Dataset`.\r\n  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r\n* `tf.data`\r\n  * Changes rebatching for `tf.data datasets` + DistributionStrategy for better performance. Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r\n  * `tf.data.Dataset` now supports automatic data distribution and sharding in distributed environments, including on TPU pods.\r\n  * Distribution policies for `tf.data.Dataset` can now be tuned with 1. `tf.data.experimental.AutoShardPolicy(OFF, AUTO, FILE, DATA)` 2. `tf.data.experimental.ExternalStatePolicy(WARN, IGNORE, FAIL)`\r\n* `tf.debugging`\r\n  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to help debugging the root causes of issues involving infinities and `NaN`s.\r\n* `tf.distribute`\r\n  * Custom training loop support on TPUs and TPU pods is avaiable through `strategy.experimental_distribute_dataset`, `strategy.experimental_distribute_datasets_from_function`, `strategy.experimental_run_v2`, `strategy.reduce`.\r\n  * Support for a global distribution strategy through `tf.distribute.experimental_set_strategy(),` in addition to `strategy.scope()`.\r\n* `TensorRT`\r\n  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r\n* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to \"true\" or \"1\", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to \"true\" or \"1\" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r\n\r\n## Breaking Changes\r\n* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r\n* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r\n* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r\n* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r\n* `tf.config.experimental_list_devices` has been removed, please use\r\n`tf.config.list_logical_devices`.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`\r\n  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with `sloppy=True`.\r\n  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r\n  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r\n* `tf.distribute`\r\n  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r\n* `tf.estimator`\r\n  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r\n  * Moving the checkpoint reader from swig to pybind11.\r\n* `tf.keras`\r\n  * Export `depthwise_conv2d` in `tf.keras.backend`.\r\n  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r\n  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r\n  * Fix the input shape caching behavior of Keras convolutional layers.\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using `tf.function` by default. Note that `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r\n* `tf.lite`\r\n  * Legalization for `NMS` ops in TFLite.\r\n  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r\n  * Added support for `FusedBatchNormV3` in converter.\r\n  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r\n  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Other\r\n  * Critical stability updates for TPUs, especially in cases where the XLA compiler produces compilation errors.\r\n  * TPUs can now be re-initialized multiple times, using `tf.tpu.experimental.initialize_tpu_system`. \r\n  * Add `RaggedTensor.merge_dims()`.\r\n  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r\n  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r\n  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r\n  * Fix `while_v2` with variables in custom gradient.\r\n  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r\n  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r\n  * Add preliminary support for sparse CSR matrices.\r\n  * Tensor equality with `None` now behaves as expected.\r\n  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r\n  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r\n  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r\n  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r\n  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r\n  * Add `pfor` converter for `SelfAdjointEigV2`.\r\n  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r\n  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r\n  * Added support for MatrixSolve on Cloud TPU / XLA.\r\n  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r\n  * Add `LinearOperatorPermutation`.\r\n  * A few performance optimizations on `tf.reduce_logsumexp`.\r\n  * Added multilabel handling to `AUC` metric\r\n  * Optimization on `zeros_like`.\r\n  * Dimension constructor now requires `None` or types with an `__index__` method.\r\n  * Add `tf.random.uniform` microbenchmark.\r\n  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r\n  * Moving the checkpoint reader from `swig` to `pybind11`.\r\n  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r\n  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelbuild/bazelisk) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n8bitmp3, Aaron Ma, Abd\u00fcLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, \u738b\u632f\u534e (Zhenhua Wang), \u97e9\u8463, \uc774\uc911\uac74 Isaac Lee"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22133126", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/22133126/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/22133126/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc1", "id": 22133126, "node_id": "MDc6UmVsZWFzZTIyMTMzMTI2", "tag_name": "v2.1.0-rc1", "target_commitish": "r2.1", "name": "TensorFlow 2.1.0-rc1", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-12-10T22:17:34Z", "published_at": "2019-12-11T05:39:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.1.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.1.0-rc1", "body": "# Release 2.1.0-rc1\r\n\r\nTensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r\n\r\n## Major Features and Improvements\r\n* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* The `tensorflow` pip package is built with CUDA 10.1 and cuDNN 7.6.\r\n* `tf.keras`\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using tf.function by default.\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r\n  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r\n  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r\n  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r\n  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPU Pods.\r\n  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r\n  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r\n  * Experimental support for mixed precision is available on GPUs and Cloud TPUs.\r\n  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r\n* `tf.data`\r\n  * Changes rebatching for `tf.data datasets` + distribution strategies for better performance.   Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r\n* `TensorRT`\r\n  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r\n* Environment variable `TF_DETERMINISTIC_OPS` has been added. When set to \"true\" or \"1\", this environment variable makes `tf.nn.bias_add` operate deterministically (i.e. reproducibly), but currently only when XLA JIT compilation is *not* enabled. Setting `TF_DETERMINISTIC_OPS` to \"true\" or \"1\" also makes cuDNN convolution and max-pooling operate deterministically. This makes Keras Conv\\*D and MaxPool\\*D layers operate deterministically in both the forward and backward directions when running on a CUDA-enabled GPU.\r\n\r\n## Breaking Changes\r\n* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r\n* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r\n* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n* The following APIs are no longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r\n* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r\n* `tf.config.experimental_list_devices` has been removed, please use\r\n`tf.config.list_logical_devices`.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`\r\n  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with sloppy=True.\r\n  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r\n  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r\n* `tf.distribute`\r\n  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r\n* `tf.estimator`\r\n  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r\n  * Moving the checkpoint reader from swig to pybind11.\r\n* `tf.keras`\r\n  * Export depthwise_conv2d in `tf.keras.backend`.\r\n  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r\n  * Fix the incorrect stateful behavior of Keras convolutional layers.\r\n* `tf.lite`\r\n  * Legalization for `NMS` ops in TFLite.\r\n  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r\n  * Added support for `FusedBatchNormV3` in converter.\r\n  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r\n  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Other\r\n  * Add `RaggedTensor.merge_dims()`.\r\n  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r\n  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r\n  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r\n  * Fix `while_v2` with variables in custom gradient.\r\n  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r\n  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r\n  * Add preliminary support for sparse CSR matrices.\r\n  * Tensor equality with `None` now behaves as expected.\r\n  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r\n  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to facilitate debugging of numeric instability (`Infinity`s and `NaN`s) under eager mode and `tf.function`s.\r\n  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r\n  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r\n  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r\n  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r\n  * Add `pfor` converter for `SelfAdjointEigV2`.\r\n  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r\n  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r\n  * Added support for MatrixSolve on Cloud TPU / XLA.\r\n  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r\n  * Add `LinearOperatorPermutation`.\r\n  * A few performance optimizations on `tf.reduce_logsumexp`.\r\n  * Added multilabel handling to `AUC` metric\r\n  * Optimization on `zeros_like`.\r\n  * Dimension constructor now requires `None` or types with an `__index__` method.\r\n  * Add `tf.random.uniform` microbenchmark.\r\n  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r\n  * Moving the checkpoint reader from `swig` to `pybind11`.\r\n  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r\n  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelisk/bazel) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n8bitmp3, Aaron Ma, Abd\u00fcLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, \u738b\u632f\u534e (Zhenhua Wang), \u97e9\u8463, \uc774\uc911\uac74 Isaac Lee"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/21808828", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/21808828/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/21808828/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.1.0-rc0", "id": 21808828, "node_id": "MDc6UmVsZWFzZTIxODA4ODI4", "tag_name": "v2.1.0-rc0", "target_commitish": "r2.1", "name": "TensorFlow 2.1.0-rc0", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-11-26T23:28:10Z", "published_at": "2019-11-27T18:19:59Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.1.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.1.0-rc0", "body": "# Release 2.1.0\r\n\r\nTensorFlow 2.1 will be the last TF release supporting Python 2. Python 2 support [officially ends an January 1, 2020](https://www.python.org/dev/peps/pep-0373/#update). [As announced earlier](https://groups.google.com/a/tensorflow.org/d/msg/announce/gVwS5RC8mds/dCt1ka2XAAAJ), TensorFlow will also stop supporting Python 2 starting January 1, 2020, and no more releases are expected in 2019.\r\n\r\n## Major Features and Improvements\r\n* The `tensorflow` pip package now includes GPU support by default (same as `tensorflow-gpu`) for both Linux and Windows. This runs on machines with and without NVIDIA GPUs. `tensorflow-gpu` is still available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* `tf.keras`\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, `Model.predict_generator`, `Model.train_on_batch`, `Model.test_on_batch`, and `Model.predict_on_batch` methods now respect the `run_eagerly` property, and will correctly run using tf.function by default.\r\n  * `Model.fit_generator`, `Model.evaluate_generator`, and `Model.predict_generator` are deprecated endpoints. They are subsumed by `Model.fit`, `Model.evaluate`, and `Model.predict` which now support generators and Sequences.\r\n  * Keras `.compile` `.fit` `.evaluate` and `.predict` are allowed to be outside of the DistributionStrategy scope, as long as the model was constructed inside of a scope.\r\n  * Keras `model.load_weights` now accepts `skip_mismatch` as an argument. This was available in external Keras, and has now been copied over to `tf.keras`.\r\n  * Introduced the `TextVectorization` layer, which takes as input raw strings and takes care of text standardization, tokenization, n-gram generation, and vocabulary indexing. See this [end-to-end text classification example](https://colab.research.google.com/drive/1RvCnR7h0_l4Ekn5vINWToI9TNJdpUZB3). \r\n  * Experimental support for Keras `.compile`, `.fit`, `.evaluate`, and `.predict` is available for Cloud TPU Pods.\r\n  * Automatic outside compilation is now enabled for Cloud TPUs. This allows `tf.summary` to be used more conveniently with Cloud TPUs.\r\n  * Dynamic batch sizes with DistributionStrategy and Keras are supported on Cloud TPUs.\r\n  * Experimental support for mixed precision is available on GPUs and Cloud TPUs.\r\n  * Keras reference implementations for many popular models are available in the TensorFlow [Model Garden](https://github.com/tensorflow/models/tree/master/official).\r\n* `tf.data`\r\n  * Changes rebatching for `tf.data datasets` + distribution strategies for better performance.   Note that the dataset also behaves slightly differently, in that the rebatched dataset cardinality will always be a multiple of the number of replicas.\r\n* `TensorRT`\r\n  * [TensorRT 6.0](https://developer.nvidia.com/tensorrt#tensorrt-whats-new) is now supported and enabled by default. This adds support for more TensorFlow ops including Conv3D, Conv3DBackpropInputV2, AvgPool3D, MaxPool3D, ResizeBilinear, and ResizeNearestNeighbor. In addition, the TensorFlow-TensorRT python conversion API is exported as `tf.experimental.tensorrt.Converter`.\r\n\r\n## Known issues\r\nBecause of [issues with building on windows](https://github.com/tensorflow/tensorflow/issues/10521), we turned off eigen strong inlining for the Windows builds. Windows binaries are expected to be slightly slower until the build issues are resolved. \r\n\r\n## Breaking Changes\r\n* Deletes `Operation.traceback_with_start_lines` for which we know of no usages.\r\n* Removed `id` from `tf.Tensor.__repr__()` as `id` is not useful other than internal debugging.\r\n* Some `tf.assert_*` methods now raise assertions at operation creation time if the input tensors' values are known at that time, not during the `session.run()`. This only changes behavior when the graph execution would have resulted in an error. When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n* The following APIs are not longer experimental: `tf.config.list_logical_devices`, `tf.config.list_physical_devices`, `tf.config.get_visible_devices`, `tf.config.set_visible_devices`, `tf.config.get_logical_device_configuration`, `tf.config.set_logical_device_configuration`.\r\n* `tf.config.experimentalVirtualDeviceConfiguration` has been renamed to `tf.config.LogicalDeviceConfiguration`.\r\n* `tf.config.experimental_list_devices` has been removed, please use\r\n`tf.config.list_logical_devices`.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`\r\n  * Fixes concurrency issue with `tf.data.experimental.parallel_interleave` with sloppy=True.\r\n  * Add `tf.data.experimental.dense_to_ragged_batch()`.\r\n  * Extend `tf.data` parsing ops to support `RaggedTensors`.\r\n* `tf.distribute`\r\n  * Fix issue where GRU would crash or give incorrect output when a `tf.distribute.Strategy` was used. \r\n* `tf.estimator`\r\n  * Added option in `tf.estimator.CheckpointSaverHook` to not save the `GraphDef`.\r\n* `tf.keras`\r\n  * Export depthwise_conv2d in `tf.keras.backend`.\r\n  * In Keras Layers and Models, Variables in `trainable_weights`, `non_trainable_weights`, and `weights` are explicitly deduplicated.\r\n  * Fix the incorrect stateful behavior of Keras convolutional layers.\r\n* `tf.lite`\r\n  * Legalization for `NMS` ops in TFLite.\r\n  * add `narrow_range` and `axis` to `quantize_v2` and `dequantize` ops. \r\n  * Added support for `FusedBatchNormV3` in converter.\r\n  * Add an `errno`-like field to `NNAPI` delegate for detecting `NNAPI` errors for fallback behaviour.\r\n  * Refactors `NNAPI` Delegate to support detailed reason why an operation is not accelerated.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Other\r\n  * Add `RaggedTensor.merge_dims()`.\r\n  * Added new `uniform_row_length` row-partitioning tensor to `RaggedTensor`.\r\n  * Add `shape` arg to `RaggedTensor.to_tensor`; Improve speed of `RaggedTensor.to_tensor`.\r\n  * `tf.io.parse_sequence_example` and `tf.io.parse_single_sequence_example` now support ragged features.\r\n  * Fix `while_v2` with variables in custom gradient.\r\n  * Support taking gradients of V2 `tf.cond` and `tf.while_loop` using `LookupTable`.\r\n  * Fix bug where `vectorized_map` failed on inputs with unknown static shape.\r\n  * Add preliminary support for sparse CSR matrices.\r\n  * Tensor equality with `None` now behaves as expected.\r\n  * Make calls to `tf.function(f)()`, `tf.function(f).get_concrete_function` and `tf.function(f).get_initialization_function` thread-safe.\r\n  * Add `tf.debugging.enable_check_numerics()` and `tf.debugging.disable_check_numerics()` to facilitate debugging of numeric instability (`Infinity`s and `NaN`s) under eager mode and `tf.function`s.\r\n  * Extend `tf.identity` to work with CompositeTensors (such as SparseTensor)\r\n  * Added more `dtypes` and zero-sized inputs to `Einsum` Op and improved its performance\r\n  * Enable multi-worker `NCCL` `all-reduce` inside functions executing eagerly.\r\n  * Added complex128 support to `RFFT`, `RFFT2D`, `RFFT3D`, `IRFFT`, `IRFFT2D`, and `IRFFT3D`.\r\n  * Add `pfor` converter for `SelfAdjointEigV2`.\r\n  * Add `tf.math.ndtri` and `tf.math.erfinv`.\r\n  * Add `tf.config.experimental.enable_mlir_bridge` to allow using MLIR compiler bridge in eager model.\r\n  * Added support for MatrixSolve on Cloud TPU / XLA.\r\n  * Added `tf.autodiff.ForwardAccumulator` for forward-mode autodiff\r\n  * Add `LinearOperatorPermutation`.\r\n  * A few performance optimizations on `tf.reduce_logsumexp`.\r\n  * Added multilabel handling to `AUC` metric\r\n  * Optimization on `zeros_like`.\r\n  * Dimension constructor now requires `None` or types with an `__index__` method.\r\n  * Add `tf.random.uniform` microbenchmark.\r\n  * Use `_protogen` suffix for proto library targets instead of `_cc_protogen` suffix.\r\n  * Moving the checkpoint reader from `swig` to `pybind11`.\r\n  * `tf.device` & `MirroredStrategy` now supports passing in a `tf.config.LogicalDevice`\r\n  * If you're building Tensorflow from source, consider using [bazelisk](https://github.com/bazelisk/bazel) to automatically download and use the correct Bazel version. Bazelisk reads the `.bazelversion` file at the root of the project directory.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n8bitmp3, Aaron Ma, Abd\u00fcLhamit Yilmaz, Abhai Kollara, aflc, Ag Ramesh, Albert Z. Guo, Alex Torres, amoitra, Andrii Prymostka, angeliand, Anshuman Tripathy, Anthony Barbier, Anton Kachatkou, Anubh-V, Anuja Jakhade, Artem Ryabov, autoih, Bairen Yi, Bas Aarts, Basit Ayantunde, Ben Barsdell, Bhavani Subramanian, Brett Koonce, candy.dc, Captain-Pool, caster, cathy, Chong Yan, Choong Yin Thong, Clayne Robison, Colle, Dan Ganea, David Norman, David Refaeli, dengziming, Diego Caballero, Divyanshu, djshen, Douman, Duncan Riach, EFanZh, Elena Zhelezina, Eric Schweitz, Evgenii Zheltonozhskii, Fei Hu, fo40225, Fred Reiss, Frederic Bastien, Fredrik Knutsson, fsx950223, fwcore, George Grzegorz Pawelczak, George Sterpu, Gian Marco Iodice, Giorgio Arena, giuros01, Gomathi Ramamurthy, Guozhong Zhuang, Haifeng Jin, Haoyu Wu, HarikrishnanBalagopal, HJYOO, Huang Chen-Yi, Ilham Firdausi Putra, Imran Salam, Jared Nielsen, Jason Zaman, Jasper Vicenti, Jeff Daily, Jeff Poznanovic, Jens Elofsson, Jerry Shih, jerryyin, Jesper Dramsch, jim.meyer, Jongwon Lee, Jun Wan, Junyuan Xie, Kaixi Hou, kamalkraj, Kan Chen, Karthik Muthuraman, Keiji Ariyama, Kevin Rose, Kevin Wang, Koan-Sin Tan, kstuedem, Kwabena W. Agyeman, Lakshay Tokas, latyas, Leslie-Fang-Intel, Li, Guizi, Luciano Resende, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manuel Freiberger, Mark Ryan, Martin Mlostek, Masaki Kozuki, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Muhwan Kim, Nagy Mostafa, nammbash, Nathan Luehr, Nathan Wells, Niranjan Hasabnis, Oleksii Volkovskyi, Olivier Moindrot, olramde, Ouyang Jin, OverLordGoldDragon, Pallavi G, Paul Andrey, Paul Wais, pkanwar23, Pooya Davoodi, Prabindh Sundareson, Rajeshwar Reddy T, Ralovich, Kristof, Refraction-Ray, Richard Barnes, richardbrks, Robert Herbig, Romeo Kienzler, Ryan Mccormick, saishruthi, Saket Khandelwal, Sami Kama, Sana Damani, Satoshi Tanaka, Sergey Mironov, Sergii Khomenko, Shahid, Shawn Presser, ShengYang1, Siddhartha Bagaria, Simon Plovyt, skeydan, srinivasan.narayanamoorthy, Stephen Mugisha, sunway513, Takeshi Watanabe, Taylor Jakobson, TengLu, TheMindVirus, ThisIsIsaac, Tim Gates, Timothy Liu, Tomer Gafner, Trent Lo, Trevor Hickey, Trevor Morris, vcarpani, Wei Wang, Wen-Heng (Jack) Chung, wenshuai, Wenshuai-Xiaomi, wenxizhu, william, William D. Irons, Xinan Jiang, Yannic, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Youwei Song, Zaccharie Ramzi, Zhang, Zhenyu Guo, \u738b\u632f\u534e (Zhenhua Wang), \u97e9\u8463, \uc774\uc911\uac74 Isaac Lee"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20750483", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20750483/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20750483/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0", "id": 20750483, "node_id": "MDc6UmVsZWFzZTIwNzUwNDgz", "tag_name": "v1.15.0", "target_commitish": "r1.15", "name": "TensorFlow 1.15.0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-10-14T21:08:43Z", "published_at": "2019-10-16T18:01:52Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.0", "body": "# Release 1.15.0\r\nThis is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year.\r\n\r\n## Major Features and Improvements\r\n* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2` module. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1` module. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r\nThis enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r\n* `EagerTensor` now supports numpy buffer interface for tensors.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r\n* Adds `enable_tensor_equality()`, which switches the behavior such that: \r\n  * Tensors are no longer hashable.\r\n  * Tensors can be compared with `==` and `!=`, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to `float16` for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to \"true\" or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n* TensorRT\r\n  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r\n  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r\n  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r\n    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r\n  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r\n     significantly accelerates object detection models.\r\n\r\n## Breaking Changes\r\n* Tensorflow code now produces 2 different pip packages: `tensorflow_core` containing all the code (in the future it will contain only the private implementation) and `tensorflow` which is a virtual pip package doing forwarding to `tensorflow_core` (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer \"layer-name\" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.estimator`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Fix tests in canned estimators.\r\n  * Expose Head as public API.\r\n  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r\n* `tf.data`:\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n* `tf.keras`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n* `tf.lite`\r\n  * Add `GATHER` support to NN API delegate.\r\n  * tflite object detection script has a debug mode.\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Added evaluation script for COCO minival.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* `parallel_for`: Add converter for `MatrixDiag`.\r\n* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r\n* Added new op: `tf.strings.unsorted_segment_join`.\r\n* Add HW acceleration support for `topK_v2`.\r\n* Add new `TypeSpec` classes.\r\n* CloudBigtable version updated to v0.10.0.\r\n* Expose `Head` as public API.\r\n* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n* Added `tf.sparse.from_dense` utility function.\r\n* Improved ragged tensor support in `TensorFlowTestCase`.\r\n* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n* `ResizeInputTensor` now works for all delegates.\r\n* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r\n* Add support of local soft device placement for eager op.\r\n* Add HW acceleration support for `LogSoftMax`.\r\n* Added a function `nested_value_rowids` for ragged tensors.\r\n* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n* Add `tf.math.cumulative_logsumexp operation`.\r\n* Add `tf.ragged.stack`.\r\n* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n* Delegate application failure leaves interpreter in valid state.\r\n* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r\n* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n* Added support for `FusedBatchNormV3` in converter.\r\n* A ragged to dense op for directly calculating tensors.\r\n* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\na6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur T\u00f3Mas Hallgr\u00edMsson, HarikrishnanBalagopal, H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen B\u00e9Dorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, \u738b\u632f\u534e (Zhenhua Wang)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20554260", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20554260/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20554260/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc3", "id": 20554260, "node_id": "MDc6UmVsZWFzZTIwNTU0MjYw", "tag_name": "v1.15.0-rc3", "target_commitish": "r1.15", "name": "TensorFlow 1.15.0-rc3", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-10-07T22:36:38Z", "published_at": "2019-10-08T17:08:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.0-rc3", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.0-rc3", "body": "# Release 1.15.0-rc3\r\nThis is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r\n\r\n## Major Features and Improvements\r\n* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r\nThis enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r\n* EagerTensor now supports numpy buffer interface for tensors.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r\n* Adds `enable_tensor_equality()`, which switches the behavior such that: \r\n  * Tensors are no longer hashable.\r\n  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to \"true\" or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n* TensorRT\r\n  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r\n  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r\n  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r\n    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r\n  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r\n     significantly accelerates object detection models.\r\n\r\n## Breaking Changes\r\n* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer \"layer-name\" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.estimator`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Fix tests in canned estimators.\r\n  * Expose Head as public API.\r\n  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r\n* `tf.data`:\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n* `tf.keras`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n* `tf.lite`\r\n  * Add `GATHER` support to NN API delegate.\r\n  * tflite object detection script has a debug mode.\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Added evaluation script for COCO minival.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* `parallel_for`: Add converter for `MatrixDiag`.\r\n* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r\n* Added new op: `tf.strings.unsorted_segment_join`.\r\n* Add HW acceleration support for `topK_v2`.\r\n* Add new `TypeSpec` classes.\r\n* CloudBigtable version updated to v0.10.0.\r\n* Expose `Head` as public API.\r\n* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n* Added `tf.sparse.from_dense` utility function.\r\n* Improved ragged tensor support in `TensorFlowTestCase`.\r\n* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n* `ResizeInputTensor` now works for all delegates.\r\n* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r\n* Add support of local soft device placement for eager op.\r\n* Add HW acceleration support for `LogSoftMax`.\r\n* Added a function `nested_value_rowids` for ragged tensors.\r\n* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n* Add `tf.math.cumulative_logsumexp operation`.\r\n* Add `tf.ragged.stack`.\r\n* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n* Delegate application failure leaves interpreter in valid state.\r\n* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r\n* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n* Added support for `FusedBatchNormV3` in converter.\r\n* A ragged to dense op for directly calculating tensors.\r\n* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\na6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur T\u00f3Mas Hallgr\u00edMsson, HarikrishnanBalagopal, H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen B\u00e9Dorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, \u738b\u632f\u534e (Zhenhua Wang)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20400227", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20400227/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20400227/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc2", "id": 20400227, "node_id": "MDc6UmVsZWFzZTIwNDAwMjI3", "tag_name": "v1.15.0-rc2", "target_commitish": "r1.15", "name": "TensorFlow 1.15.0-rc2", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-09-30T23:36:12Z", "published_at": "2019-10-01T23:50:56Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.0-rc2", "body": "# Release 1.15.0-rc2\r\nThis is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r\n\r\n## Major Features and Improvements\r\n* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r\nThis enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r\n* EagerTensor now supports numpy buffer interface for tensors.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r\n* Adds `enable_tensor_equality()`, which switches the behavior such that: \r\n  * Tensors are no longer hashable.\r\n  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to \"true\" or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n* TensorRT\r\n  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r\n  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r\n  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r\n    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r\n  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r\n     significantly accelerates object detection models.\r\n\r\n## Breaking Changes\r\n* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer \"layer-name\" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.estimator`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Fix tests in canned estimators.\r\n  * Expose Head as public API.\r\n  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r\n* `tf.data`:\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n* `tf.keras`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n* `tf.lite`\r\n  * Add `GATHER` support to NN API delegate.\r\n  * tflite object detection script has a debug mode.\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Added evaluation script for COCO minival.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* `parallel_for`: Add converter for `MatrixDiag`.\r\n* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r\n* Added new op: `tf.strings.unsorted_segment_join`.\r\n* Add HW acceleration support for `topK_v2`.\r\n* Add new `TypeSpec` classes.\r\n* CloudBigtable version updated to v0.10.0.\r\n* Expose `Head` as public API.\r\n* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n* Added `tf.sparse.from_dense` utility function.\r\n* Improved ragged tensor support in `TensorFlowTestCase`.\r\n* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n* `ResizeInputTensor` now works for all delegates.\r\n* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r\n* Add support of local soft device placement for eager op.\r\n* Add HW acceleration support for `LogSoftMax`.\r\n* Added a function `nested_value_rowids` for ragged tensors.\r\n* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n* Add `tf.math.cumulative_logsumexp operation`.\r\n* Add `tf.ragged.stack`.\r\n* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n* Delegate application failure leaves interpreter in valid state.\r\n* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r\n* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n* Added support for `FusedBatchNormV3` in converter.\r\n* A ragged to dense op for directly calculating tensors.\r\n* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\na6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur T\u00f3Mas Hallgr\u00edMsson, HarikrishnanBalagopal, H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen B\u00e9Dorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, \u738b\u632f\u534e (Zhenhua Wang)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20360510", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20360510/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20360510/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0", "id": 20360510, "node_id": "MDc6UmVsZWFzZTIwMzYwNTEw", "tag_name": "v2.0.0", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-09-27T21:56:33Z", "published_at": "2019-09-30T17:47:54Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0", "body": "# Release 2.0.0\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution.\r\n* Robust model deployment in production on any platform.\r\n* Powerful experimentation for research.\r\n* API simplification by reducing duplication and removing deprecated endpoints.\r\n\r\nFor details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r\n\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/guide/migrate) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r\n\r\n## Highlights\r\n\r\n* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and `tf.data`, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r\n* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r\n* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced with by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r\n* Unification of `tf.train.Optimizers` and `tf.keras.Optimizers`. Use `tf.keras.Optimizers` for TF2.0. `compute_gradients` is removed as public API, use `GradientTape` to compute gradients.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r\n* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r\n* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r\n * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r\n* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to `float16` for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to `TRUE` or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n\r\n## Breaking Changes\r\n* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r\n* Toolchains:\r\n  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n  Removed the `freeze_graph` command line tool; `SavedModel` should be used in place of frozen graphs.\r\n  \r\n* `tf.contrib`:\r\n  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r\n  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in `early_stopping.py`.\r\n  \r\n* `tf.estimator`:\r\n  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r\n  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r\n  * Canned Estimators don\u2019t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r\n  * `Estimator.export_savedmodel` has been renamed to `export_saved_model`.\r\n  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes to be saved with the model, please use `tf.compat.v1.Estimator`.\r\n  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r\n  \r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with `Layer <layer-name>` is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n \r\n* `tf.lite`:\r\n  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r\n* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r\n* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r\n* Removed `tf.string_split` from v2 API.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with 2.0](https://github.com/tensorflow/tensorflow/issues?utf8=%E2%9C%93&q=is%3Aopen+is%3Aissue+label%3A%22TF+2.0%22+) on GitHub for insight into recent issues and development progress.\r\n\r\nIf you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.contrib`:\r\n  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r\n  \r\n* `tf.data`:\r\n  * Add support for TensorArrays to `tf.data Dataset`.\r\n  * Integrate Ragged Tensors with `tf.data`.\r\n  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r\n  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r\n  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r\n  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r\n  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r\n  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through `tf.data.Options()`.\r\n  * Support cancellation of long-running `reduce`.\r\n  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r\n  * Improve the performance of datasets using `from_tensors()`.\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n\r\n* `tf.distribute`:\r\n  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r\n  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r\n  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r\n  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r\n\r\n* `tf.estimator`:\r\n  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r\n  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r\n  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r\n  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n\r\n* `tf.keras`:\r\n  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r\n  * Model saving changes\r\n  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format=\"h5\"` when saving.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r\n  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r\n  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r\n  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this \r\n   1.  All input types are converted to `Dataset`.\r\n   2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. \r\n   3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r\n     1. `sample_weight_mode` in compile \r\n     2. `weighted_metrics` in compile \r\n     3. v1 optimizer \r\n     4. target tensors in compile\r\nIf you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change.\r\n   1. output tensors of one layer is used in the constructor of another.\r\n   2. symbolic tensors outside the scope of the model are used in custom loss functions.\r\n   The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r\n  * Mark Keras `set_session` as `compat.v1` only.\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r\n  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Add support for temporal sample weight mode in subclassed models.\r\n  * Raise `ValueError` if an integer is passed to the training APIs. \r\n  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r\n  * Custom Callback tutorial is now available.\r\n  * To train with `tf.distribute`, Keras API is recommended over estimator.\r\n  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r\n  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r\n  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n  * `Layer` apply and add_variable APIs are deprecated.\r\n  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r\n  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r\n  * New loss reduction types: \r\n    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r\n    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r\n    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r\n  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r\n  * Update metric name to always reflect what the user has given in compile. Affects following cases \r\n    1. When name is given as 'accuracy'/'crossentropy' \r\n    2. When an aliased function name is used eg. 'mse' \r\n    3. Removing the `weighted` prefix from weighted metric names.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Fixed critical bugs that help with DenseFeatures usability in TF2\r\n\r\n* `tf.lite`:\r\n  * Added evaluation script for `COCO` minival\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Add `GATHER` support to NN API delegate.\r\n  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r\n  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r\n  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r\n  * Added support for `tflite_convert` command line tool in 2.0.\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n\r\n* TensorRT\r\n  * Add TensorFlow 2.0-compatible `TrtGraphConverterV2` API for TensorRT conversion.\r\n    TensorRT initialization arguments are now passed wrapped in a named-tuple,\r\n    `TrtConversionParams`, rather than as separate arguments as in `TrtGraphConverter`.\r\n  * Changed API to optimize TensorRT enginges during graph optimization. This is now\r\n    done by calling `converter.build()` where previously `is_dynamic_op=False` would\r\n    be set.\r\n  * `converter.convert()` no longer returns a `tf.function`. Now the funtion must be\r\n    accessed from the saved model.\r\n  * The `converter.calibrate()` method has been removed. To trigger calibration, a\r\n    `calibration_input_fn` should be provided to `converter.convert()`.\r\n\r\n* Other:\r\n  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * ResourceVariable support for `gather_nd`.\r\n  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n  * Added gradient for `SparseToDense` op.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r\n  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n  * Renamed `tf.image` functions to remove duplicate \"image\" where it is redundant.\r\n  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r\n  * Remove unused `StringViewVariantWrapper`.\r\n  * Delete unused `Fingerprint64Map` op registration\r\n  * Add broadcasting support to `tf.matmul`.\r\n  * Add C++ Gradient for `BatchMatMulV2`.\r\n  * Add `tf.math.cumulative_logsumexp` operation.\r\n  * Add ellipsis (...) support for `tf.einsum()`.\r\n  * Add expand_composites argument to all `nest.*` methods.\r\n  * Added `strings.byte_split`.\r\n  * Add a new \"result_type\" parameter to `tf.strings.split`.\r\n  * Add name argument to `tf.string_split` and `tf.strings_split`.\r\n  * Extend `tf.strings.split` to support inputs with any rank.\r\n  * Added `tf.random.binomial`.\r\n  * Added `key` and `skip` methods to `random.experimental.Generator`.\r\n  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r\n  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r\n  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r\n  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r\n  * `parallel_for`: Add converter for `MatrixDiag`.\r\n  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r\n  * `parallel_for`: add converter for `BroadcastTo`.\r\n  * Add `pfor` converter for `Squeeze`.\r\n  * Add `RaggedTensor.placeholder()`.\r\n  * Add ragged tensor support to `tf.squeeze`.\r\n  * Update RaggedTensors to support int32 row_splits.\r\n  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r\n  * Allow all dtypes for `LinearOperatorCirculant`.\r\n  * Introduce MaxParallelism method\r\n  * Add `LinearOperatorHouseholder`.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n  * Added `TensorSpec` support for CompositeTensors.\r\n  * Added `tf.linalg.tridiagonal_solve` op.\r\n  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r\n  * Added gradient to `tf.linalg.tridiagonal_solve`.\r\n  * Added `tf.linalg.tridiagonal_mul op`.\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r\n  * Added `LinearOperatorToeplitz`.\r\n  * Upgraded LIBXSMM to version 1.11.\r\n  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops.\r\n  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r\n  * Add `tf.ragged.boolean_mask`.\r\n  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r\n  * The C++ kernel of gather op supports batch dimensions.\r\n  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r\n  * `EagerTensor` now supports numpy buffer interface for tensors.\r\n  * This change bumps the version number of the `FullyConnected` Op to 5.\r\n  * Added new op: `tf.strings.unsorted_segment_join`.\r\n  * Added HW acceleration support for `topK_v2`.\r\n  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r\n  * Expose `Head` as public API.\r\n  * Added `tf.sparse.from_dense` utility function.\r\n  * Improved ragged tensor support in `TensorFlowTestCase`.\r\n  * Added a function `nested_value_rowids` for ragged tensors.\r\n  * Added `tf.ragged.stack`.\r\n  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n  * `ResizeInputTensor` now works for all delegates.\r\n  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n  * Add support of local soft device placement for eager op.\r\n  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r\n  * Add HW acceleration support for `LogSoftMax`.\r\n  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n  * Delegate application failure leaves interpreter in valid state\r\n  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n  * `tf.cond`, `tf.while` and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r\n  * Only create a GCS directory object if the object does not already exist.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to `True` when using imperative control flow in the `call` method.\r\n  * Begin adding Go wrapper for C Eager API.\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add `batch_dims` argument to `tf.gather`.\r\n  * The behavior of `tf.gather` is now correct when `axis=None` and `batch_dims<0`.\r\n  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n  * Add `tf.math.nextafter` op.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r\n  * `tf.linspace(start, stop, num)` now always uses \"stop\" as last value (for num > 1)\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r\n  * Add `CompositeTensor` base class.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * Add templates and interfaces for creating lookup tables\r\n  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r\n  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n  * Add variant wrapper for `absl::string_view`.\r\n  * Add OpKernels for some stateless maps.\r\n  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r\n  * Expose CriticalSection in core as `tf.CriticalSection`.\r\n  * Enhanced graphviz output.\r\n  * Add opkernel templates for common table operations.\r\n  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r\n  * `SignatureDef` util functions have been deprecated.\r\n  * Update `Fingerprint64Map` to use aliases\r\n  * Add legacy string flat hash map op kernels.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n  * Changed default for gradient accumulation for TPU embeddings to true.\r\n  * Adds summary trace API for collecting graph and profile information. \r\n  * The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, a6802739, 4d55397500, a6802739, Abdullah Selek, abenmao, Abolfazl Shahbazi, Adam Richter, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Andy Craze, Anshuman Tripathy, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Armen Poghosov, armenpoghosov, Astropeak, Ashwin Ramaswami, Arpit Shah, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, awesomealex1, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bairen Yi, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Brandon Carter, Bryan Cutler, candy.dc, Cao Zongyan, Casper Da Costa-Luis, Chao Liu, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Rasmussen, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, Diego Caballero, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Felix Lemke, Filip Matzner, FlashTek, fo40225, formath, Franc\u0327Ois Chollet, frreiss, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, Gautam, gehring, Geoffrey Irving, George Grzegorz Pawelczak, Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, HanGuo97, Haraldur T\u00f3Mas Hallgr\u00edMsson, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), H\u00e5Kon Sandsmark, I-Hong, I-Hong Jhuo, Ilham Firdausi Putra, Ilango R, Imran Salam, Innovimax, Jacky Ko, Irene Dea, Ivan Habernal, Jakub Lipinski, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jcf94, jefby, Jeff Daily, Jeff Poznanovic, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen B\u00e9Dorf, jerryyin, jhalakp, jiakai, Jia Qingtong, Jiankang, JiangXIAO, Joe Bowser, Joe Q, Joe Quadrino, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonas Rauber, Jonathan Kyl, Jonathan, Joon, Joppe Geluykens, Joseph Friedman, Josh Beal,  jtressle, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, jwu, K. Hodges, kaixih, Kaixi Hou, kjopek, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Koock Yoon, kouml, ktaebum, Kyuwon Kim, Lakshay Tokas, Laurent Le Brun, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Folle, Lukas Geiger, Luke Han, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, manhyuk, Manraj Singh Grover, Marco Gaido, Marek Drozdowski, Margaret Maynard-Reid, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, Melissa Grueter, merturl, MichaelKonobeev, Michael K\u00e4Ufl, Michal W. Tarnowski, Micka\u00ebL Schoentgen, Miguel Morin, Mihail Salnikov, Mikalai Drabovich, Mike Arpaia, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Natalia Gimelshein, Nathan Luehr, Nayana-Ibm, Nayana Thorat, neargye, Neeraj Pradhan, Nehal J Wani, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, Nuka-137, Nutti, ocjosen, olicht, omeir1, P Sudeepam, Paige Bailey, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, Pavel Samolysov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Samantha Andow, Sami Kama, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shahzad Lone, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Shashi, Sigrid Keydana, Siju, Siju Samuel, sleighsoft, smilu97, Snease-Abq, Son Tran, Spencer Schaber, sremedios, Srini511, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, Supriya Rao, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Taylor Thornton, Ted Chang, TengLu, terryky, ThisIsIsaac, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, tomguluson92, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vagif, Vasileios Lioutas, vbvg2008, vcarpani, Vijay Ravichandran, Vikram Tiwari,Viktor Gal,  Vishwak Srinivasan, Vincent, Vishnuvardhan Janapati, Vitor-Alves, Vivek Suryamurthy, wangsiyu, wateryzephyr, WeberXie, Wei Wang, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yan Facai (\u989c\u53d1\u624d), Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, ymodak, Yong Tang, Yongfeng Gu, Younes Khoudli, Yuan Lin, Yuan (Terry) Tang, Yuchen Ying, Yves-Noel Weweler, zhangyujing, zjjott, zyeric, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20178937", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20178937/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20178937/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc2", "id": 20178937, "node_id": "MDc6UmVsZWFzZTIwMTc4OTM3", "tag_name": "v2.0.0-rc2", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-rc2", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-09-19T21:51:25Z", "published_at": "2019-09-23T13:22:21Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-rc2", "body": "# Release 2.0.0-rc2\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution.\r\n* Robust model deployment in production on any platform.\r\n* Powerful experimentation for research.\r\n* API simplification by reducing duplication and removing deprecated endpoints.\r\n\r\nFor details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r\n\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r\n\r\n## Highlights\r\n\r\n* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r\n* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r\n* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r\n* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r\n* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r\n* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r\n * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r\n* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to \"true\" or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n\r\n## Breaking Changes\r\n* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r\n* Toolchains:\r\n  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n\r\n* `tf.contrib`:\r\n  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r\n  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py.\r\n\r\n* `tf.estimator`:\r\n  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r\n  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r\n  * Canned Estimators don\u2019t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r\n  * `Estimator.export_savedmodel` has been renamed `export_saved_model`.\r\n  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use `tf.compat.v1.Estimator`.\r\n  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r\n\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with \"Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32\". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n\r\n* `tf.lite`:\r\n  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r\n\r\n* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r\n* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r\n* Removed `tf.string_split` from v2 API.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r\n\r\nIf you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.contrib`:\r\n  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r\n  \r\n* `tf.data`:\r\n  * Add support for TensorArrays to `tf.data Dataset`.\r\n  * Integrate Ragged Tensors with `tf.data`.\r\n  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r\n  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r\n  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r\n  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r\n  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r\n  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r\n  * Support cancellation of long-running `reduce`.\r\n  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r\n  * Improve the performance of datasets using `from_tensors()`.\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n\r\n* `tf.distribute`:\r\n  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r\n  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r\n  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r\n  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r\n\r\n* `tf.estimator`:\r\n  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r\n  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r\n  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r\n  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n\r\n* `tf.keras`:\r\n  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r\n  * Model saving changes\r\n  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format=\"h5\"` when saving.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r\n  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r\n  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r\n  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this\r\n    1.  All input types are converted to `Dataset`.\r\n    2. The path assumes there is always a distribution strategy, when distribution strategy is not specified the path uses a no-op distribution strategy. \r\n    3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r\n       1. `sample_weight_mode` in compile \r\n       2. `weighted_metrics` in compile \r\n       3. v1 optimizer \r\n       4. target tensors in compile.  \r\n    4. If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change. \r\n       1. output tensors of one layer is used in the constructor of another. \r\n       2. symbolic tensors outside the scope of the model are used in custom loss functions.\r\nThe flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r\n  * Mark Keras `set_session` as `compat.v1` only.\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r\n  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Add support for temporal sample weight mode in subclassed models.\r\n  * Raise ValueError if an integer is passed to the training APIs. \r\n  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r\n  * Custom Callback tutorial is now available.\r\n  * To train with `tf.distribute`, Keras api is recommended over estimator.\r\n  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r\n  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r\n  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n  * `Layer` apply and add_variable APIs are deprecated.\r\n  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r\n  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r\n  * New loss reduction types: \r\n    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r\n    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r\n    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r\n  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r\n  * Update metric name to always reflect what the user has given in compile. Affects following cases \r\n    1. When name is given as 'accuracy'/'crossentropy' \r\n    2. When an aliased function name is used eg. 'mse' \r\n    3. Removing the `weighted` prefix from weighted metric names.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Fixed critical bugs that help with DenseFeatures usability in TF2\r\n\r\n* `tf.lite`:\r\n  * Added evaluation script for `COCO` minival\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Add `GATHER` support to NN API delegate.\r\n  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r\n  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r\n  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r\n  * Added support for `tflite_convert` command line tool in 2.0.\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n\r\n* TensorRT\r\n  * Add TensorFlow 2.0-compatible `TrtGraphConverterV2` API for TensorRT conversion. TensorRT initialization arguments are now passed wrapped in a named-tuple,`TrtConversionParams`, rather than as separate arguments as in `TrtGraphConverter`.\r\n  * Changed API to optimize TensorRT engines during graph optimization. This is nowdone by calling `converter.build()` where previously `is_dynamic_op=False` would be set.\r\n  * `converter.convert()` no longer returns a `tf.function`. Now the function must beaccessed from the saved model.\r\n  * The `converter.calibrate()` method has been removed. To trigger calibration, a`calibration_input_fn` should be provided to `converter.convert()`.\r\n  \r\n* Other:\r\n  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * ResourceVariable support for `gather_nd`.\r\n  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n  * Added gradient for `SparseToDense` op.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r\n  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n  * Renamed `tf.image` functions to remove duplicate \"image\" where it is redundant.\r\n  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r\n  * Remove unused `StringViewVariantWrapper`.\r\n  * Delete unused `Fingerprint64Map` op registration\r\n  * Add broadcasting support to `tf.matmul`.\r\n  * Add C++ Gradient for `BatchMatMulV2`.\r\n  * Add `tf.math.cumulative_logsumexp` operation.\r\n  * Add ellipsis (...) support for `tf.einsum()`.\r\n  * Add expand_composites argument to all `nest.*` methods.\r\n  * Added `strings.byte_split`.\r\n  * Add a new \"result_type\" parameter to `tf.strings.split`.\r\n  * Add name argument to `tf.string_split` and `tf.strings_split`.\r\n  * Extend `tf.strings.split` to support inputs with any rank.\r\n  * Added `tf.random.binomial`.\r\n  * Added `key` and `skip` methods to `random.experimental.Generator`.\r\n  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r\n  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r\n  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r\n  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r\n  * `parallel_for`: Add converter for `MatrixDiag`.\r\n  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r\n  * `parallel_for`: add converter for `BroadcastTo`.\r\n  * Add `pfor` converter for `Squeeze`.\r\n  * Add `RaggedTensor.placeholder()`.\r\n  * Add ragged tensor support to `tf.squeeze`.\r\n  * Update RaggedTensors to support int32 row_splits.\r\n  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r\n  * Allow all dtypes for `LinearOperatorCirculant`.\r\n  * Introduce MaxParallelism method\r\n  * Add `LinearOperatorHouseholder`.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n  * Add `TensorSpec` support for CompositeTensors.\r\n  * Add `tf.linalg.tridiagonal_solve` op.\r\n  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r\n  * Added gradient to `tf.linalg.tridiagonal_solve`.\r\n  * Add `tf.linalg.tridiagonal_mul op`.\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r\n  * Add `LinearOperatorToeplitz`.\r\n  * Upgraded LIBXSMM to version 1.11.\r\n  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r\n  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r\n  * Add `tf.ragged.boolean_mask`.\r\n  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r\n  * The C++ kernel of gather op supports batch dimensions.\r\n  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r\n  * EagerTensor now supports numpy buffer interface for tensors.\r\n  * This change bumps the version number of the FullyConnected Op to 5.\r\n  * Added new op: `tf.strings.unsorted_segment_join`.\r\n  * Add HW acceleration support for `topK_v2`.\r\n  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r\n  * Expose `Head` as public API.\r\n  * Added `tf.sparse.from_dense` utility function.\r\n  * Improved ragged tensor support in `TensorFlowTestCase`.\r\n  * Added a function `nested_value_rowids` for ragged tensors.\r\n  * Add `tf.ragged.stack`.\r\n  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n  * `ResizeInputTensor` now works for all delegates.\r\n  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n  * Add support of local soft device placement for eager op.\r\n  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r\n  * Add HW acceleration support for `LogSoftMax`.\r\n  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n  * Delegate application failure leaves interpreter in valid state\r\n  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r\n  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r\n  * Only create a GCS directory object if the object does not already exist.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * Begin adding Go wrapper for C Eager API.\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add `batch_dims` argument to `tf.gather`.\r\n  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r\n  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n  * Add `tf.math.nextafter` op.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r\n  * `tf.linspace(start, stop, num)` now always uses \"stop\" as last value (for num > 1)\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r\n  * Add `CompositeTensor` base class.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * Add templates and interfaces for creating lookup tables\r\n  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r\n  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n  * Add variant wrapper for `absl::string_view`.\r\n  * Add OpKernels for some stateless maps.\r\n  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r\n  * Expose CriticalSection in core as `tf.CriticalSection`.\r\n  * Enhanced graphviz output.\r\n  * Add opkernel templates for common table operations.\r\n  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r\n  * `SignatureDef` util functions have been deprecated.\r\n  * Update `Fingerprint64Map` to use aliases\r\n  * Add legacy string flat hash map op kernels.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n  * Changed default for gradient accumulation for TPU embeddings to true.\r\n  * Adds summary trace API for collecting graph and profile information. \r\n  \r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), ymodak, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua), \r\n\r\n4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, Franc\u0327Ois Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur T\u00f3Mas Hallgr\u00edMsson, Huan Li (\u674e\u5353\u6853), H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen B\u00e9Dorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20036018", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/20036018/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/20036018/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc1", "id": 20036018, "node_id": "MDc6UmVsZWFzZTIwMDM2MDE4", "tag_name": "v1.15.0-rc1", "target_commitish": "r1.15", "name": "TensorFlow Release 1.15.0-rc1", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-09-16T05:00:45Z", "published_at": "2019-09-17T06:54:51Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.0-rc1", "body": "# Release 1.15.0-rc1\r\nThis is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r\n\r\n## Major Features and Improvements\r\n* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r\nThis enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r\n* EagerTensor now supports numpy buffer interface for tensors.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r\n* Adds `enable_tensor_equality()`, which switches the behavior such that: \r\n  * Tensors are no longer hashable.\r\n  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r\n* Auto Mixed-Precision graph optimizer simplifies converting models to float16 for acceleration on Volta and Turing Tensor Cores. This feature can be enabled by wrapping an optimizer class with `tf.train.experimental.enable_mixed_precision_graph_rewrite()`.\r\n* Add environment variable `TF_CUDNN_DETERMINISTIC`. Setting to \"true\" or \"1\" forces the selection of deterministic cuDNN convolution and max-pooling algorithms. When this is enabled, the algorithm selection procedure itself is also deterministic.\r\n* TensorRT\r\n  * Migrate TensorRT conversion sources from contrib to compiler directory in preparation for TF 2.0.\r\n  * Add additional, user friendly `TrtGraphConverter` API for TensorRT conversion.\r\n  * Expand support for TensorFlow operators in TensorRT conversion (e.g.\r\n    `Gather`, `Slice`, `Pack`, `Unpack`, `ArgMin`, `ArgMax`,`DepthSpaceShuffle`). \r\n  * Support TensorFlow operator `CombinedNonMaxSuppression` in TensorRT conversion which \r\n     significantly accelerates object detection models.\r\n\r\n## Breaking Changes\r\n* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer \"layer-name\" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.estimator`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint` format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Fix tests in canned estimators.\r\n  * Expose Head as public API.\r\n  * Fixes critical bugs that help with `DenseFeatures` usability in TF2\r\n* `tf.data`:\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n* `tf.keras`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n* `tf.lite`\r\n  * Add `GATHER` support to NN API delegate.\r\n  * tflite object detection script has a debug mode.\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Added evaluation script for COCO minival.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* `parallel_for`: Add converter for `MatrixDiag`.\r\n* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r\n* Added new op: `tf.strings.unsorted_segment_join`.\r\n* Add HW acceleration support for `topK_v2`.\r\n* Add new `TypeSpec` classes.\r\n* CloudBigtable version updated to v0.10.0.\r\n* Expose `Head` as public API.\r\n* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n* Added `tf.sparse.from_dense` utility function.\r\n* Improved ragged tensor support in `TensorFlowTestCase`.\r\n* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n* `ResizeInputTensor` now works for all delegates.\r\n* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r\n* Add support of local soft device placement for eager op.\r\n* Add HW acceleration support for `LogSoftMax`.\r\n* Added a function `nested_value_rowids` for ragged tensors.\r\n* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n* Add `tf.math.cumulative_logsumexp operation`.\r\n* Add `tf.ragged.stack`.\r\n* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n* Delegate application failure leaves interpreter in valid state.\r\n* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r\n* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n* Added support for `FusedBatchNormV3` in converter.\r\n* A ragged to dense op for directly calculating tensors.\r\n* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n* The `precision_mode` argument to `TrtGraphConverter` is now case insensitive.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\na6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur T\u00f3Mas Hallgr\u00edMsson, HarikrishnanBalagopal, H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen B\u00e9Dorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, \u738b\u632f\u534e (Zhenhua Wang)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19925830", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19925830/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/19925830/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc1", "id": 19925830, "node_id": "MDc6UmVsZWFzZTE5OTI1ODMw", "tag_name": "v2.0.0-rc1", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-rc1", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-09-11T17:43:51Z", "published_at": "2019-09-11T21:43:03Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-rc1", "body": "# Release 2.0.0-rc1\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution.\r\n* Robust model deployment in production on any platform.\r\n* Powerful experimentation for research.\r\n* API simplification by reducing duplication and removing deprecated endpoints.\r\n\r\nFor details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r\n\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r\n\r\n## Highlights\r\n\r\n* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r\n* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r\n* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r\n* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r\n* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r\n* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r\n * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r\n* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* Fixes autocomplete for most TensorFlow API references by switching to use relative imports in API `__init__.py` files.\r\n\r\n## Breaking Changes\r\n* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r\n* Toolchains:\r\n  * TensorFlow 2.0.0 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n\r\n* `tf.contrib`:\r\n  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r\n  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py.\r\n\r\n* `tf.estimator`:\r\n  * Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r\n  * Default aggregation for canned Estimators is now `SUM_OVER_BATCH_SIZE`. To maintain previous default behavior, please pass `SUM` as the loss aggregation method.\r\n  * Canned Estimators don\u2019t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to `tf.compat.v1 canned Estimators`.\r\n  * `Estimator.export_savedmodel` has been renamed `export_saved_model`.\r\n  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use `tf.compat.v1.Estimator`.\r\n  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, `tf.feature_column.input_layer` has been deprecated in favor of `tf.keras.layers.DenseFeatures`. v1 feature columns have direct analogues in v2 except for `shared_embedding_columns`, which are not cross-compatible with v1 and v2. Use `tf.feature_column.shared_embeddings` instead.\r\n\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with \"Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32\". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n\r\n* `tf.lite`:\r\n  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r\n* Tensors are no longer hashable, but instead compare element-wise with `==` and `!=`. Use `tf.compat.v1.disable_tensor_equality()` to return to the previous behavior.\r\n* Performing equality operations on Tensors or Variables with incompatible shapes an exception is no longer thrown. Instead `__eq__` returns False and `__ne__` returns True.\r\n* Removed `tf.string_split` from v2 API.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* Add `UnifiedGRU` as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from `hard_sigmoid` to `sigmoid`, and `reset_after` to True in 2.0. Historically recurrent activation is `hard_sigmoid` since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n* `CUDNN_INSTALL_PATH`, `TENSORRT_INSTALL_PATH`, `NCCL_INSTALL_PATH`, `NCCL_HDR_PATH` are deprecated. Use `TF_CUDA_PATHS` instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r\n\r\nIf you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.contrib`:\r\n  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r\n  \r\n* `tf.data`:\r\n  * Add support for TensorArrays to `tf.data Dataset`.\r\n  * Integrate Ragged Tensors with `tf.data`.\r\n  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r\n  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r\n  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r\n  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r\n  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r\n  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r\n  * Support cancellation of long-running `reduce`.\r\n  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r\n  * Improve the performance of datasets using `from_tensors()`.\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n\r\n* `tf.distribute`:\r\n  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r\n  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r\n  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n  * Loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r\n  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r\n\r\n* `tf.estimator`:\r\n  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_s in Estimator\r\n  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r\n  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from `tf.train.Optimizers` to `tf.keras.optimizers`.\r\n  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n\r\n* `tf.keras`:\r\n  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r\n  * Model saving changes\r\n  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format=\"h5\"` when saving.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Add support for passing list of lists to the `metrics` argument in Keras `compile`.\r\n  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r\n  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r\n  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this \r\n   1.  All input types are converted to `Dataset`.\r\n   2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. \r\n   3. The training step is wrapped in `tf.function` unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: \r\n     1. `sample_weight_mode` in compile \r\n     2. `weighted_metrics` in compile \r\n     3. v1 optimizer \r\n     4. target tensors in compile\r\nIf you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change.\r\n   1. output tensors of one layer is used in the constructor of another.\r\n   2. symbolic tensors outside the scope of the model are used in custom loss functions.\r\n   The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r\n  * Mark Keras `set_session` as `compat.v1` only.\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r\n  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Add support for temporal sample weight mode in subclassed models.\r\n  * Raise ValueError if an integer is passed to the training APIs. \r\n  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r\n  * Custom Callback tutorial is now available.\r\n  * To train with `tf.distribute`, Keras api is recommended over estimator.\r\n  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r\n  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r\n  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n  * `Layer` apply and add_variable APIs are deprecated.\r\n  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r\n  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r\n  * New loss reduction types: \r\n    1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. \r\n    2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. \r\n    3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r\n  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n  * `model.add_loss(symbolic_tensor)` should work in ambient eager.\r\n  * Update metric name to always reflect what the user has given in compile. Affects following cases \r\n    1. When name is given as 'accuracy'/'crossentropy' \r\n    2. When an aliased function name is used eg. 'mse' \r\n    3. Removing the `weighted` prefix from weighted metric names.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Add v2 APIs for `AUCCurve` and `AUCSummationMethod` enums.\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Fixed critical bugs that help with DenseFeatures usability in TF2\r\n\r\n* `tf.lite`:\r\n  * Added evaluation script for `COCO` minival\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Add `GATHER` support to NN API delegate.\r\n  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r\n  * Add `EXPAND_DIMS` support to NN API delegate TEST.\r\n  * Add `narrow_range` attribute to QuantizeAndDequantizeV2 and V3.\r\n  * Added support for `tflite_convert` command line tool in 2.0.\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n  \r\n* Other:\r\n  * Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * ResourceVariable support for `gather_nd`.\r\n  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n  * Added gradient for `SparseToDense` op.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r\n  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n  * Renamed `tf.image` functions to remove duplicate \"image\" where it is redundant.\r\n  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r\n  * Remove unused `StringViewVariantWrapper`.\r\n  * Delete unused `Fingerprint64Map` op registration\r\n  * Add broadcasting support to `tf.matmul`.\r\n  * Add C++ Gradient for `BatchMatMulV2`.\r\n  * Add `tf.math.cumulative_logsumexp` operation.\r\n  * Add ellipsis (...) support for `tf.einsum()`.\r\n  * Add expand_composites argument to all `nest.*` methods.\r\n  * Added `strings.byte_split`.\r\n  * Add a new \"result_type\" parameter to `tf.strings.split`.\r\n  * Add name argument to `tf.string_split` and `tf.strings_split`.\r\n  * Extend `tf.strings.split` to support inputs with any rank.\r\n  * Added `tf.random.binomial`.\r\n  * Added `key` and `skip` methods to `random.experimental.Generator`.\r\n  * Extend `tf.function` with basic support for CompositeTensors arguments (such as `SparseTensor` and `RaggedTensor`).\r\n  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r\n  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r\n  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r\n  * `parallel_for`: Add converter for `MatrixDiag`.\r\n  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r\n  * `parallel_for`: add converter for `BroadcastTo`.\r\n  * Add `pfor` converter for `Squeeze`.\r\n  * Add `RaggedTensor.placeholder()`.\r\n  * Add ragged tensor support to `tf.squeeze`.\r\n  * Update RaggedTensors to support int32 row_splits.\r\n  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r\n  * Allow all dtypes for `LinearOperatorCirculant`.\r\n  * Introduce MaxParallelism method\r\n  * Add `LinearOperatorHouseholder`.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n  * Add `TensorSpec` support for CompositeTensors.\r\n  * Add `tf.linalg.tridiagonal_solve` op.\r\n  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r\n  * Added gradient to `tf.linalg.tridiagonal_solve`.\r\n  * Add `tf.linalg.tridiagonal_mul op`.\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r\n  * Add `LinearOperatorToeplitz`.\r\n  * Upgraded LIBXSMM to version 1.11.\r\n  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r\n  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r\n  * Add `tf.ragged.boolean_mask`.\r\n  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r\n  * The C++ kernel of gather op supports batch dimensions.\r\n  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r\n  * EagerTensor now supports numpy buffer interface for tensors.\r\n  * This change bumps the version number of the FullyConnected Op to 5.\r\n  * Added new op: `tf.strings.unsorted_segment_join`.\r\n  * Add HW acceleration support for `topK_v2`.\r\n  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0.\r\n  * Expose `Head` as public API.\r\n  * Added `tf.sparse.from_dense` utility function.\r\n  * Improved ragged tensor support in `TensorFlowTestCase`.\r\n  * Added a function `nested_value_rowids` for ragged tensors.\r\n  * Add `tf.ragged.stack`.\r\n  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n  * `ResizeInputTensor` now works for all delegates.\r\n  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n  * Add support of local soft device placement for eager op.\r\n  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r\n  * Add HW acceleration support for `LogSoftMax`.\r\n  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n  * Delegate application failure leaves interpreter in valid state\r\n  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r\n  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r\n  * Only create a GCS directory object if the object does not already exist.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * Begin adding Go wrapper for C Eager API.\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add `batch_dims` argument to `tf.gather`.\r\n  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r\n  * Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n  * Add `tf.math.nextafter` op.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with `--define=tensorflow_mkldnn_contraction_kernel=0`.\r\n  * `tf.linspace(start, stop, num)` now always uses \"stop\" as last value (for num > 1)\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Transitive dependencies on :`pooling_ops` were removed.  Some users may need to add explicit dependencies on :`pooling_ops` if they reference the operators from that library.\r\n  * Add `CompositeTensor` base class.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * Add templates and interfaces for creating lookup tables\r\n  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r\n  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n  * Add variant wrapper for `absl::string_view`.\r\n  * Add OpKernels for some stateless maps.\r\n  * DType is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n  * Added `LinearOperator.adjoint` and `LinearOperator.H` (alias).\r\n  * Expose CriticalSection in core as `tf.CriticalSection`.\r\n  * Enhanced graphviz output.\r\n  * Add opkernel templates for common table operations.\r\n  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r\n  * `SignatureDef` util functions have been deprecated.\r\n  * Update `Fingerprint64Map` to use aliases\r\n  * Add legacy string flat hash map op kernels.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n  * Changed default for gradient accumulation for TPU embeddings to true.\r\n  * Adds summary trace API for collecting graph and profile information. \r\n  \r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua), \r\n\r\n4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, Franc\u0327Ois Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur T\u00f3Mas Hallgr\u00edMsson, Huan Li (\u674e\u5353\u6853), H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen B\u00e9Dorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19866891", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19866891/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/19866891/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.15.0-rc0", "id": 19866891, "node_id": "MDc6UmVsZWFzZTE5ODY2ODkx", "tag_name": "v1.15.0-rc0", "target_commitish": "r1.15", "name": "TensorFlow 1.15.0-rc0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-09-08T20:24:52Z", "published_at": "2019-09-10T00:35:18Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.15.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.15.0-rc0", "body": "# Release 1.15.0-rc0\r\nThis is the last 1.x release for TensorFlow. We do not expect to update the 1.x branch with features, although we will issue patch releases to fix vulnerabilities for at least one year. \r\n\r\n## Major Features and Improvements\r\n* As [announced](https://groups.google.com/a/tensorflow.org/forum/#!topic/developers/iRCt5m4qUz0), `tensorflow` pip package will by default include GPU support (same as `tensorflow-gpu` now) for the platforms we currently have GPU support (Linux and Windows). It will work on machines with and without Nvidia GPUs. `tensorflow-gpu` will still be available, and CPU-only packages can be downloaded at `tensorflow-cpu` for users who are concerned about package size.\r\n* TensorFlow 1.15 contains a complete implementation of the 2.0 API in its `compat.v2 module`. It contains a copy of the 1.15 main module (without `contrib`) in the `compat.v1 module`. TensorFlow 1.15 is able to emulate 2.0 behavior using the `enable_v2_behavior()` function.\r\nThis enables writing forward compatible code: by explicitly importing either `tensorflow.compat.v1` or `tensorflow.compat.v2`, you can ensure that your code works without modifications against an installation of 1.15 or 2.0.\r\n* EagerTensor now supports numpy buffer interface for tensors.\r\n* Add toggles `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()` for enabling/disabling v2 control flow.\r\n* Enable v2 control flow as part of `tf.enable_v2_behavior()` and `TF2_BEHAVIOR=1`.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with `tf.data`, `tf.distribute` and `tf.keras` APIS.\r\n* Adds `enable_tensor_equality()`, which switches the behavior such that: \r\n  * Tensors are no longer hashable.\r\n  * Tensors can be compared with == and !=, yielding a Boolean Tensor with element-wise comparison results. This will be the default behavior in 2.0.\r\n\r\n## Breaking Changes\r\n* Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow). We don't expect this to be breaking, unless you were importing directly from the implementation.\r\n* TensorFlow 1.15 is built using devtoolset7 (GCC7) on Ubuntu 16. This may lead to ABI incompatibilities with extensions built against earlier versions of TensorFlow.\r\n* Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n* `tf.keras`:\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config. To configure the number of threads, use `tf.config.threading` APIs.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Layers now default to `float32`, and automatically cast their inputs to the layer's dtype. If you had a model that used `float64`, it will probably silently use `float32` in TensorFlow2, and a warning will be issued that starts with Layer \"layer-name\" is casting an input tensor from dtype float64 to the layer's dtype of float32. To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n  * Some `tf.assert_*` methods now raise assertions at operation creation time (i.e. when this Python line executes) if the input tensors' values are known at that time, not during the session.run(). When this happens, a noop is returned and the input tensors are marked non-feedable. In other words, if they are used as keys in `feed_dict` argument to `session.run()`, an error will be raised. Also, because some assert ops don't make it into the graph, the graph structure changes. A different graph can result in different per-op random seeds when they are not given explicitly (most often).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n* `tf.keras`:\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to tf.train.Checkpoint format, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and `tf.keras.models.load_model` instead.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Enable the Keras compile API `experimental_run_tf_function` flag by default. This flag enables single training/eval/predict execution path. With this 1. All input types are converted to `Dataset`. 2. When distribution strategy is not specified this goes through the no-op distribution strategy path. 3. Execution is wrapped in tf.function unless `run_eagerly=True` is set in compile.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n* `tf.lite`\r\n  * Add `GATHER` support to NN API delegate.\r\n  * tflite object detection script has a debug mode.\r\n  * Add delegate support for `QUANTIZE`.\r\n  * Added evaluation script for COCO minival.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * Converts hardswish subgraphs into atomic ops.\r\n* Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* `parallel_for`: Add converter for `MatrixDiag`.\r\n* Add `narrow_range` attribute to `QuantizeAndDequantizeV2` and V3.\r\n* Added new op: `tf.strings.unsorted_segment_join`.\r\n* Add HW acceleration support for `topK_v2`.\r\n* Add new `TypeSpec` classes.\r\n* CloudBigtable version updated to v0.10.0.\r\n* Expose `Head` as public API.\r\n* Update docstring for gather to properly describe the non-empty `batch_dims` case.\r\n* Added `tf.sparse.from_dense` utility function.\r\n* Improved ragged tensor support in `TensorFlowTestCase`.\r\n* Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n* `ResizeInputTensor` now works for all delegates.\r\n* Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n* `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n* `tf.cond`, `tf.while` and `if` and `while` in AutoGraph now accept a nonscalar predicate if has a single element. This does not affect non-V2 control flow.\r\n* `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n* Refactors code in Quant8 LSTM support to reduce TFLite binary size.\r\n* Add support of local soft device placement for eager op.\r\n* Add HW acceleration support for `LogSoftMax`.\r\n* Added a function `nested_value_rowids` for ragged tensors.\r\n* Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n* Add `tf.math.cumulative_logsumexp operation`.\r\n* Add `tf.ragged.stack`.\r\n* Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n* Delegate application failure leaves interpreter in valid state.\r\n* Add check for correct memory alignment to `MemoryAllocation::MemoryAllocation()`.\r\n* Extracts `NNAPIDelegateKernel` from nnapi_delegate.cc\r\n* Added support for `FusedBatchNormV3` in converter.\r\n* A ragged to dense op for directly calculating tensors.\r\n* Fix accidental quadratic graph construction cost in graph-mode `tf.gradients()`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\na6802739, Aaron Ma, Abdullah Selek, Abolfazl Shahbazi, Ag Ramesh, Albert Z. Guo, Albin Joy, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Amit Srivastava, amoitra, Andrew Lihonosov, Andrii Prymostka, Anuj Rawat, Astropeak, Ayush Agrawal, Bairen Yi, Bas Aarts, Bastian Eichenberger, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bryan Cutler, candy.dc, Cao Zongyan, Captain-Pool, Casper Da Costa-Luis, Chen Guoyin, Cheng Chang, chengchingwen, Chong Yan, Choong Yin Thong, Christopher Yeh, Clayne Robison, Coady, Patrick, Dan Ganea, David Norman, Denis Khalikov, Deven Desai, Diego Caballero, Duncan Dean, Duncan Riach, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Fangjun Kuang, Fei Hu, fo40225, formath, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, George Grzegorz Pawelczak, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, haison, Haraldur T\u00f3Mas Hallgr\u00edMsson, HarikrishnanBalagopal, H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, Jeroen B\u00e9Dorf, Jerry Shih, jerryyin, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Joon, Josh Beal, Julian Niedermeier, Jun Wan, Junqin Zhang, Junyuan Xie, Justin Tunis, Kaixi Hou, Karl Lessard, Karthik Muthuraman, Kbhute-Ibm, khanhlvg, Koock Yoon, kstuedem, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Leslie-Fang-Intel, Li, Guizi, Lukas Folle, Lukas Geiger, Mahmoud Abuzaina, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Matthew Bentham, Matthew Denton, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, minds, mpppk, musikisomorphie, Nagy Mostafa, Nayana Thorat, Neil, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, ocjosen, olramde, Pariksheet Pinjari, Patrick J. Lopresti, Patrik Gustavsson, per1234, PeterLee, Phan Van Nguyen Duc, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, richardbrks, robert, RonLek, Ryan Jiang, saishruthi, Saket Khandelwal, Saleem Abdulrasool, Sami Kama, Sana-Damani, Sergii Khomenko, Severen Redwood, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, Srini511, srinivasan.narayanamoorthy, Sumesh Udayakumaran, Sungmann Cho, Tae-Hwan Jung, Taehoon Lee, Takeshi Watanabe, TengLu, terryky, TheMindVirus, ThisIsIsaac, Till Hoffmann, Timothy Liu, Tomer Gafner, Tongxuan Liu, Trent Lo, Trevor Morris, Uday Bondhugula, Vasileios Lioutas, vbvg2008, Vishnuvardhan Janapati, Vivek Suryamurthy, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xinan Jiang, Xinping Wang, Yann-Yy, Yasir Modak, Yong Tang, Yongfeng Gu, Yuchen Ying, Yuxin Wu, zyeric, \u738b\u632f\u534e (Zhenhua Wang)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19501173", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/19501173/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/19501173/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-rc0", "id": 19501173, "node_id": "MDc6UmVsZWFzZTE5NTAxMTcz", "tag_name": "v2.0.0-rc0", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-rc0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-08-22T17:40:23Z", "published_at": "2019-08-23T19:01:47Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-rc0", "body": "# Release 2.0.0-rc0\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution.\r\n* Robust model deployment in production on any platform.\r\n* Powerful experimentation for research.\r\n* API simplification by reducing duplication and removing deprecated endpoints.\r\n\r\nFor details on best practices with 2.0, see [the Effective 2.0 guide](https://www.tensorflow.org/beta/guide/effective_tf2)\r\n\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://www.tensorflow.org/beta/guide/migration_guide) guides. We have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta).\r\n\r\n## Highlights\r\n\r\n* TF 2.0 delivers Keras as the central high level API used to build and train models. Keras provides several model-building APIs such as Sequential, Functional, and Subclassing along with eager execution, for immediate iteration and intuitive debugging, and tf.data, for building scalable input pipelines. Checkout [guide](https://www.tensorflow.org/beta/guide/keras/overview) for additional details.\r\n* Distribution Strategy: TF 2.0 users will be able to use the [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding great out-of-the-box performance. It supports distributed training with Keras model.fit, as well as with custom training loops. Multi-GPU support is available, along with experimental support for multi worker and Cloud TPUs. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) for more details.\r\n* Functions, not Sessions. The traditional declarative programming model of building a graph and executing it via a `tf.Session` is discouraged, and replaced with by writing regular Python functions. Using the `tf.function` decorator, such functions can be turned into graphs which can be executed remotely, serialized, and optimized for performance.\r\n* Unification of tf.train.Optimizers and tf.keras.Optimizers. Use tf.keras.Optimizers for TF2.0. `compute_gradients` is removed as public API, and use GradientTape to compute gradients.\r\n* AutoGraph translates Python control flow into TensorFlow expressions, allowing users to write regular Python inside `tf.function`-decorated functions. AutoGraph is also applied in functions used with tf.data, tf.distribute and tf.keras APIs. \r\n* Unification of exchange formats to SavedModel. All TensorFlow ecosystem projects (TensorFlow Lite, TensorFlow JS, TensorFlow Serving, TensorFlow Hub) accept SavedModels. Model state should be saved to and restored from SavedModels.\r\n* API Changes: Many API symbols have been renamed or removed, and argument names have changed. Many of these changes are motivated by consistency and clarity. The 1.x API remains available in the compat.v1 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0). \r\n * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r\n* No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r\n\r\n## Breaking Changes\r\n* Many backwards incompatible API changes have been made to clean up the APIs and make them more consistent.\r\n* `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to an ecosystem project such as [tensorflow/addons](https://www.github.com/tensorflow/addons) or [tensorflow/io](https://www.github.com/tensorflow/io), or removed entirely.\r\n* Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the Keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r\n* The equality operation on Tensors & Variables now compares on value instead of `id()`. As a result, both Tensors & Variables are no longer hashable types.\r\n* Layers now default to float32, and automatically cast their inputs to the layer's dtype. If you had a model that used float64, it will probably silently use float32 in TensorFlow 2, and a warning will be issued that starts with \"Layer <layer-name> is casting an input tensor from dtype float64 to the layer's dtype of float32\". To fix, either set the default dtype to float64 with `tf.keras.backend.set_floatx('float64')`, or pass `dtype='float64'` to each of the Layer constructors. See `tf.keras.layers.Layer` for more information.\r\n\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r\n\r\nIf you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.data`:\r\n  * Add support for TensorArrays to `tf.data Dataset`.\r\n  * Integrate Ragged Tensors with `tf.data`.\r\n  * All core and experimental tf.data transformations that input user-defined functions can span multiple devices now.\r\n  * Extending the TF 2.0 support for `shuffle(..., reshuffle_each_iteration=True)` and `cache()` to work across different Python iterators for the same dataset.\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Add `num_parallel_reads` and passing in a Dataset containing filenames into `TextLineDataset` and `FixedLengthRecordDataset`.\r\n  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r\n  * Promoting `tf.data.experimental.unbatch` to core as `tf.data.Dataset.unbatch`.\r\n  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `tf.data.Options().experimental_slack = True`\r\n  * Added experimental support for parallel batching to `batch()` and `padded_batch()`. This functionality can be enabled through tf.data.Options()\r\n  * Support cancellation of long-running `reduce`.\r\n  * Now we use `dataset` node name as prefix instead of the op name, to identify the component correctly in metrics, for pipelines with repeated components.\r\n\r\n* `tf.distribute`:\r\n  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r\n  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n  * Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a `tf.distribute.Strategy`.\r\n  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r\n\r\n* `tf.estimator`:\r\n  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace contrib references with tf.estimator.experimental.* for apis in early_s in Estimator\r\n  * Canned Estimators will now use keras optimizers by default. An error will be raised if tf.train.Optimizers are used, and you will have to switch to tf.keras.optimizers or tf.compat.v1 canned Estimators.\r\n  * A checkpoint converter for canned Estimators has been provided to transition canned Estimators that are warm started from tf.train.Optimizers to tf.keras.optimizers.\r\n  * Default aggregation for canned Estimators is now SUM_OVER_BATCH_SIZE. To maintain previous default behavior, please pass SUM as the loss aggregation method.\r\n  * Canned Estimators don\u2019t support `input_layer_partitioner` arg in the API. If you have this arg, you will have to switch to tf.compat.v1 canned Estimators.\r\n  * Estimator.export_savedmodel has been renamed export_saved_model\r\n  * When saving to SavedModel, Estimators will strip default op attributes. This is almost always the correct behavior, as it is more forwards compatible, but if you require that default attributes are saved with the model, please use tf.compat.v1.Estimator\r\n  * Feature Columns have been upgraded to be more Eager-friendly and to work with Keras. As a result, tf.feature_column.input_layer has been deprecated in favor of tf.keras.layers.DenseFeatures. v1 feature columns have direct analogues in v2 except for shared_embedding_columns, which are not cross-compatible with v1 and v2. Use tf.feature_column.shared_embeddings instead.\r\n  * Losses are scaled in canned estimator v2 and not in the optimizers anymore. If you are using Estimator + distribution strategy + optimikzer v1 then the behavior does not change. This implies that if you are using custom estimator with optimizer v2, you have to scale losses. We have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n\r\n* `tf.keras`:\r\n  * Premade models (including Linear and WideDeep) have been introduced for the purpose of replacing Premade estimators.\r\n  * Model saving changes\r\n  * `model.save` and `tf.saved_model.save` may now save to the TensorFlow SavedModel format. The model can be restored using `tf.keras.models.load_model`. HDF5 files are still supported, and may be used by specifying `save_format=\"h5\"` when saving.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel. HDF5 files are still supported.\r\n  * Deprecated `tf.keras.experimental.export_saved_model` and `tf.keras.experimental.function`. Please use `tf.keras.models.save_model(..., save_format='tf')` and tf.keras.models.load_model` instead.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Add support for passing list of lists to the `metrics` argument in Keras `compile. \r\n  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation for RNN cells in TF v2. User can use it to implement RNN cells with custom behavior.\r\n  * Keras training and validation curves are shown on the same plot when using the TensorBoard callback.\r\n  * Switched Keras `fit/evaluate/predict` execution to use only a single unified path by default unless eager execution has been explicitly disabled, regardless of input type. This unified path places an eager-friendly training step inside of a `tf.function`. With this 1. All input types are converted to `Dataset`. 2. The path assumes there is always a distribution strategy. when distribution strategy is not specified the path uses a no-op distribution strategy. 3. The training step is wrapped in tf.function unless `run_eagerly=True` is set in compile. The single path execution code does not yet support all use cases. We fallback to the existing v1 execution paths if your model contains the following: 1. sample_weight_mode in compile 2. weighted_metrics in compile 3. v1 optimizer 4. target tensors in compile. If you are experiencing any issues because of this change, please inform us (file an issue) about your use case and you can unblock yourself by setting `experimental_run_tf_function=False` in compile meanwhile. We have seen couple of use cases where the model usage pattern is not as expected and would not work with this change. 1. output tensors of one layer is used in the constructor of another. 2. symbolic tensors outside the scope of the model are used in custom loss functions. The flag can be disabled for these cases and ideally the usage pattern will need to be fixed.\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r\n  * Mark Keras `set_session` as `compat.v1` only.\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * `keras.backend.resize_images` (and consequently, `keras.layers.Upsampling2D`) behavior has changed, a bug in the resizing implementation was fixed.\r\n  * Add an `implementation=3` mode for `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D` layers using `tf.SparseTensor` to store weights,  allowing a dramatic speedup for large sparse models.\r\n  * Raise error if `batch_size` argument is used when input is dataset/generator/keras sequence.\r\n  * Update TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r\n  * Add v2 module aliases for losses, metrics, initializers and optimizers: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics` &  `tf.initializers = tf.keras.initializers` & `tf.optimizers = tf.keras.optimizers`.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Added public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Add support for temporal sample weight mode in subclassed models.\r\n  * Raise ValueError if an integer is passed to the training APIs. \r\n  * Added fault-tolerance support for training Keras model via `model.fit()` with `MultiWorkerMirroredStrategy`, tutorial available.\r\n  * Callbacks are supported in `MultiWorkerMirroredStrategy`.\r\n  * Custom Callback tutorial is now available.\r\n  * To train with `tf.distribute`, Keras api is recommended over estimator.\r\n  * `steps_per_epoch` and `steps` arguments are supported with numpy arrays.\r\n  * New error message when unexpected keys are used in sample_weight/class_weight dictionaries \r\n  * Losses are scaled in Keras compile/fit and not in the optimizers anymore. If you are using custom training loop, we have new utilities to help scale losses `tf.nn.compute_average_loss`, `tf.nn.scale_regularization_loss`.\r\n  * `Layer` apply and add_variable APIs are deprecated.\r\n  * Added support for channels first data format in cross entropy losses with logits and support for tensors with unknown ranks.\r\n  * Error messages will be raised if `add_update`, `add_metric`, `add_loss`, activity regularizers are used inside of a control flow branch.\r\n  * New loss reduction types: 1. `AUTO`: Indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When    used with `tf.distribute.Strategy`, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be `SUM` or `NONE`. Using `AUTO` in that case will raise an error. 2. `NONE`: Weighted losses with one dimension reduced (axis=-1, or axis specified by loss function). When this reduction type used with built-in Keras training loops like `fit`/`evaluate`, the unreduced vector loss is passed to the optimizer but the reported loss will be a scalar value. 3. `SUM`: Scalar sum of weighted losses. 4. `SUM_OVER_BATCH_SIZE`: Scalar `SUM` divided by number of elements in losses. This reduction type is not supported when used with `tf.distribute.Strategy` outside of built-in training loops like `tf.keras` `compile`/`fit`.\r\n\r\n* `tf.lite`:\r\n  * Added support for TFLiteConverter Python API in 2.0. Contains functions from_saved_model, from_keras_file, and from_concrete_functions.\r\n  * Removed `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\r\n  * Added support for `tflite_convert` command line tool in 2.0.\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Post-training quantization tool supports fp16 weights and GPU delegate acceleration for fp16.\r\n\r\n* `tf.contrib`:\r\n  * Expose `tf.contrib.proto.*` ops in `tf.io` (they will exist in TF2)\r\n  * Remove `tf.contrib.timeseries` dependency on TF distributions.\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in early_stopping.py\r\n\r\n* Other:\r\n  * Bug fix for `tf.tile gradient`.\r\n  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r\n  * Added gradient for `SparseToDense` op.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r\n  * removed `tf.string_split` from v2 API\r\n  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_solve`.\r\n  * Delete unused lookup table code\r\n  * Remove unused `StringViewVariantWrapper`.\r\n  * Delete unused `Fingerprint64Map` op registration\r\n  * Add broadcasting support to `tf.matmul`.\r\n  * Add ellipsis (...) support for `tf.einsum()`.\r\n  * ResourceVariable support for `gather_nd`.\r\n  * Add expand_composites argument to all nest.* methods.\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Add a new \"result_type\" parameter to `tf.strings.split`\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Added `tf.random.binomial`.\r\n  * Extend `tf.function` with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r\n  * Add name argument to `tf.string_split` and `tf.strings_split`.\r\n  * Added `strings.byte_split`.\r\n  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n  * Add `RaggedTensor.placeholder()`.\r\n  * Add pfor converter for `Squeeze`.\r\n  * Renamed `tf.image` functions to remove duplicate \"image\" where it is redundant.\r\n  * Add C++ Gradient for BatchMatMulV2.\r\n  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r\n  * `parallel_for`: add converters for LowerTriangularSolve and Cholesky.\r\n  * Add ragged tensor support to `tf.squeeze`.\r\n  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r\n  * Allow all dtypes for `LinearOperatorCirculant`.\r\n  * Introduce MaxParallelism method\r\n  * `parallel_for`: add converter for `BroadcastTo`.\r\n  * Add `LinearOperatorHouseholder`.\r\n  * Added `key` and `skip` methods to `random.experimental.Generator`.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n  * Update RaggedTensors to support int32 row_splits.\r\n  * Add `TensorSpec` support for CompositeTensors.\r\n  * Added partial_pivoting input parameter to `tf.linalg.tridiagonal_solve`.\r\n  * Extend `tf.strings.split` to support inputs with any rank\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Improve the performance of datasets using `from_tensors()`.\r\n  * Add `tf.linalg.tridiagonal_mul op`.\r\n  * Add `LinearOperatorToeplitz`.\r\n  * Added gradient to `tf.linalg.tridiagonal_solve`.\r\n  * Upgraded LIBXSMM to version 1.11.\r\n  * `parallel_for`: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r\n  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r\n  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r\n  * `parallel_for`: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r\n  * Add gradient to `tf.linalg.tridiagonal_matmul`.\r\n  * Add `tf.ragged.boolean_mask`.\r\n  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r\n  * The C++ kernel of gather op supports batch dimensions.\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r\n  * Adds `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()`.\r\n  * EagerTensor now supports buffer interface for tensors.\r\n  * This change bumps the version number of the FullyConnected Op to 5.\r\n  * tensorflow : crash when pointer become nullptr.\r\n  * `parallel_for`: Add converter for `MatrixDiag`.\r\n  * Add 'narrow_range' attribute to QuantizeAndDequantizeV2 and V3.\r\n  * Added new op: `tf.strings.unsorted_segment_join`.\r\n  * Tensorflow code now produces 2 different pip packages: tensorflow_core containing all the code (in the future it will contain only the private implementation) and tensorflow which is a virtual pip package doing forwarding to tensorflow_core (and in the future will contain only the public API of tensorflow)\r\n  * Adding support for datasets as inputs to `from_tensors` and `from_tensor_slices` and batching and unbatching of nested datasets.\r\n  * Add HW acceleration support for topK_v2\r\n  * Add new TypeSpec classes\r\n  * CloudBigtable version updated to v0.10.0 BEGIN_PUBLIC CloudBigtable version updated to v0.10.0\r\n  * Deprecated the use of `constraint=` and `.constraint` with ResourceVariable.\r\n  * Expose Head as public API.\r\n   * Update docstring for gather to properly describe the non-empty batch_dims case.\r\n  * Added `tf.sparse.from_dense` utility function.\r\n  * Add `GATHER` support to NN API delegate\r\n  * Improved ragged tensor support in `TensorFlowTestCase`.\r\n  * Makes the a-normal form transformation in Pyct configurable as to which nodes are converted to variables and which are not.\r\n  * `ResizeInputTensor` now works for all delegates\r\n  * Start of open development of TF, TFLite, XLA MLIR dialects.\r\n  * Add `EXPAND_DIMS` support to NN API delegate TEST:  expand_dims_test\r\n  * `tf.cond` emits a StatelessIf op if the branch functions are stateless and do not touch any resources.\r\n  * Add support of local soft device placement for eager op.\r\n  * Pass partial_pivoting to the `_TridiagonalSolveGrad`.\r\n  * Add HW acceleration support for LogSoftMax\r\n  * Added a function nested_value_rowids for ragged tensors.\r\n  * fixed a bug in histogram_op.cc.\r\n  * Add guard to avoid acceleration of L2 Normalization with input rank != 4\r\n  * Added evaluation script for COCO minival\r\n  * Add delegate support for `QUANTIZE`\r\n  * add `tf.math.cumulative_logsumexp` operation.\r\n  * Add `tf.ragged.stack`.\r\n  * Add delegate support for `QUANTIZED_16BIT_LSTM`.\r\n  * `tf.while_loop` emits a StatelessWhile op if the cond and body functions are stateless and do not touch any resources.\r\n  * Fix memory allocation problem when calling `AddNewInputConstantTensor`.\r\n  * Delegate application failure leaves interpreter in valid state\r\n  * tf.cond, tf.while and if and while in AutoGraph now accept a nonscalar predicate if has a single element. This does not affec non-V2 control flow.\r\n  * Enables v2 control flow as part of tf.enable_v2_behavior() and TF2_BEHAVIOR=1.\r\n  * Fix potential security vulnerability where decoding variant tensors from proto could result in heap out of bounds memory access.\r\n  * Extracts NNAPIDelegateKernel from nnapi_delegate.cc\r\n  * Only create a GCS directory object if the object does not already exist.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n  * Begin adding Go wrapper for C Eager API\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add batch_dims argument to tf.gather.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n  * Add `tf.math.nextafter` op.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * `tf.linspace(start, stop, num)` now always uses \"stop\" as last value (for num > 1)\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r\n  * Add CompositeTensor base class.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * Add templates and interfaces for creating lookup tables\r\n  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r\n  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n  * Add variant wrapper for absl::string_view\r\n  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n  * Add OpKernels for some stateless maps\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add v2 sparse categorical crossentropy metric. GITHUB_PR_OR_BUG=b/123431691\r\n  * DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r\n  * Expose CriticalSection in core as `tf.CriticalSection`.\r\n  * Enhanced graphviz output.\r\n  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r\n  * Add `tf.linalg.tridiagonal_solve` op.\r\n  * Add opkernel templates for common table operations.\r\n  * Fix issue: Callbacks do not log values in eager mode when a deferred build model is used.\r\n  * SignatureDef util functions have been deprecated.\r\n  * Update Fingerprint64Map to use aliases\r\n  * Add legacy string flat hash map op kernels\r\n  * Fix: `model.add_loss(symbolic_tensor)` should work in ambient eager.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager. GITHUB_PR_OR_BUG=b/123431691\r\n  * Add support for `add_metric` in the graph function mode. GITHUB_PR_OR_BUG=tf_only\r\n  * Updating cosine similarity loss - removed the negate sign from cosine similarity. GITHUB_PR_OR_BUG=b/123431691\r\n  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r\n  * Workaround for compiler bug(?)\r\n  * Changed default for gradient accumulation for TPU embeddings to true.\r\n  * Adds summary trace API for collecting graph and profile information.\r\n  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n \r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski,  jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua), \r\n\r\n4d55397500, a6802739, Abdullah Selek, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Alex Itkes, Alex Sergeev, Alexander Pivovarov, Alexey Romanov, alhkad, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, amoitra, Andreas Eberle, Andrew Lihonosov, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, Ayush Agrawal, Bas Aarts, Bastian Eichenberger, Bayberry Z, Ben Barsdell, Benjamin Peterson, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, Casper Da Costa-Luis, Chen Guoyin, chenchc, chengchingwen, chie8842, Christian Hansen, Christoph Boeddeker, Christopher Yeh, Clayne Robison, Coady, Patrick, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Denis Khalikov, Deven Desai, Diego Caballero, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Dwight J Lyle, Eamon Ito-Fisher, eashtian3, Edward Forgacs, EFanZh, ejot, Elroy Ashtian Jr, Eric Schweitz, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, fo40225, formath, Franc\u0327Ois Chollet, Fred Reiss, Frederic Bastien, Fredrik Knutsson, G. Hussain Chinoy, Gabriel, gehring, Geoffrey Irving, George Grzegorz Pawelczak, George Sterpu, Gianluca Varisco, Gleb Popov, Greg Peatfield, Guillaume Klein, Gurpreet Singh, Gustavo Lima Chaves, Gyoung-Yoon Ryoo, haison, Hanton Yang, Haraldur T\u00f3Mas Hallgr\u00edMsson, Huan Li (\u674e\u5353\u6853), H\u00e5Kon Sandsmark, I-Hong, Ilham Firdausi Putra, Imran Salam, Irene Dea, Ivan Habernal, Jacky, Jason Zaman, Jason Zavaglia, jayhpark530, jefby, Jeff Daily, Jeffrey Poznanovic, Jekyll Lai, jer, Jeroen B\u00e9Dorf, jerryyin, jhalakp, jiakai, JiangXIAO, Joe Bowser, Joel Shapiro, Johan Gunnarsson, Jojimon Varghese, Jonathan, Joon, Josh Beal, Julian Niedermeier, Junqin Zhang, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, Kbhute-Ibm, KDR, Keno Fischer, Kevin Mader, khanhlvg, Kilaru Yasaswi Sri Chandra Gandhi, Koock Yoon, Kyuwon Kim, Lakshay Tokas, leike666666, leonard951, Leslie-Fang, Letian Kang, Li, Guizi, Lukas Folle, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Manraj Singh Grover, Margaret Maynard-Reid, Mark Ryan, Matt Conley, mbhuiyan, mdfaijul, Mei Jie, merturl, MichaelKonobeev, Michal W. Tarnowski, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, minds, monklof, Moses Marin, mpppk, Mr. Metal, Mshr-H, musikisomorphie, nammbash, Nathan Luehr, Nayana Thorat, Neeraj Pradhan, Neil, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, Nuka-137, ocjosen, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Patrik Gustavsson, Pavel Akhtyamov, PENGWA, per1234, PeterLee, Phan Van Nguyen Duc, Philipp Jund, Phillip Kravtsov, Pooya Davoodi, Pranav Marathe, Putra Manggala, Qingqing Cao, R S Nikhil Krishna, Rajeshwar Reddy T, Ramon Vi\u00f1As, Rasmus Diederichsen, Reuben Morais, robert, Rohit Gupta, Roland Zimmermann, Roman Soldatow, RonLek, Ruizhe, Ryan Jiang, saishruthi, Saleem Abdulrasool, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Serv-Inc, Severen Redwood, Shashank Gupta, shashvat, Shashvat Chand Shahi, Shubham Goyal, Sigrid Keydana, Siju Samuel, sleighsoft, smilu97, Son Tran, sremedios, Srini511, srinivasan.narayanamoorthy, Subin Modeel, Sumesh Udayakumaran, Sungmann Cho, sunway513, sxwang, Tae-Hwan Jung, Taehoon Lee, Takeo Sawada, Taylor Jakobson, Ted Chang, TengLu, terryky, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Till Hoffmann, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, Uday Bondhugula, v1incent, Vasileios Lioutas, vbvg2008, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vivek Suryamurthy, wangsiyu, wateryzephyr, Wei Wang, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, winstonq, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Xinping Wang, Yann-Yy, Yasir Modak, Yasuhiro Matsumoto, Yong Tang, Yongfeng Gu, Yuan (Terry) Tang, Yuchen Ying, zhangyujing, zyeric, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\u946b\r\n\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18635353", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18635353/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/18635353/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.2", "id": 18635353, "node_id": "MDc6UmVsZWFzZTE4NjM1MzUz", "tag_name": "v1.13.2", "target_commitish": "r1.13", "name": "TensorFlow 1.13.2", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-07-15T18:15:22Z", "published_at": "2019-07-16T09:29:11Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.13.2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.13.2", "body": "# Release 1.13.2\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Updates `png_archive` dependency to 1.6.37 to not be affected by CVE-2019-7317, CVE-2018-13785, and CVE-2018-14048.\r\n* Updates `sqlite` dependency to 3.28.0 to not be affected by CVE-2018-20506, CVE-2018-20346, and CVE-2018-20505."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18155514", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18155514/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/18155514/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.3", "id": 18155514, "node_id": "MDc6UmVsZWFzZTE4MTU1NTE0", "tag_name": "v1.12.3", "target_commitish": "r1.12", "name": "TensorFlow 1.12.3", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-06-21T17:20:35Z", "published_at": "2019-06-21T23:36:21Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.3", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.3", "body": "# Release 1.12.3\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Updates `png_archive` dependency to 1.6.37 to not be affected by CVE-2019-7317, CVE-2018-13785, and CVE-2018-14048.\r\n* Updates `sqlite` depenency to 3.28.0 to not be affected by CVE-2018-20506, CVE-2018-20346, and CVE-2018-20505."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18081222", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/18081222/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/18081222/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0", "id": 18081222, "node_id": "MDc6UmVsZWFzZTE4MDgxMjIy", "tag_name": "v1.14.0", "target_commitish": "r1.14", "name": "TensorFlow 1.14.0", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-06-18T22:48:23Z", "published_at": "2019-06-19T04:45:10Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.14.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.14.0", "body": "# Release 1.14.0\r\n\r\n## Major Features and Improvements\r\n\r\n* This is the first 1.x release containing the compat.v2 module. This module is required to allow libraries to publish code which works in both 1.x and 2.x. After this release, no backwards incompatible changes are allowed in the 2.0 Python API.\r\n* Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n* Non-Windows system libraries are now versioned. This should be a no-op for most users as it affects only system package maintainers or those building extensions to TensorFlow:\r\n  * Python wheels (Pip packages) contain one library file.\r\n    * Linux: `libtensorflow_framework.so.1`\r\n    * MacOS: `libtensorflow_framework.1.dylib`\r\n  * Our `libtensorflow` tarball archives contain the `libtensorflow` library and two symlinks. MacOS `.dylib` libraries are the same, but match MacOS library naming requirements (i.e. `libtensorflow.1.dylib`):\r\n    * `libtensorflow.so.1.14.0`, the main library\r\n    * `libtensorflow.so.1`, symlinked to the main library\r\n    * `libtensorflow.so`, symlinked to `.so.1`\r\n\r\n## Behavioral changes\r\n\r\n* Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n* Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n* Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n* tf.linspace(start, stop, num) now always uses \"stop\" as last value (for num > 1)\r\n* The behavior of tf.gather is now correct when axis=None and batch_dims<0.\r\n* Only create a GCS directory object if the object does not already exist.\r\n* In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n* Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r\n* Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n* DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r\n* Changed default for gradient accumulation for TPU embeddings to true.\r\n* Callbacks now log values in eager mode when a deferred build model is used.\r\n* Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation\r\n* Deprecations and Symbol renames.\r\n  * The GPU configuration env parameter `TF_CUDA_HOST_MEM_LIMIT_IN_MB` has been changed to `TF_GPU_HOST_MEM_LIMIT_IN_MB`.\r\n  * Remove unused StringViewVariantWrapper\r\n  * Delete unused Fingerprint64Map op registration\r\n  * SignatureDef util functions have been deprecated.\r\n  * Renamed tf.image functions to remove duplicate \"image\" where it is redundant.\r\n  * tf.keras.experimental.export renamed to tf.keras.experimental.export_saved_model\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r\n* Keras & Python API\r\n  * Add v2 module aliases for:\r\n    * tf.initializers => tf.keras.initializers\r\n    * tf.losses => tf.keras.losses & tf.metrics => tf.keras.metrics\r\n    * tf.optimizers => tf.keras.optimizers\r\n  * Add tf.keras.layers.AbstractRNNCell as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r\n  * Add support for passing list of lists to the `metrics` param in Keras `compile`.\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Fix: model.add_loss(symbolic_tensor) should work in ambient eager.\r\n  * Add name argument to tf.string_split and tf.strings_split\r\n  * Minor change to SavedModels exported from Keras using tf.keras.experimental.export. (SignatureDef key for evaluation mode is now \"eval\" instead of \"test\"). This will be reverted back to \"test\" in the near future.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Keras training and validation curves are shown on the same plot.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n* New ops and improved op functionality\r\n  * Add OpKernels for some stateless maps\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r\n  * Add tf.math.nextafter op.\r\n  * Add CompositeTensor base class.\r\n  * Add tf.linalg.tridiagonal_solve op.\r\n  * Add opkernel templates for common table operations.\r\n  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r\n  * Added support for TFLite in TensorFlow 2.0.\r\n  * Adds summary trace API for collecting graph and profile information.\r\n  * Add batch_dims argument to tf.gather.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Add C++ Gradient for BatchMatMulV2.\r\n  * Added tf.random.binomial\r\n  * Added gradient for SparseToDense op.\r\n  * Add legacy string flat hash map op kernels\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Add broadcasting support to tf.matmul.\r\n  * Add ellipsis (...) support for tf.einsum()\r\n  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r\n  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r\n  * Added strings.byte_split\r\n  * Add RaggedTensor.placeholder()\r\n  * Add a new \"result_type\" parameter to tf.strings.split\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Add variant wrapper for absl::string_view\r\n  * Add expand_composites argument to all nest.* methods.\r\n  * Add pfor converter for Squeeze.\r\n  * Bug fix for tf.tile gradient\r\n  * Expose CriticalSection in core as tf.CriticalSection.\r\n  * Update Fingerprint64Map to use aliases\r\n  * ResourceVariable support for gather_nd.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * Variadic reduce is supported on CPU\r\n  * Extend tf.function with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r\n  * Add templates and interfaces for creating lookup tables\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * image.resize now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n* Performance\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * Support for multi-host ncclAllReduce in Distribution Strategy.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n* TensorFlow 2.0 Development\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r\n  * Begin adding Go wrapper for C Eager API\r\n  * image.resize in 2.0 now supports gradients for the new resize kernels.\r\n  * removed tf.string_split from v2 API\r\n  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r\n  * \"Updates the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions.\"\r\n  * Enable tf.distribute.experimental.MultiWorkerMirroredStrategy working in eager mode.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n* TensorFlow Lite\r\n  * \"Adds support for tflite_convert in 2.0.\"\r\n  * \"Remove lite.OpHint, lite.experimental, and lite.constant from 2.0 API.\"\r\n* tf.contrib\r\n  * Added Neural Turing Implementation as described in https://arxiv.org/abs/1807.08518.\r\n  * Remove tf.contrib.timeseries dependency on TF distributions.\r\n* tf.data\r\n  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r\n  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, _BigtableXYZDataset (of type DatasetV2) does not implement the _as_variant_tensor() of DatasetV1, when moving contrib.bigtable to tensorflow_io. Converting into DatasetV2 removes the overheads to maintain V1 while we are moving into TF 2.0.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add support for TensorArrays to tf.data Dataset.\r\n  * Switching tf.data functions to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r\n* Toolchains\r\n  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r\n* XLA\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n* Estimator\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace `contrib` references with `tf.estimator.experimental.*` for APIs in `early_stopping.py`\r\n  * Determining the \u201ccorrect\u201d value of the `--iterations_per_loop` for TPUEstimator or DistributionStrategy continues to be a challenge for our users. We propose dynamically tuning the `--iterations_per_loop` variable, specifically for using TPUEstimator in training mode, based on a user target TPU execution time. Users might specify a value such as: `--iterations_per_loop=300s`, which will result in roughly 300 seconds being spent on the TPU between host side operations.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, 4d55397500, a6802739, abenmao, Adam Richter, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Andy Craze, Anthony Hsu, Anthony Platanios, Anuj Rawat, Armen Poghosov, armenpoghosov, arp95, Arpit Shah, Ashwin Ramaswami, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, awesomealex1, Ayush Agrawal, Bayberry Z, Ben Barsdell, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Brandon Carter, candy.dc, Cheng Chang, Chao Liu, chenchc, chie8842, Christian Hansen, Christian Sigg,  Christoph Boeddeker, Clayne Robison, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Rasmussen, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, Dayananda-V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Evgeniy Polyakov, Fangjun Kuang, Federico Martinez, Fei Hu, Felix Lemke, Filip Matzner, fo40225, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Grzegorz George Pawelczak, Grzegorz Pawelczak, Gurpreet Singh, Gyoung-Yoon Ryoo, HanGuo97, Hanton Yang, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), I-Hong Jhuo, Ilango R, Innovimax, Irene Dea, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeffrey Poznanovic, Jens Elofsson, Jeroen B\u00e9Dorf, jhalakp, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Joeran Beel, Jonas Rauber, Jonathan, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K Yasaswi Sri Chandra Gandhi, K. Hodges, Kaixi Hou, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, KDR, Keno Fischer, Kevin Mader, Kilaru Yasaswi Sri Chandra Gandhi, kjopek, Koan-Sin Tan, kouml, ktaebum, Lakshay Tokas, Laurent Le Brun, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, manhyuk, Marco Gaido, Marek Drozdowski, Mark Collier, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mihail Salnikov, Mikalai Drabovich, Mike Arpaia, Mike Holcomb, monklof, Moses Marin, Mr. Metal, Mshr-H, nammbash, Natalia Gimelshein, Nathan Luehr, Nayana-Ibm, neargye, Neeraj Pradhan, Nehal J Wani, Nick, Nick Lewycky, Niels Ole Salscheider, Niranjan Hasabnis, nlewycky, Nuka-137, Nutti, olicht, omeir1, P Sudeepam, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Pavel Akhtyamov, Pavel Samolysov, PENGWA, Philipp Jund, Pooya Davoodi, Pranav Marathe, R S Nikhil Krishna, Rohit Gupta, Roland Zimmermann, Roman Soldatow, rthadur, Ruizhe, Ryan Jiang, saishruthi, Samantha Andow, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Sergii Khomenko, Serv-Inc, Shahzad Lone, Shashank Gupta, Shashi, shashvat, Shashvat Chand Shahi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, sremedios, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Subin, Sumesh Udayakumaran, sunway513, Supriya Rao, sxwang, Takeo Sawada, Taylor Jakobson, Taylor Thornton, Ted Chang, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Tim Zaman, tomguluson92, Tongxuan Liu, Trent Lo, TungJerry, Tyorden, v1incent, Vagif, vcarpani, Vijay Ravichandran, Vikram Tiwari, Viktor Gal, Vincent, Vishnuvardhan Janapati, Vishwak Srinivasan, Vitor-Alves, wangsiyu, wateryzephyr, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Yasuhiro Matsumoto, ymodak, Yong Tang, Younes Khoudli, Yuan (Terry) Tang, Yuan Lin, Yves-Noel Weweler, Zantares, zhuoryin, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17990750", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17990750/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/17990750/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta1", "id": 17990750, "node_id": "MDc6UmVsZWFzZTE3OTkwNzUw", "tag_name": "v2.0.0-beta1", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-beta1", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-06-13T17:41:13Z", "published_at": "2019-06-14T07:16:31Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-beta1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-beta1", "body": "# Release 2.0.0-beta1\r\n\r\nTensorflow 2.0.0-beta1 is a minor update to 2.0.0-beta0 with a few important bug\r\nfixes. Please refer to [2.0.0-beta0 release notes](https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta0) for a complete list of changes in 2.0.0-beta0.\r\n\r\n## Bug Fixes and Other Changes\r\n* Partially fix the function inlining and performance regression for LSTM/GRU.\r\n* Replace training tensor argument with python boolean. Required for TFLite, which does not yet support control flow ops.\r\n* Allow SavedModel serialization to accept `None` InputSpec values.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17865742", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17865742/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/17865742/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0-rc1", "id": 17865742, "node_id": "MDc6UmVsZWFzZTE3ODY1NzQy", "tag_name": "v1.14.0-rc1", "target_commitish": "r1.14", "name": "TensorFlow 1.14.0-rc1", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-06-08T02:23:20Z", "published_at": "2019-06-08T05:25:41Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.14.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.14.0-rc1", "body": "# Release 1.14.0\r\n\r\n## Major Features and Improvements\r\n\r\n* This is the first 1.x release containing the compat.v2 module. This module is required to allow libraries to publish code which works in both 1.x and 2.x. After this release, no backwards incompatible changes are allowed in the 2.0 Python API.\r\n* Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n* Non-Windows system libraries are now versioned. This should be a no-op for most users as it affects only system package maintainers or those building extensions to TensorFlow:\r\n * Python wheels (Pip packages) contain one library file.\r\n   * Linux: `libtensorflow_framework.so.1`\r\n   * MacOS: `libtensorflow_framework.1.dylib`\r\n * Our `libtensorflow` tarball archives contain the `libtensorflow` library and two symlinks. MacOS `.dylib` libraries are the same, but match MacOS library naming requirements (i.e. `libtensorflow.1.dylib`):\r\n   * `libtensorflow.so.1.14.0`, the main library\r\n   * `libtensorflow.so.1`, symlinked to the main library\r\n   * `libtensorflow.so`, symlinked to `.so.1`\r\n\r\n## Behavioral changes\r\n\r\n* Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n* Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n* Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n* tf.linspace(start, stop, num) now always uses \"stop\" as last value (for num > 1)\r\n* The behavior of tf.gather is now correct when axis=None and batch_dims<0.\r\n* Only create a GCS directory object if the object does not already exist.\r\n* In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n* Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r\n* Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n* DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r\n* Changed default for gradient accumulation for TPU embeddings to true.\r\n* Callbacks now log values in eager mode when a deferred build model is used.\r\n* Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation\r\n* Deprecations and Symbol renames.\r\n  * Remove unused StringViewVariantWrapper\r\n  * Delete unused Fingerprint64Map op registration\r\n  * SignatureDef util functions have been deprecated.\r\n  * Renamed tf.image functions to remove duplicate \"image\" where it is redundant.\r\n  * tf.keras.experimental.export renamed to tf.keras.experimental.export_saved_model\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r\n* Keras & Python API\r\n  * Add v2 module aliases for:\r\n    * tf.initializers => tf.keras.initializers\r\n    * tf.losses => tf.keras.losses & tf.metrics => tf.keras.metrics\r\n    * tf.optimizers => tf.keras.optimizers\r\n  * Add tf.keras.layers.AbstractRNNCell as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r\n  * Add support for passing list of lists to the `metrics` param in Keras `compile`.\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Fix: model.add_loss(symbolic_tensor) should work in ambient eager.\r\n  * Add name argument to tf.string_split and tf.strings_split\r\n  * Minor change to SavedModels exported from Keras using tf.keras.experimental.export. (SignatureDef key for evaluation mode is now \"eval\" instead of \"test\"). This will be reverted back to \"test\" in the near future.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Keras training and validation curves are shown on the same plot.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n* New ops and improved op functionality\r\n  * Add OpKernels for some stateless maps\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r\n  * Add tf.math.nextafter op.\r\n  * Add CompositeTensor base class.\r\n  * Add tf.linalg.tridiagonal_solve op.\r\n  * Add opkernel templates for common table operations.\r\n  * Added support for TFLite in TensorFlow 2.0.\r\n  * Adds summary trace API for collecting graph and profile information.\r\n  * Add batch_dims argument to tf.gather.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Add C++ Gradient for BatchMatMulV2.\r\n  * Added tf.random.binomial\r\n  * Added gradient for SparseToDense op.\r\n  * Add legacy string flat hash map op kernels\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Add broadcasting support to tf.matmul.\r\n  * Add ellipsis (...) support for tf.einsum()\r\n  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r\n  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r\n  * Added strings.byte_split\r\n  * Add RaggedTensor.placeholder()\r\n  * Add a new \"result_type\" parameter to tf.strings.split\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Add variant wrapper for absl::string_view\r\n  * Add expand_composites argument to all nest.* methods.\r\n  * Add pfor converter for Squeeze.\r\n  * Bug fix for tf.tile gradient\r\n  * Expose CriticalSection in core as tf.CriticalSection.\r\n  * Update Fingerprint64Map to use aliases\r\n  * ResourceVariable support for gather_nd.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * Variadic reduce is supported on CPU\r\n  * Extend tf.function with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r\n  * Add templates and interfaces for creating lookup tables\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * image.resize now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n* Performance\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * Support for multi-host ncclAllReduce in Distribution Strategy.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n* TensorFlow 2.0 Development\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r\n  * Begin adding Go wrapper for C Eager API\r\n  * image.resize in 2.0 now supports gradients for the new resize kernels.\r\n  * removed tf.string_split from v2 API\r\n  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r\n  * \"Updates the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions.\"\r\n  * Enable tf.distribute.experimental.MultiWorkerMirroredStrategy working in eager mode.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n* TensorFlow Lite\r\n  * \"Adds support for tflite_convert in 2.0.\"\r\n  * \"Remove lite.OpHint, lite.experimental, and lite.constant from 2.0 API.\"\r\n* tf.contrib\r\n  * Added Neural Turing Implementation as described in https://arxiv.org/abs/1807.08518.\r\n  * Remove tf.contrib.timeseries dependency on TF distributions.\r\n* tf.data\r\n  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r\n  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, _BigtableXYZDataset (of type DatasetV2) does not implement the _as_variant_tensor() of DatasetV1, when moving contrib.bigtable to tensorflow_io. Converting into DatasetV2 removes the overheads to maintain V1 while we are moving into TF 2.0.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add support for TensorArrays to tf.data Dataset.\r\n  * Switching tf.data functions to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r\n* Toolchains\r\n  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r\n* XLA\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n* Estimator\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs`\r\n  * Replace `contrib` references with `tf.estimator.experimental.*` for APIs in `early_stopping.py`\r\n  * Determining the \u201ccorrect\u201d value of the `--iterations_per_loop` for TPUEstimator or DistributionStrategy continues to be a challenge for our users. We propose dynamically tuning the `--iterations_per_loop` variable, specifically for using TPUEstimator in training mode, based on a user target TPU execution time. Users might specify a value such as: `--iterations_per_loop=300s`, which will result in roughly 300 seconds being spent on the TPU between host side operations.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, 4d55397500, a6802739, abenmao, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Andy Craze, Anthony Platanios, Armen Poghosov, armenpoghosov, arp95, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Ayush Agrawal, Ben Barsdell, Bharat Raghunathan, Bhavani Subramanian, blairhan, Bl\u00e9Nesi Attila, Brandon Carter, candy.dc, Chao Liu, chenchc, chie8842, Christian Hansen, Christian Sigg, Clayne Robison, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, Dayananda-V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Geoffrey Irving, Grzegorz George Pawelczak, Grzegorz Pawelczak, Gyoung-Yoon Ryoo, HanGuo97, Hanton Yang, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Irene Dea, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeffrey Poznanovic, Jens Elofsson, Jeroen B\u00e9Dorf, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Joeran Beel, Jonas Rauber, Jonathan, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K Yasaswi Sri Chandra Gandhi, K. Hodges, Kaixi Hou, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, KDR, Keno Fischer, Kevin Mader, kjopek, Koan-Sin Tan, kouml, ktaebum, Lakshay Tokas, Laurent Le Brun, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, luxupu, Ma, Guokai, Mahmoud Abuzaina, Mandar Deshpande, manhyuk, Marco Gaido, Marek Drozdowski, Mark Collier, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mihail Salnikov, Mike Arpaia, Mike Holcomb, monklof, Moses Marin, Mshr-H, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Neeraj Pradhan, Nehal J Wani, Nick, Niels Ole Salscheider, Niranjan Hasabnis, nlewycky, Nuka-137, Nutti, olicht, P Sudeepam, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pavel Samolysov, PENGWA, Pooya Davoodi, R S Nikhil Krishna, Rohit Gupta, Roman Soldatow, rthadur, Ruizhe, Ryan Jiang, Samantha Andow, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, seanshpark, Sebastien Iooss, Serv-Inc, Shahzad Lone, Shashank Gupta, Shashi, shashvat, shashvatshahi1998, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, sremedios, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Sumesh Udayakumaran, Supriya Rao, Taylor Jakobson, Taylor Thornton, Ted Chang, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Tim Zaman, tomguluson92, Tongxuan Liu, TungJerry, v1incent, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, wateryzephyr, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xin, Xinan Jiang, Yasuhiro Matsumoto, ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, Zantares, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17852985", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17852985/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/17852985/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-beta0", "id": 17852985, "node_id": "MDc6UmVsZWFzZTE3ODUyOTg1", "tag_name": "v2.0.0-beta0", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-beta0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-06-07T07:00:18Z", "published_at": "2019-06-07T15:03:27Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-beta0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-beta0", "body": "# Release 2.0.0-beta0\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution\r\n* Robust model deployment in production on any platform\r\n* Powerful experimentation for research\r\n* API simplification by reducing duplication and removing deprecated endpoints\r\n\r\nThe feature improvements, fixes noted here are post TF 2.0 Alpha release. Please refer to [Alpha release notes](https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-alpha0) in case you missed it.\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/migration_guide.ipynb) guides.\r\nWe have also released a collection of [tutorials and getting started guides](https://www.tensorflow.org/beta), and an [Effective Style Guide for TF 2.0](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/effective_tf2.md)\r\nFor more information on these community-driven changes, be sure to check out the [RFCs](https://github.com/tensorflow/community/tree/master/rfcs) we have on Github. If you care about details, all of the RFCs are important.\r\n\r\n## Highlights\r\n\r\n* Distribution Strategy: TF 2.0 users will be able to use the new [`tf.distribute.Strategy`](https://www.tensorflow.org/beta/guide/distribute_strategy) API to distribute training with minimal code changes, yielding good out-of-the-box performance. We have more strategies supported in the beta release, as well as improved support for custom training loops and Keras subclassed models. Check out the [guide](https://www.tensorflow.org/beta/guide/distribute_strategy) to see what\u2019s supported now.\r\n* API Freeze: Symbol renaming/deprecation and 2.0 API changes are complete. 2.0 API is final and is also available as part of the [TensorFlow 1.14 release](https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0-rc0) in compat.v2 module. A list of all symbol changes can be found [here](https://docs.google.com/spreadsheets/d/1FLFJLzg7WNP6JHODX5q8BDgptKafq_slHpnHVbJIteQ/edit#gid=0)\r\n\r\n## Breaking Changes\r\n\r\n* `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to [tensorflow/addons](https://www.github.com/tensorflow/addons), or removed entirely.\r\n* Premade estimators in the tf.estimator.DNN/Linear/DNNLinearCombined family have been updated to use `tf.keras.optimizers` instead of the `tf.compat.v1.train.Optimizer`s. If you do not pass in an `optimizer=` arg or if you use a string, the premade estimator will use the keras optimizer. This is checkpoint breaking, as the optimizers have separate variables. A checkpoint converter tool for converting optimizers is included with the release,  but if you want to avoid any change, switch to the v1 version of the estimator:  `tf.compat.v1.estimator.DNN/Linear/DNNLinearCombined*`.\r\n\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r\n\r\nIf you experience any snags when using TF 2.0, please let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.data`:\r\n  * Adds option for introducing slack in the pipeline to reduce CPU contention, via `options =    `tf.data.Options()`; `options.experimental_slack = True; dataset = dataset.with_options(options)`\r\n  * Removing the `experimental_numa_aware` option from `tf.data.Options`.\r\n  * Add support for TensorArrays to `tf.data Dataset`.\r\n* `tf.keras`:\r\n  * Saving a Keras Model using `tf.saved_model.save` now saves the list of variables, trainable variables, regularization losses, and the call function.\r\n  * `tf.keras.estimator.model_to_estimator` now supports exporting to `tf.train.Checkpoint format`, which allows the saved checkpoints to be compatible with `model.load_weights`.\r\n  * `tf.keras.model.save_model` and `model.save` now defaults to saving a TensorFlow SavedModel.\r\n  * `OMP_NUM_THREADS` is no longer used by the default Keras config.  To configure the number of threads, use `tf.config.threading` APIs.\r\n  * Mark Keras `set_session` as `compat.v1` only\r\n* `tf.estimator`:\r\n  * Replace `tf.contrib.estimator.add_metrics` with `tf.estimator.add_metrics`\r\n* `tf.lite`:\r\n  * \"Update the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions.\"\r\n  * \"Add support for tflite_convert in 2.0.\"\r\n* `tf.contrib`:\r\n  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r\n* Other:\r\n  * Eliminate race condition during XLA convolution autotuning.\r\n  * Bug fix for `tf.tile` gradient\r\n  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent.\r\n  * Added gradient for SparseToDense op.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * `image.resize` in 2.0 now supports gradients for the new resize kernels.\r\n  * removed `tf.string_split` from v2 API.\r\n  * Variadic reduce is supported on CPU Variadic reduce is supported on CPU\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_solve`.\r\n  * Delete unused lookup table code.\r\n  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, `_BigtableXYZDataset` (of type `DatasetV2`) does not implement the `_as_variant_tensor()` of DatasetV1, when moving `contrib.bigtable` to `tensorflow_io`. Converting into `DatasetV2` removes the overheads to maintain V1 while we are moving into TF 2.0.\r\n  * Remove unused `StringViewVariantWrapper`.\r\n  * Delete unused Fingerprint64Map op registration.\r\n  * Add broadcasting support to `tf.matmul`.\r\n  * Add ellipsis (...) support for `tf.einsum()`.\r\n  * ResourceVariable support for `gather_nd`.\r\n  * Add expand_composites argument to all nest.* methods.\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Add a new \"result_type\" parameter to `tf.strings.split`.\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Added `tf.random.binomial`.\r\n  * Extend `tf.function` with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r\n  * Add name argument to `tf.string_split` and `tf.strings_split`\r\n  * Added `strings.byte_split`\r\n  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r\n  * \"Remove `lite.OpHint`, `lite.experimental`, and `lite.constant` from 2.0 API.\"\r\n  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n  * Add RaggedTensor.placeholder()\r\n  * Add pfor converter for Squeeze.\r\n  * Renamed `tf.image` functions to remove duplicate \"image\" where it is redundant.\r\n  * Add C++ Gradient for BatchMatMulV2.\r\n  * Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n  * `parallel_for.pfor`: add converters for Softmax, LogSoftmax, IsNaN, All, Any, and MatrixSetDiag.\r\n  * parallel_for: add converters for LowerTriangularSolve and Cholesky.\r\n  * Add ragged tensor support to `tf.squeeze`\r\n  * Allow `LinearOperator.solve` to take a `LinearOperator`.\r\n  * Allow all dtypes for `LinearOperatorCirculant`.\r\n  * Introduce MaxParallelism method\r\n  * parallel_for: add converter for `BroadcastTo`.\r\n  * Add LinearOperatorHouseholder.\r\n  * Added `key` and `skip` methods to `random.experimental.Generator`.\r\n  * Adds Philox support to new stateful RNG's XLA path.\r\n  * Update RaggedTensors to support int32 row_splits.\r\n  * Add TensorSpec support for CompositeTensors.\r\n  * Added partial_pivoting input parameter to tf.linalg.tridiagonal_solve.\r\n  * Extend `tf.strings.split` to support inputs with any rank\r\n  * Improve the performance of datasets using `from_tensors()`.\r\n  * Add `tf.linalg.tridiagonal_mul` op.\r\n  * Add `LinearOperatorToeplitz`.\r\n  * Added gradient to `tf.linalg.tridiagonal_solve`.\r\n  * Removed TensorFlow Lite Android example (moved to new examples repo).\r\n  * Updating TF 2.0 `keras.backend.name_scope` to use TF 2.0 `name_scope`.\r\n  * Upgraded LIBXSMM to version 1.11.\r\n  * parallel_for: add converters for `LogMatrixDeterminant` and `MatrixBandPart`.\r\n  * Promoting `tf.data.experimental.enumerate_dataset` to core as `tf.data.Dataset.enumerate`.\r\n  * Uniform processing of quantized embeddings by Gather and EmbeddingLookup Ops\r\n  * Integrate Ragged Tensors with `tf.data`.\r\n  * Correct a misstatement in the documentation of the sparse softmax cross entropy logit parameter.\r\n  * parallel_for: Add converters for `OneHot`, `LowerBound`, `UpperBound`.\r\n  * Added GPU implementation of `tf.linalg.tridiagonal_matmul`.\r\n  * Add gradient to `tf.linalg.tridiagonal_matmul`.\r\n  * Add `tf.ragged.boolean_mask`.\r\n  * `tf.switch_case` added, which selects a branch_fn based on a branch_index.\r\n  * The C++ kernel of gather op supports batch dimensions.\r\n  * Promoting `unbatch` from experimental to core API.\r\n  * Fixed default value and documentation for `trainable` arg of tf.Variable.\r\n  * Adds `tf.enable_control_flow_v2()` and `tf.disable_control_flow_v2()`\r\n  * EagerTensor now support buffer interface for tensors.\r\n  * This change bumps the version number of the FullyConnected Op to 5.\r\n  * tensorflow : crash when pointer become nullptr.\r\n  * Add support for defaulting the value of `cycle_length` argument of `tf.data.Dataset.interleave` to the number of schedulable CPU cores.\r\n* Minor docs fix for `is_gpu_available`.\r\n* Fix multiline magic.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, a6802739, abenmao, Adam Richter, Ag Ramesh, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Anthony Hsu, Anthony Platanios, Anuj Rawat, arp95, Arpit Shah, Astropeak, Augustina Ragwitz, Aurelien Geron, Aur\u00e9Lien Geron, avasid, aweers, Ayush Agrawal, Bairen Yi, Bayberry Z, Ben Barsdell, bhack, Bharat Raghunathan, Bhavani Subramanian, Bin Fan, blairhan, Bl\u00e9Nesi Attila, Bodin-E, Bryan Cutler, Cao Zongyan, chenchc, Cheng Chang, chengchingwen, chie8842, Christian Hansen, Christian Sigg, Christoph Boeddeker, Christopher Yeh, Clayne Robison, crafet, ctiijima, Daniel Rasmussen, Daniel Salvadori, David Norman, delock, Deven Desai, Donovan Ong, Duncan Dean, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Evgeniy Polyakov, FAIJUL, Fangjun Kuang, Federico Martinez, Fei Hu, Filip Matzner, FlashTek, Fred Reiss, Fredrik Knutsson, Geoffrey Irving, George Sterpu, Grzegorz Pawelczak, Guozhong Zhuang, Gu\r\nrpreet Singh, Gyoung-Yoon Ryoo, Hanton Yang, Haraldur T\u00f3Mas Hallgr\u00edMsson, Huan Li (\u674e\u5353\u6853), I-Hong, Irene Dea, Jacky, Jason Zaman, Jason Zavaglia, Jeff Daily, Jeffrey Poznanovic, jer, Jeroen B\u00e9Dorf, jerryyin, jhalakp, jiakai, Jonathan, Justin Dujardin, Justin Tunis, Kaixi Hou, Karthik Muthuraman, Kay Zhu, KDR, Keno Fischer, Kevin Mader, Kilaru Yasaswi Sri Chandra Gandhi, Koan-Sin Tan, Lakshay Tokas, leonard951, Letian Kang, Li, Guizi, Lukas Geiger, luxupu, lvli, Ma, Guokai, Mahmoud Abuzaina, Maksym Kysylov, Mandar Deshpande, Margaret Maynard-Reid, Mark Ryan, Matt Conley, Mihail Salnikov, Mikalai Drabovich, Mike Holcomb, monklof, Moses Marin, Mr. Metal, Mshr-H, nammbash, Nathan Luehr, Neeraj Pradhan, Nick, Nick Lewycky, Niels Ole Salscheider, Niklas Silfverstr\u00f6M, Niranjan Hasabnis, Nuka-137, omeir1, P Sudeepam, Pan Daoxin, Pariksheet Pinjari, Pasquale Minervini, Patrick J. Lopresti, Pavel Akhtyamov, PENGWA, PeterLee, Philipp Jund, Pooya Davoodi, Pranav Marathe, R S Nikhil Krishna, Rohit Gupta, Roland Zimmermann, Roman Soldatow, rthadur, Ruizhe, saishruthi, Sami Kama, Sana-Damani, sdamani, Sean Morgan, seanshpark, Sebastien Iooss, Sergii Khomenko, Serv-Inc, Shashank Gupta, shashvat, Shashvat Chand Shahi, Siju Samuel, smilu97, sremedios, srinivasan.narayanamoorthy, Subin, Sumesh Udayakumaran, sunway513, sxwang, Takeo Sawada, Taylor Jakobson, Ted Chang, ThisIsIsaac, Thomas Deegan, Thomas Hagebols, Tim Zaman, Tongxuan Liu, Trent Lo, Trevor Morris, TungJerry, Tyorden, v1incent, Vijay Ravichandran, Viktor Gal, Vincent, Vishnuvardhan Janapati, wangsiyu, wateryzephyr, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xiaoming (Jason) Cui, Xiaoquan Kong, Xin, Yann-Yy, Yasuhiro Matsumoto, ymodak, Yong Tang, Yuan (Terry) Tang, Zantares, \u738b\u632f\u534e (Zhenhua Wang), \u9ec4\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17563160", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/17563160/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/17563160/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.14.0-rc0", "id": 17563160, "node_id": "MDc6UmVsZWFzZTE3NTYzMTYw", "tag_name": "v1.14.0-rc0", "target_commitish": "r1.14", "name": "TensorFlow 1.14.0-rc0", "draft": false, "author": {"login": "tensorflow-jenkins", "id": 16359713, "node_id": "MDQ6VXNlcjE2MzU5NzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/16359713?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tensorflow-jenkins", "html_url": "https://github.com/tensorflow-jenkins", "followers_url": "https://api.github.com/users/tensorflow-jenkins/followers", "following_url": "https://api.github.com/users/tensorflow-jenkins/following{/other_user}", "gists_url": "https://api.github.com/users/tensorflow-jenkins/gists{/gist_id}", "starred_url": "https://api.github.com/users/tensorflow-jenkins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tensorflow-jenkins/subscriptions", "organizations_url": "https://api.github.com/users/tensorflow-jenkins/orgs", "repos_url": "https://api.github.com/users/tensorflow-jenkins/repos", "events_url": "https://api.github.com/users/tensorflow-jenkins/events{/privacy}", "received_events_url": "https://api.github.com/users/tensorflow-jenkins/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-05-23T18:33:28Z", "published_at": "2019-05-24T07:41:25Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.14.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.14.0-rc0", "body": "# Release 1.14.0\r\n\r\n## Major Features and Improvements\r\n\r\n* This is the first 1.x release containing the compat.v2 module. This module is required to allow libraries to publish code which works in both 1.x and 2.x. After this release, no backwards incompatible changes are allowed in the 2.0 Python API.\r\n* Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n\r\n## Behavioral changes\r\n\r\n* Set default loss reduction as `AUTO` for improving reliability of loss scaling with distribution strategy and custom training loops. `AUTO` indicates that the reduction option will be determined by the usage context. For almost all cases this defaults to `SUM_OVER_BATCH_SIZE`. When used in distribution strategy scope, outside of built-in training loops such as `tf.keras` `compile` and `fit`, we expect reduction value to be 'None' or 'SUM'. Using other values will raise an error.\r\n* Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n* Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n* tf.linspace(start, stop, num) now always uses \"stop\" as last value (for num > 1)\r\n* `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n* The behavior of tf.gather is now correct when axis=None and batch_dims<0.\r\n* Only create a GCS directory object if the object does not already exist.\r\n* In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n* Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r\n* Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n* DType is no longer convertible to an int. Use dtype.as_datatype_enum instead of int(dtype) to get the same result.\r\n* Changed default for gradient accumulation for TPU embeddings to true.\r\n* Callbacks now log values in eager mode when a deferred build model is used.\r\n* Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation\r\n* Deprecations and Symbol renames.\r\n  * Remove unused StringViewVariantWrapper\r\n  * Delete unused Fingerprint64Map op registration\r\n  * SignatureDef util functions have been deprecated.\r\n  * Renamed tf.image functions to remove duplicate \"image\" where it is redundant.\r\n  * tf.keras.experimental.export renamed to tf.keras.experimental.export_saved_model\r\n  * Standardize the LayerNormalization API by replacing the args `norm_axis` and `params_axis` with `axis`.\r\n  * Tensor::UnsafeCopyFromInternal deprecated in favor Tensor::BitcastFrom\r\n* Keras & Python API\r\n  * Add v2 module aliases for:\r\n    * tf.initializers => tf.keras.initializers\r\n    * tf.losses => tf.keras.losses & tf.metrics => tf.keras.metrics\r\n    * tf.optimizers => tf.keras.optimizers\r\n  * Add tf.keras.layers.AbstractRNNCell as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r\n  * Add support for passing list of lists to the `metrics` param in Keras `compile`.\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Fix: model.add_loss(symbolic_tensor) should work in ambient eager.\r\n  * Add name argument to tf.string_split and tf.strings_split\r\n  * Minor change to SavedModels exported from Keras using tf.keras.experimental.export. (SignatureDef key for evaluation mode is now \"eval\" instead of \"test\"). This will be reverted back to \"test\" in the near future.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Keras training and validation curves are shown on the same plot.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n* New ops and improved op functionality\r\n  * Add OpKernels for some stateless maps\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums. #tf-metrics-convergence\r\n  * Add tf.math.nextafter op.\r\n  * Add CompositeTensor base class.\r\n  * Add tf.linalg.tridiagonal_solve op.\r\n  * Add opkernel templates for common table operations.\r\n  * Added support for TFLite in TensorFlow 2.0.\r\n  * Adds summary trace API for collecting graph and profile information.\r\n  * Add batch_dims argument to tf.gather.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Add C++ Gradient for BatchMatMulV2.\r\n  * Added tf.random.binomial\r\n  * Added gradient for SparseToDense op.\r\n  * Add legacy string flat hash map op kernels\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Add broadcasting support to tf.matmul.\r\n  * Add ellipsis (...) support for tf.einsum()\r\n  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r\n  * Added GPU implementation of tf.linalg.tridiagonal_solve.\r\n  * Added strings.byte_split\r\n  * Add RaggedTensor.placeholder()\r\n  * Add a new \"result_type\" parameter to tf.strings.split\r\n  * `add_update` can now be passed a zero-arg callable in order to support turning off the update when setting `trainable=False` on a Layer of a Model compiled with `run_eagerly=True`.\r\n  * Add variant wrapper for absl::string_view\r\n  * Add expand_composites argument to all nest.* methods.\r\n  * Add pfor converter for Squeeze.\r\n  * Bug fix for tf.tile gradient\r\n  * Expose CriticalSection in core as tf.CriticalSection.\r\n  * Update Fingerprint64Map to use aliases\r\n  * ResourceVariable support for gather_nd.\r\n  * ResourceVariable's gather op supports batch dimensions.\r\n  * Variadic reduce is supported on CPU\r\n  * Extend tf.function with basic support for CompositeTensors arguments (such as SparseTensor and RaggedTensor).\r\n  * Add templates and interfaces for creating lookup tables\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * image.resize now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n* Performance\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * Support for multi-host ncclAllReduce in Distribution Strategy.\r\n  * Expose a flag that allows the number of threads to vary across Python benchmarks.\r\n* TensorFlow 2.0 Development\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r\n  * Begin adding Go wrapper for C Eager API\r\n  * image.resize in 2.0 now supports gradients for the new resize kernels.\r\n  * removed tf.string_split from v2 API\r\n  * Expose tf.contrib.proto.* ops in tf.io (they will exist in TF2)\r\n  * \"Updates the TFLiteConverter API in 2.0. Changes from_concrete_function to from_concrete_functions.\"\r\n  * Enable tf.distribute.experimental.MultiWorkerMirroredStrategy working in eager mode.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n* TensorFlow Lite\r\n  * \"Adds support for tflite_convert in 2.0.\"\r\n  * \"Remove lite.OpHint, lite.experimental, and lite.constant from 2.0 API.\"\r\n* tf.contrib\r\n  * Added Neural Turing Implementation as described in https://arxiv.org/abs/1807.08518.\r\n  * Remove tf.contrib.timeseries dependency on TF distributions.\r\n* tf.data\r\n  * Add num_parallel_reads and passing in a Dataset containing filenames into TextLineDataset and FixedLengthRecordDataset\r\n  * Going forward we operate in TF 2.0, this change is part of the effort to slowly converting XYZDataset to DatasetV2 type which is the official version going to be used in TF 2.0 and motivated by some compatibility issue found, _BigtableXYZDataset (of type DatasetV2) does not implement the _as_variant_tensor() of DatasetV1, when moving contrib.bigtable to tensorflow_io. Converting into DatasetV2 removes the overheads to maintain V1 while we are moving into TF 2.0.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add support for TensorArrays to tf.data Dataset.\r\n  * Switching tf.data functions to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r\n* Toolchains\r\n  * CUDNN_INSTALL_PATH, TENSORRT_INSTALL_PATH, NCCL_INSTALL_PATH, NCCL_HDR_PATH are deprecated. Use TF_CUDA_PATHS instead which supports a comma-separated list of base paths that are searched to find CUDA libraries and headers.\r\n  * TF code now resides in `tensorflow_core` and `tensorflow` is just a virtual pip package. No code changes are needed for projects using TensorFlow, the change is transparent\r\n* XLA\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n* Estimator\r\n  * Use tf.compat.v1.estimator.inputs instead of tf.estimator.inputs\r\n  * Replace contrib references with tf.estimator.experimental.* for apis in early_stopping.py\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, 4d55397500, a6802739, abenmao, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Alex, Aman Patel, Amit, Amit Kumar Jaiswal, Amit Srivastava, Andreas Eberle, Andy Craze, Anthony Platanios, Armen Poghosov, armenpoghosov, arp95, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Ayush Agrawal, Ben Barsdell, Bharat Raghunathan, Bhavani Subramanian, blairhan, Bl\u00e9Nesi Attila, Brandon Carter, candy.dc, Chao Liu, chenchc, chie8842, Christian Hansen, Christian Sigg, Clayne Robison, crafet, csukuangfj, ctiijima, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Daniel Salvadori, Dave Airlie, David Norman, Dayananda V, Dayananda-V, delock, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Donovan Ong, Drew Szurko, Duncan Riach, Dustin Neighly, Edward Forgacs, EFanZh, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Geoffrey Irving, Grzegorz George Pawelczak, Grzegorz Pawelczak, Gyoung-Yoon Ryoo, HanGuo97, Hanton Yang, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Irene Dea, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeffrey Poznanovic, Jens Elofsson, Jeroen B\u00e9Dorf, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Joeran Beel, Jonas Rauber, Jonathan, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K Yasaswi Sri Chandra Gandhi, K. Hodges, Kaixi Hou, Karl Lessard, Karl Weinmeister, Karthik Muthuraman, Kashif Rasul, KDR, Keno Fischer, Kevin Mader, kjopek, Koan-Sin Tan, kouml, ktaebum, Lakshay Tokas, Laurent Le Brun, Letian Kang, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, luxupu, Ma, Guokai, Mahmoud Abuzaina, Mandar Deshpande, manhyuk, Marco Gaido, Marek Drozdowski, Mark Collier, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mihail Salnikov, Mike Arpaia, Mike Holcomb, monklof, Moses Marin, Mshr-H, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Neeraj Pradhan, Nehal J Wani, Nick, Niels Ole Salscheider, Niranjan Hasabnis, nlewycky, Nuka-137, Nutti, olicht, P Sudeepam, Palmer Lao, Pan Daoxin, Pariksheet Pinjari, Pavel Samolysov, PENGWA, Pooya Davoodi, R S Nikhil Krishna, Rohit Gupta, Roman Soldatow, rthadur, Ruizhe, Ryan Jiang, Samantha Andow, Sami Kama, Sana-Damani, Saurabh Deoras, sdamani, seanshpark, Sebastien Iooss, Serv-Inc, Shahzad Lone, Shashank Gupta, Shashi, shashvat, shashvatshahi1998, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, sremedios, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Sumesh Udayakumaran, Supriya Rao, Taylor Jakobson, Taylor Thornton, Ted Chang, ThisIsPIRI, Thomas Deegan, Thomas Hagebols, tianyapiaozi, Tim Zaman, tomguluson92, Tongxuan Liu, TungJerry, v1incent, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, wateryzephyr, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, Will Battel, William D. Irons, wyzhao, Xin, Xinan Jiang, Yasuhiro Matsumoto, ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, Zantares, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua), \u9ec4\u946b"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/16858424", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/16858424/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/16858424/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.2", "id": 16858424, "node_id": "MDc6UmVsZWFzZTE2ODU4NDI0", "tag_name": "v1.12.2", "target_commitish": "r1.12", "name": "TensorFlow 1.12.2", "draft": false, "author": {"login": "mihaimaruseac", "id": 323199, "node_id": "MDQ6VXNlcjMyMzE5OQ==", "avatar_url": "https://avatars0.githubusercontent.com/u/323199?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mihaimaruseac", "html_url": "https://github.com/mihaimaruseac", "followers_url": "https://api.github.com/users/mihaimaruseac/followers", "following_url": "https://api.github.com/users/mihaimaruseac/following{/other_user}", "gists_url": "https://api.github.com/users/mihaimaruseac/gists{/gist_id}", "starred_url": "https://api.github.com/users/mihaimaruseac/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mihaimaruseac/subscriptions", "organizations_url": "https://api.github.com/users/mihaimaruseac/orgs", "repos_url": "https://api.github.com/users/mihaimaruseac/repos", "events_url": "https://api.github.com/users/mihaimaruseac/events{/privacy}", "received_events_url": "https://api.github.com/users/mihaimaruseac/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-04-18T17:36:20Z", "published_at": "2019-04-18T20:29:40Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.2", "body": "# Release 1.12.2\r\n## Bug Fixes and Other Changes\r\n\r\n* Fixes a potential security vulnerability where carefully crafted GIF images can produce a null pointer dereference during decoding"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15935393", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15935393/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/15935393/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v2.0.0-alpha0", "id": 15935393, "node_id": "MDc6UmVsZWFzZTE1OTM1Mzkz", "tag_name": "v2.0.0-alpha0", "target_commitish": "r2.0", "name": "TensorFlow 2.0.0-alpha0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-03-05T21:41:53Z", "published_at": "2019-03-06T14:24:31Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v2.0.0-alpha0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v2.0.0-alpha0", "body": "# Release 2.0.0-alpha0\r\n\r\n## Major Features and Improvements\r\n\r\nTensorFlow 2.0 focuses on **simplicity** and **ease of use**, featuring updates like:\r\n\r\n* Easy model building with Keras and eager execution.\r\n* Robust model deployment in production on any platform.\r\n* Powerful experimentation for research.\r\n* API simplification by reducing duplication removing deprecated endpoints.\r\n\r\nFor information on upgrading your existing TensorFlow 1.x models, please refer to our [Upgrade](https://medium.com/tensorflow/upgrading-your-code-to-tensorflow-2-0-f72c3a4d83b5) and [Migration](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/migration_guide.ipynb) guides.\r\nWe have also released a collection of [tutorials and getting started guides](https://github.com/tensorflow/docs/tree/master/site/en/r2), and an [Effective Style Guide for TF 2.0](https://github.com/tensorflow/docs/blob/master/site/en/r2/guide/effective_tf2.md).\r\n\r\nFor more information on these community-driven changes, be sure to check out the [RFCs](https://github.com/tensorflow/community/tree/master/rfcs) we have on Github. If you care about details, all of the RFCs are important.\r\nRefer to our [public project status tracker](https://github.com/orgs/tensorflow/projects/4) and [issues tagged with `2.0`](https://github.com/tensorflow/tensorflow/issues?q=is%3Aopen+is%3Aissue+label%3A2.0) on GitHub for insight into recent issues and development progress.\r\n\r\nAnd, of course: we would love to have your feedback! If you experience any snags when using TF 2.0, be sure to let us know at the [TF 2.0 Testing User Group](https://groups.google.com/a/tensorflow.org/forum/?utm_medium=email&utm_source=footer#!forum/testing). We have a support mailing list as well as weekly testing meetings, and would love to hear your migration feedback and questions.\r\n\r\n### Some highlights:\r\n\r\n  * API clean-up, included removing `tf.app`, `tf.flags`, and `tf.logging` in favor of [absl-py](https://github.com/abseil/abseil-py).\r\n  * No more global variables with helper methods like `tf.global_variables_initializer` and `tf.get_global_step`.\r\n  * Functions, not sessions (`tf.Session` and `session.run` -> `tf.function`).\r\n  * Added support for TensorFlow Lite in TensorFlow 2.0.\r\n\r\n## Breaking Changes\r\n\r\n  * `tf.contrib` has been deprecated, and functionality has been either migrated to the core TensorFlow API, to [`tensorflow/addons`](https://www.github.com/tensorflow/addons), or removed entirely.\r\n  * Checkpoint breakage for [RNNs](https://github.com/tensorflow/tensorflow/issues/26350) and for [Optimizers](https://github.com/tensorflow/tensorflow/issues/26349).\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.estimator`\r\n  * Use `tf.compat.v1.estimator.inputs` instead of `tf.estimator.inputs` in Estimator.\r\n  * Replace contrib references with `tf.estimator.experimental.*` for apis in `early_stopping.py` in Estimator.\r\n* Keras & Python API\r\n  * Added top-k to precision and recall to keras metrics.\r\n  * Adding public APIs for `cumsum` and `cumprod` keras backend functions.\r\n  * Minor change to SavedModels exported from Keras using `tf.keras.experimental.export`. (SignatureDef key for evaluation mode is now \"eval\" instead of \"test\"). This will be reverted back to \"test\" in the near future.\r\n  * Add v2 module aliases for losses and metrics: `tf.losses = tf.keras.losses` & `tf.metrics = tf.keras.metrics`\r\n  * Add v2 module aliases for optimizers: `tf.optimizers = tf.keras.optimizers`\r\n  * `tf.keras.experimental.export` renamed to `tf.keras.experimental.export_saved_model`\r\n  * Add v2 module aliases for initializers: tf.initializers = tf.keras.initializers\r\n  * Add `tf.keras.layers.AbstractRNNCell` as the preferred implementation of RNN cell for TF v2. User can use it to implement RNN cell with custom behavior.\r\n  * Keras training and validation curves are shown on the same plot.\r\n  * Disable `run_eagerly` and distribution strategy if there are symbolic tensors added to the model using `add_metric` or `add_loss`.\r\n* Other:\r\n  * Only create a GCS directory object if the object does not already exist.\r\n  * Introduce `dynamic` constructor argument in Layer and Model, which should be set to True when using imperative control flow in the `call` method.\r\n  * `ResourceVariable` and `Variable` no longer accepts `constraint` in the constructor, nor expose it as a @property.\r\n  * `ResourceVariab...\r\n  * Add UnifiedGRU as the new GRU implementation for tf2.0. Change the default recurrent activation function for GRU from 'hard_sigmoid' to 'sigmoid', and 'reset_after' to True in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default GRU will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with GRU(recurrent_activation='hard_sigmoid', reset_after=False) to fallback to 1.x behavior.\r\n  * Begin adding Go wrapper for C Eager API\r\n  * XLA HLO graphs can be inspected with interactive_graphviz tool now.\r\n  * Add dataset ops to the graph (or create kernels in Eager execution) during the python Dataset object creation instead doing it during Iterator creation time.\r\n  * Add batch_dims argument to tf.gather.\r\n  * Removing of dtype in the constructor of initializers and partition_info in call.\r\n  * Add `tf.math.nextafter` op.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * Turn on MKL-DNN contraction kernels by default. MKL-DNN dynamically dispatches the best kernel implementation based on CPU vector architecture. To disable them, build with --define=tensorflow_mkldnn_contraction_kernel=0.\r\n  * `tf.linspace(start, stop, num)` now always uses \"stop\" as last value (for num > 1)\r\n  * Raw TensorFlow functions can now be used in conjunction with the Keras Functional API during model creation. This obviates the need for users to create Lambda layers in most cases when using the Functional API. Like Lambda layers, TensorFlow functions that result in Variable creation or assign ops are not supported.\r\n  * Add a ragged size op and register it to the op dispatcher\r\n  * Transitive dependencies on :pooling_ops were removed.  Some users may need to add explicit dependencies on :pooling_ops if they reference the operators from that library.\r\n  * Updates binary cross entropy logic in Keras when input is probabilities. Instead of converting probabilities to logits, we are using the cross entropy formula for probabilities.\r\n  * Add CompositeTensor base class.\r\n  * Malformed gif images could result in an access out of bounds in the color palette of the frame. This has been fixed now\r\n  * Add templates and interfaces for creating lookup tables\r\n  * `Tensor::UnsafeCopyFromInternal` deprecated in favor `Tensor::BitcastFrom`.\r\n  * In `map_vectorization` optimization, reduce the degree of parallelism in the vectorized map node.\r\n  * Add variant wrapper for `absl::string_view`.\r\n  * Post-training quantization tool supports quantizing weights shared by multiple operations. The models made with versions of this tool will use INT8 types for weights and will only be executable interpreters from this version onwards.\r\n  * Wraps losses passed to the `compile` API (strings and v1 losses) which are not instances of v2 `Loss` class in `LossWrapper` class. => All losses will now use `SUM_OVER_BATCH_SIZE` reduction as default.\r\n  * Add OpKernels for some stateless maps\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums.\r\n  * Add v2 APIs for AUCCurve and AUCSummationMethod enums.\r\n  * Allow non-Tensors through v2 losses.\r\n  * Add v2 sparse categorical crossentropy metric.\r\n  * `DType` is no longer convertible to an int. Use `dtype.as_datatype_enum` instead of `int(dtype)` to get the same result.\r\n  * Support both binary and -1/1 label input in v2 hinge and squared hinge losses.\r\n  * Bug fix: loss and gradients should now more reliably be correctly scaled w.r.t. the global batch size when using a tf.distribute.Strategy.\r\n  * Added LinearOperator.adjoint and LinearOperator.H (alias).\r\n  * Switching `tf.data functions` to use `defun`, providing an escape hatch to continue using the legacy `Defun`.\r\n  * Expose CriticalSection in core as `tf.CriticalSection`.\r\n  * Enhanced graphviz output.\r\n  * The behavior of `tf.gather` is now correct when axis=None and batch_dims<0.\r\n  * Add `tf.linalg.tridiagonal_solve` op.\r\n  * Add opkernel templates for common table operations.\r\n  * Fix callbacks do not log values in eager mode when a deferred build model is used.\r\n  * SignatureDef util functions have been deprecated.\r\n  * Update Fingerprint64Map to use aliases\r\n  * Add legacy string flat hash map op kernels\r\n  * Add support for passing list of lists to the `metrics` param in Keras `compile.\r\n  * Keras training and validation curves are shown on the same plot.\r\n  * Fix: `model.add_loss(symbolic_tensor)` should work in ambient eager.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r\n  * Add support for `add_metric` in the graph function mode.\r\n  * Adding `clear_losses` API to be able to clear losses at the end of forward pass in a custom training loop in eager.\r\n  * Updating cosine similarity loss - removed the negate sign from cosine similarity.\r\n  * TF 2.0 - Update metric name to always reflect what the user has given in compile. Affects following cases 1. When name is given as 'accuracy'/'crossentropy' 2. When an aliased function name is used eg. 'mse' 3. Removing the `weighted` prefix from weighted metric names.\r\n  * Workaround for compiler bug.\r\n  * Changed default for gradient accumulation for TPU embeddings to true.\r\n  * Adds summary trace API for collecting graph and profile information.\r\n  * Support for multi-host `ncclAllReduce` in Distribution Strategy.\r\n  * Enable `tf.distribute.experimental.MultiWorkerMirroredStrategy` working in eager mode.\r\n  * `image.resize` now considers proper pixel centers and has new kernels (incl. anti-aliasing).\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n1e100, a6802739, Abolfazl Shahbazi, Adam Weiss, Ag Ramesh, Alan Du, Albin Joy, Amit, Amit Srivastava, Andy Craze, Anshuman Tripathy, Armen Poghosov, armenpoghosov, Arpit Shah, Ashwin Ramaswami, Aurelien Geron, Aur\u00e9Lien Geron, aweers, awesomealex1, Bairen Yi, Ben Barsdell, Bhavani Subramanian, Brandon Carter, candy.dc, Chao Liu, Clayne Robison, csukuangfj, Dan Jarvis, Dan Lazewatsky, Daniel Ingram, Dave Airlie, David Norman, Dayananda V, Denis Khalikov, Deven Desai, Dheeraj Rajaram Reddy, dmitrievanthony, Drew Szurko, Duncan Riach, Fei Hu, Felix Lemke, Filip Matzner, fo40225, frreiss, Gautam, gehring, Grzegorz George Pawelczak, Grzegorz Pawelczak, HanGuo97, Hari Shankar, hehongliang, Heungsub Lee, Hoeseong Kim, I-Hong Jhuo, Ilango R, Innovimax, Jacky Ko, Jakub Lipinski, Jason Zaman, jcf94, Jeff Poznanovic, Jia Qingtong, Jiankang, Joe Q, Joe Quadrino, Jonas Rauber, Jonathan Kyl, Joppe Geluykens, Joseph Friedman, jtressle, jwu, K. Hodges, kaixih, Karl Lessard, Karl Weinmeister, Kashif Rasul, kjopek, Koan-Sin Tan, kouml, ktaebum, Laurent Le Brun, Li, Guizi, Loo Rong Jie, Lucas Hendren, Lukas Geiger, Luke Han, Mahmoud Abuzaina, manhyuk, Marco Gaido, Marek Drozdowski, Mark Ryan, mars20, Mateusz Chudyk, Matt Conley, MattConley, mbhuiyan, mdfaijul, Melissa Grueter, Michael K\u00e4Ufl, Micka\u00ebL Schoentgen, Miguel Morin, Mike Arpaia, nammbash, Natalia Gimelshein, Nayana-Ibm, neargye, Nehal J Wani, Niels Ole Salscheider, Niranjan Hasabnis, Nutti, olicht, P Sudeepam, Paige Bailey, Palmer Lao, Pariksheet Pinjari, Pavel Samolysov, Pooya Davoodi, Ryan Jiang, Samantha Andow, Sami Kama, Saurabh Deoras, Shahzad Lone, Shashi, Siju, Siju Samuel, Snease-Abq, Spencer Schaber, srinivasan.narayanamoorthy, Steve Lang, Steve Nesae, Supriya Rao, Taylor Jakobson, Taylor Thornton, ThisIsPIRI, Thomas Deegan, tomguluson92, Tongxuan Liu, Vagif, vcarpani, Vikram Tiwari, Vishwak Srinivasan, Vitor-Alves, wangsiyu, WeberXie, WeijieSun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), ymodak, Yong Tang, Younes Khoudli, Yuan Lin, Yves-Noel Weweler, zjjott, \u535c\u5c45, \u738b\u632f\u534e (Wang Zhenhua)"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15735942", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15735942/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/15735942/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.1", "id": 15735942, "node_id": "MDc6UmVsZWFzZTE1NzM1OTQy", "tag_name": "v1.13.1", "target_commitish": "r1.13", "name": "TensorFlow 1.13.1", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2019-02-25T20:37:04Z", "published_at": "2019-02-25T20:44:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.13.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.13.1", "body": "# Release 1.13.1\r\n\r\n## Major Features and Improvements\r\n\r\n* TensorFlow Lite has moved from contrib to core. This means that Python modules are under `tf.lite` and source code is now under `tensorflow/lite` rather than `tensorflow/contrib/lite`.\r\n* TensorFlow GPU binaries are now built against CUDA 10 and TensorRT 5.0.\r\n* Support for Python3.7 on all operating systems.\r\n* Moved NCCL to core.\r\n\r\n## Behavioral changes\r\n\r\n* Disallow conversion of python floating types to uint32/64 (matching behavior of other integer types) in `tf.constant`.\r\n* Make the `gain` argument of convolutional orthogonal initializers (`convolutional_delta_orthogonal`, `convolutional_orthogonal_1D`, `convolutional_orthogonal_2D`, `convolutional_orthogonal_3D`) have consistent behavior with the `tf.initializers.orthogonal` initializer, i.e. scale the output l2-norm by `gain` and NOT by `sqrt(gain)`. (Note that these functions are currently in `tf.contrib` which is not guaranteed backward compatible).\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Documentation\r\n  * Update the doc with the details about the rounding mode used in quantize_and_dequantize_v2.\r\n  * Clarify that tensorflow::port::InitMain() _should_ be called before using the TensorFlow library.  Programs failing to do this are not portable to all platforms.\r\n* Deprecations and Symbol renames.\r\n   * Removing deprecations for the following endpoints: `tf.acos`, `tf.acosh`, `tf.add`, `tf.as_string`, `tf.asin`, `tf.asinh`, `tf.atan`, `tf.atan2`, `tf.atanh`, `tf.cos`, `tf.cosh`, `tf.equal`, `tf.exp`, `tf.floor`, `tf.greater`, `tf.greater_equal`, `tf.less`, `tf.less_equal`, `tf.log`, `tf.logp1`, `tf.logical_and`, `tf.logical_not`, `tf.logical_or`, `tf.maximum`, `tf.minimum`, `tf.not_equal`, `tf.sin`, `tf.sinh`, `tf.tan`\r\n  * Deprecate `tf.data.Dataset.shard`.\r\n  * Deprecate `saved_model.loader.load` which is replaced by `saved_model.load` and `saved_model.main_op`, which will be replaced by `saved_model.main_op` in V2.\r\n  * Deprecate tf.QUANTIZED_DTYPES. The official new symbol is tf.dtypes.QUANTIZED_DTYPES.\r\n  * Update sklearn imports for deprecated packages.\r\n  * Deprecate `Variable.count_up_to` and `tf.count_up_to` in favor of `Dataset.range`.\r\n  * Export `confusion_matrix` op as `tf.math.confusion_matrix` instead of `tf.train.confusion_matrix`.\r\n  * Add `tf.dtypes.` endpoint for every constant in dtypes.py; moving endpoints in versions.py to corresponding endpoints in `tf.sysconfig.` and `tf.version.`; moving all constants under `tf.saved_model` submodules to `tf.saved_model` module. New endpoints are added in V1 and V2 but existing endpoint removals are only applied in V2.\r\n  * Deprecates behavior where device assignment overrides collocation constraints inside a collocation context manager.\r\n* Keras & Python API\r\n  * Add to Keras functionality analogous to `tf.register_tensor_conversion_function`.\r\n  * Subclassed Keras models can now be saved through `tf.contrib.saved_model.save_keras_model`.\r\n  * `LinearOperator.matmul` now returns a new `LinearOperator`.\r\n* New ops and improved op functionality\r\n  * Add a Nearest Neighbor Resize op.\r\n  * Add an `ignore_unknown` argument to `parse_values` which suppresses ValueError for unknown hyperparameter types. Such * Add `tf.linalg.matvec` convenience function.\r\n  * `tf.einsum()`raises `ValueError` for unsupported equations like `\"ii->\"`.\r\n  * Add DCT-I and IDCT-I in `tf.signal.dct` and `tf.signal.idct`.\r\n  * Add LU decomposition op.\r\n  * Add quantile loss to gradient boosted trees in estimator.\r\n  * Add `round_mode` to `QuantizeAndDequantizeV2` op to select rounding algorithm.\r\n  * Add `unicode_encode`, `unicode_decode`, `unicode_decode_with_offsets`, `unicode_split`, `unicode_split_with_offset`, and `unicode_transcode` ops. Amongst other things, this Op adds the ability to encode, decode, and transcode a variety of input text encoding formats into the main Unicode encodings (UTF-8, UTF-16-BE, UTF-32-BE)\r\n  * Add \"unit\" attribute to the substr op, which allows obtaining the substring of a string containing unicode characters.\r\n  * Broadcasting support for Ragged Tensors.\r\n  * `SpaceToDepth` supports uint8 data type.\r\n  * Support multi-label quantile regression in estimator.\r\n  * We now use \"div\" as the default partition_strategy in `tf.nn.safe_embedding_lookup_sparse`, `tf.nn.sampled_softmax` and `tf.nn.nce_loss`.\r\n  hyperparameter are ignored.\r\n* Performance\r\n  * Improve performance of GPU cumsum/cumprod by up to 300x.\r\n  * Added support for weight decay in most TPU embedding optimizers, including AdamW and MomentumW.\r\n* TensorFlow 2.0 Development\r\n  * Add a command line tool to convert to TF2.0, tf_upgrade_v2\r\n  * Merge `tf.spectral` into `tf.signal` for TensorFlow 2.0.\r\n  * Change the default recurrent activation function for LSTM from 'hard_sigmoid' to 'sigmoid' in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default LSTM will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with LSTM(recurrent_activation='hard_sigmoid') to fallback to 1.x behavior.\r\n* TensorFlow Lite\r\n  * Move from `tensorflow/contrib/lite` to `tensorflow/lite`.\r\n  * Add experimental Java API for injecting TensorFlow Lite delegates\r\n  * Add support for strings in TensorFlow Lite Java API.\r\n* `tf.contrib`:\r\n  * Add Apache Ignite Filesystem plugin to support accessing Apache IGFS.\r\n  * Dropout now takes `rate` argument, `keep_prob` is deprecated.\r\n  * Estimator occurrences references `tf.contrib.estimator` were changed to `tf.estimator`:\r\n    * `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n    * `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n    * `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n    * `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n    * `tf.contrib.estimator.InMemoryEvaluatorHook` and tf.estimator.experimental.InMemoryEvaluatorHook`.\r\n    * `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`.\r\n  * Expose `tf.distribute.Strategy as the new name for tf.contrib.distribute.DistributionStrategy.\r\n  * Migrate linear optimizer from contrib to core.\r\n  * Move `tf.contrib.signal` to `tf.signal` (preserving aliases in tf.contrib.signal).\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n* tf.data:\r\n  * Add `tf.data.experimental.StatsOptions()`, to configure options to collect statistics from `tf.data.Dataset` pipeline using `StatsAggregator`. Add nested option, `experimental_stats` (which takes a `tf.data.experimen tal.StatsOptions` object), to `tf.data.Options`. Deprecates `tf.data.experimental.set_stats_agregator`.\r\n  * Performance optimizations:\r\n    * Add `tf.data.experimental.OptimizationOptions()`, to configure options to enable `tf.data` performance optimizations. Add nested option, `experimental_optimization` (which takes a `tf.data.experimental.OptimizationOptions` object), to `tf.data.Options`. Remove performance optimization options from `tf.data.Options`, and add them under `tf.data.experimental.OptimizationOptions` instead.\r\n    * Enable `map_and_batch_fusion` and `noop_elimination` optimizations by default. They can be disabled by configuring `tf.data.experimental.OptimizationOptions` to set `map_and_batch = False` or `noop_elimination = False` respectively. To disable all default optimizations, set `apply_default_optimizations = False`.\r\n    * Support parallel map in `map_and_filter_fusion`.\r\n    * Disable static optimizations for input pipelines that use non-resource `tf.Variable`s.\r\n  * Add NUMA-aware MapAndBatch dataset.\r\n  * Deprecate `tf.data.Dataset.make_one_shot_iterator()` in V1, removed it from V2, and added tf.compat.v1.data.make_one_shot_iterator()`.\r\n  * Deprecate `tf.data.Dataset.make_initializable_iterator()` in V1, removed it from V2, and added `tf.compat.v1.data.make_initializable_iterator()`.\r\n  * Enable nested dataset support in core `tf.data` transformations.\r\n  * For `tf.data.Dataset` implementers: Added `tf.data.Dataset._element_structured property` to replace `Dataset.output_{types,shapes,classes}`.\r\n  * Make `num_parallel_calls` of `tf.data.Dataset.interleave` and `tf.data.Dataset.map` work in Eager mode.\r\n* Toolchains\r\n  * Fixed OpenSSL compatibility by avoiding `EVP_MD_CTX_destroy`.\r\n  * Added bounds checking to printing deprecation warnings.\r\n  * Upgraded CUDA dependency to 10.0\r\n  * To build with Android NDK r14b, add \"#include <linux/compiler.h>\" to android-ndk-r14b/platforms/android-14/arch-*/usr/include/linux/futex.h\r\n  * Removed `:android_tensorflow_lib_selective_registration*` targets, use `:android_tensorflow_lib_lite*` targets instead.\r\n* XLA\r\n  * Move `RoundToEven` function to xla/client/lib/math.h.\r\n  * A new environment variable `TF_XLA_DEBUG_OPTIONS_PASSTHROUGH` set to \"1\" or \"true\" allows the debug options passed within an XRTCompile op to be passed directly to the XLA compilation backend. If such variable is not set (service side), only a restricted set will be passed through.\r\n  * Allow the XRTCompile op to return the ProgramShape resulted form the XLA compilation as a second return argument.\r\n  * XLA HLO graphs can now be rendered as SVG/HTML.\r\n* Estimator\r\n  * Replace all occurences of `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n  * Replace all occurences of `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n  * Update `regression_head` to the new Head API for Canned Estimator V2.\r\n  * Switch `multi_class_head` to Head API for Canned Estimator V2.\r\n  * Replace all occurences of `tf.contrib.estimator.InMemoryEvaluatorHook` and `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.InMemoryEvaluatorHook` and `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`\r\n  * Migrate linear optimizer from contrib to core.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbhinav Upadhyay, Ag Ramesh, akikaaa, Alexis Louis, Anders Huss, Andreas Madsen, Andrew Banchich, Andy Craze, Anton Dmitriev, Artem Malykh, Avijit-Nervana, Balint Cristian, Benjamin Tan Wei Hao, Bhavani Subramanian, Brendan Finan, Brian Nemsick, Bryan Cutler, By Shen, Cao Zongyan, Castiel, Chris Antaki, Christian Goll, Cibifang, Clayne Robison, Codrut Grosu, Cong Xu, Dalmo Cirne, Daniel Hunter, Dougal J. Sutherland, Edvard Fagerholm, EFanZh, Erik Smistad, Evgeniy Polyakov, Feiyang Chen, franklin5, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Gitea, Grzegorz George Pawelczak, Guozhong Zhuang, himkt, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), HuiyangFei, hyunyoung, Isaac Burbank, jackonan, Jacky Ko, Jason Furmanek, Jason Zaman, Javier Luraschi, Jiang,Zhoulong, joaak, John Lin, Jonathan Wyatt Hoech, josephyearsley, Josh Gordon, Julian Niedermeier, Karl Lessard, Keno Fischer, lanhin, Leon Graser, leondgarse, Li, Guizi, Li, Yiqiang, lxl910915, Mahmoud Abuzaina, manhyuk, Marcela Morales Quispe, margaretmz, Matt Conley, Max Pumperla, mbhuiyan, mdfaijul, Meng, Peng, Michael, Michael Gielda, mrTsjolder, Muhammad Wildan, neargye, Nehal J Wani, NEWPLAN, Niranjan Hasabnis, Nutti, olicht, Pan Daoxin, Pedro Monreal, Peng Yu, pillarpond, Pooya Davoodi, qiezi, Rholais Lii, Richard Yu, Rin Arakaki, Roger Iyengar, sahilbadyal, Sami Kama, Sandip Giri, Scott Leishman, Serge Panev, Seunghoon Park, Shafi Dayatar, shengfuintel, Shimin Guo, Siju, silent567, Stefan Dyulgerov, steven, Tao Wei, Thor Johnsen, Tingbo Lu, tomguluson92, Tongxuan Liu, Trevor Morris, Ubuntu, Vadim Borisov, vanderliang, wangsiyu, Wen Yun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaniv Blumenfeld, Yash Gaurkar, Yicheng Fan, Yong Tang, Yongjoon Lee, Yuan (Terry) Tang, Yuxin Wu, zldrobit"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15592422", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15592422/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/15592422/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.0-rc2", "id": 15592422, "node_id": "MDc6UmVsZWFzZTE1NTkyNDIy", "tag_name": "v1.13.0-rc2", "target_commitish": "r1.13", "name": "TensorFlow 1.13.0-rc2", "draft": false, "author": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-02-15T00:42:33Z", "published_at": "2019-02-15T20:16:37Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.13.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.13.0-rc2", "body": "# Release 1.13.0 RC2\r\n\r\n## Major Features and Improvements\r\n\r\n* TensorFlow Lite has moved from contrib to core. This means that Python modules are under `tf.lite` and source code is now under `tensorflow/lite` rather than `tensorflow/contrib/lite`.\r\n* TensorFlow GPU binaries are now built against CUDA 10 and TensorRT 5.0.\r\n* Support for Python3.7 on all operating systems.\r\n* Moved NCCL to core.\r\n\r\n## Behavioral changes\r\n\r\n* Disallow conversion of python floating types to uint32/64 (matching behavior of other integer types) in `tf.constant`.\r\n* Make the `gain` argument of convolutional orthogonal initializers (`convolutional_delta_orthogonal`, `convolutional_orthogonal_1D`, `convolutional_orthogonal_2D`, `convolutional_orthogonal_3D`) have consistent behavior with the `tf.initializers.orthogonal` initializer, i.e. scale the output l2-norm by `gain` and NOT by `sqrt(gain)`. (Note that these functions are currently in `tf.contrib` which is not guaranteed backward compatible).\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Documentation\r\n  * Update the doc with the details about the rounding mode used in quantize_and_dequantize_v2.\r\n  * Clarify that tensorflow::port::InitMain() _should_ be called before using the TensorFlow library.  Programs failing to do this are not portable to all platforms.\r\n* Deprecations and Symbol renames.\r\n   * Removing deprecations for the following endpoints: `tf.acos`, `tf.acosh`, `tf.add`, `tf.as_string`, `tf.asin`, `tf.asinh`, `tf.atan`, `tf.atan2`, `tf.atanh`, `tf.cos`, `tf.cosh`, `tf.equal`, `tf.exp`, `tf.floor`, `tf.greater`, `tf.greater_equal`, `tf.less`, `tf.less_equal`, `tf.log`, `tf.logp1`, `tf.logical_and`, `tf.logical_not`, `tf.logical_or`, `tf.maximum`, `tf.minimum`, `tf.not_equal`, `tf.sin`, `tf.sinh`, `tf.tan`\r\n  * Deprecate `tf.data.Dataset.shard`.\r\n  * Deprecate `saved_model.loader.load` which is replaced by `saved_model.load` and `saved_model.main_op`, which will be replaced by `saved_model.main_op` in V2.\r\n  * Deprecate tf.QUANTIZED_DTYPES. The official new symbol is tf.dtypes.QUANTIZED_DTYPES.\r\n  * Update sklearn imports for deprecated packages.\r\n  * Deprecate `Variable.count_up_to` and `tf.count_up_to` in favor of `Dataset.range`.\r\n  * Export `confusion_matrix` op as `tf.math.confusion_matrix` instead of `tf.train.confusion_matrix`.\r\n  * Add `tf.dtypes.` endpoint for every constant in dtypes.py; moving endpoints in versions.py to corresponding endpoints in `tf.sysconfig.` and `tf.version.`; moving all constants under `tf.saved_model` submodules to `tf.saved_model` module. New endpoints are added in V1 and V2 but existing endpoint removals are only applied in V2.\r\n  * Deprecates behavior where device assignment overrides collocation constraints inside a collocation context manager.\r\n* Keras & Python API\r\n  * Add to Keras functionality analogous to `tf.register_tensor_conversion_function`.\r\n  * Subclassed Keras models can now be saved through `tf.contrib.saved_model.save_keras_model`.\r\n  * `LinearOperator.matmul` now returns a new `LinearOperator`.\r\n* New ops and improved op functionality\r\n  * Add a Nearest Neighbor Resize op.\r\n  * Add an `ignore_unknown` argument to `parse_values` which suppresses ValueError for unknown hyperparameter types. Such * Add `tf.linalg.matvec` convenience function.\r\n  * `tf.einsum()`raises `ValueError` for unsupported equations like `\"ii->\"`.\r\n  * Add DCT-I and IDCT-I in `tf.signal.dct` and `tf.signal.idct`.\r\n  * Add LU decomposition op.\r\n  * Add quantile loss to gradient boosted trees in estimator.\r\n  * Add `round_mode` to `QuantizeAndDequantizeV2` op to select rounding algorithm.\r\n  * Add `unicode_encode`, `unicode_decode`, `unicode_decode_with_offsets`, `unicode_split`, `unicode_split_with_offset`, and `unicode_transcode` ops. Amongst other things, this Op adds the ability to encode, decode, and transcode a variety of input text encoding formats into the main Unicode encodings (UTF-8, UTF-16-BE, UTF-32-BE)\r\n  * Add \"unit\" attribute to the substr op, which allows obtaining the substring of a string containing unicode characters.\r\n  * Broadcasting support for Ragged Tensors.\r\n  * `SpaceToDepth` supports uint8 data type.\r\n  * Support multi-label quantile regression in estimator.\r\n  * We now use \"div\" as the default partition_strategy in `tf.nn.safe_embedding_lookup_sparse`, `tf.nn.sampled_softmax` and `tf.nn.nce_loss`.\r\n  hyperparameter are ignored.\r\n* Performance\r\n  * Improve performance of GPU cumsum/cumprod by up to 300x.\r\n  * Added support for weight decay in most TPU embedding optimizers, including AdamW and MomentumW.\r\n* TensorFlow 2.0 Development\r\n  * Add a command line tool to convert to TF2.0, tf_upgrade_v2\r\n  * Merge `tf.spectral` into `tf.signal` for TensorFlow 2.0.\r\n  * Change the default recurrent activation function for LSTM from 'hard_sigmoid' to 'sigmoid' in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default LSTM will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with LSTM(recurrent_activation='hard_sigmoid') to fallback to 1.x behavior.\r\n* TensorFlow Lite\r\n  * Move from `tensorflow/contrib/lite` to `tensorflow/lite`.\r\n  * Add experimental Java API for injecting TensorFlow Lite delegates\r\n  * Add support for strings in TensorFlow Lite Java API.\r\n* `tf.contrib`:\r\n  * Add Apache Ignite Filesystem plugin to support accessing Apache IGFS.\r\n  * Dropout now takes `rate` argument, `keep_prob` is deprecated.\r\n  * Estimator occurrences references `tf.contrib.estimator` were changed to `tf.estimator`:\r\n    * `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n    * `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n    * `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n    * `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n    * `tf.contrib.estimator.InMemoryEvaluatorHook` and tf.estimator.experimental.InMemoryEvaluatorHook`.\r\n    * `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`.\r\n  * Expose `tf.distribute.Strategy as the new name for tf.contrib.distribute.DistributionStrategy.\r\n  * Migrate linear optimizer from contrib to core.\r\n  * Move `tf.contrib.signal` to `tf.signal` (preserving aliases in tf.contrib.signal).\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n* tf.data:\r\n  * Add `tf.data.experimental.StatsOptions()`, to configure options to collect statistics from `tf.data.Dataset` pipeline using `StatsAggregator`. Add nested option, `experimental_stats` (which takes a `tf.data.experimen tal.StatsOptions` object), to `tf.data.Options`. Deprecates `tf.data.experimental.set_stats_agregator`.\r\n  * Performance optimizations:\r\n    * Add `tf.data.experimental.OptimizationOptions()`, to configure options to enable `tf.data` performance optimizations. Add nested option, `experimental_optimization` (which takes a `tf.data.experimental.OptimizationOptions` object), to `tf.data.Options`. Remove performance optimization options from `tf.data.Options`, and add them under `tf.data.experimental.OptimizationOptions` instead.\r\n    * Enable `map_and_batch_fusion` and `noop_elimination` optimizations by default. They can be disabled by configuring `tf.data.experimental.OptimizationOptions` to set `map_and_batch = False` or `noop_elimination = False` respectively. To disable all default optimizations, set `apply_default_optimizations = False`.\r\n    * Support parallel map in `map_and_filter_fusion`.\r\n    * Disable static optimizations for input pipelines that use non-resource `tf.Variable`s.\r\n  * Add NUMA-aware MapAndBatch dataset.\r\n  * Deprecate `tf.data.Dataset.make_one_shot_iterator()` in V1, removed it from V2, and added tf.compat.v1.data.make_one_shot_iterator()`.\r\n  * Deprecate `tf.data.Dataset.make_initializable_iterator()` in V1, removed it from V2, and added `tf.compat.v1.data.make_initializable_iterator()`.\r\n  * Enable nested dataset support in core `tf.data` transformations.\r\n  * For `tf.data.Dataset` implementers: Added `tf.data.Dataset._element_structured property` to replace `Dataset.output_{types,shapes,classes}`.\r\n  * Make `num_parallel_calls` of `tf.data.Dataset.interleave` and `tf.data.Dataset.map` work in Eager mode.\r\n* Toolchains\r\n  * Fixed OpenSSL compatibility by avoiding `EVP_MD_CTX_destroy`.\r\n  * Added bounds checking to printing deprecation warnings.\r\n  * Upgraded CUDA dependency to 10.0\r\n  * To build with Android NDK r14b, add \"#include <linux/compiler.h>\" to android-ndk-r14b/platforms/android-14/arch-*/usr/include/linux/futex.h\r\n  * Removed `:android_tensorflow_lib_selective_registration*` targets, use `:android_tensorflow_lib_lite*` targets instead.\r\n* XLA\r\n  * Move `RoundToEven` function to xla/client/lib/math.h.\r\n  * A new environment variable `TF_XLA_DEBUG_OPTIONS_PASSTHROUGH` set to \"1\" or \"true\" allows the debug options passed within an XRTCompile op to be passed directly to the XLA compilation backend. If such variable is not set (service side), only a restricted set will be passed through.\r\n  * Allow the XRTCompile op to return the ProgramShape resulted form the XLA compilation as a second return argument.\r\n  * XLA HLO graphs can now be rendered as SVG/HTML.\r\n* Estimator\r\n  * Replace all occurences of `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n  * Replace all occurences of `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n  * Update `regression_head` to the new Head API for Canned Estimator V2.\r\n  * Switch `multi_class_head` to Head API for Canned Estimator V2.\r\n  * Replace all occurences of `tf.contrib.estimator.InMemoryEvaluatorHook` and `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.InMemoryEvaluatorHook` and `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`\r\n  * Migrate linear optimizer from contrib to core.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbhinav Upadhyay, Ag Ramesh, akikaaa, Alexis Louis, Anders Huss, Andreas Madsen, Andrew Banchich, Andy Craze, Anton Dmitriev, Artem Malykh, Avijit-Nervana, Balint Cristian, Benjamin Tan Wei Hao, Bhavani Subramanian, Brendan Finan, Brian Nemsick, Bryan Cutler, By Shen, Cao Zongyan, Castiel, Chris Antaki, Christian Goll, Cibifang, Clayne Robison, Codrut Grosu, Cong Xu, Dalmo Cirne, Daniel Hunter, Dougal J. Sutherland, Edvard Fagerholm, EFanZh, Erik Smistad, Evgeniy Polyakov, Feiyang Chen, franklin5, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Gitea, Grzegorz George Pawelczak, Guozhong Zhuang, himkt, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), HuiyangFei, hyunyoung, Isaac Burbank, jackonan, Jacky Ko, Jason Furmanek, Jason Zaman, Javier Luraschi, Jiang,Zhoulong, joaak, John Lin, Jonathan Wyatt Hoech, josephyearsley, Josh Gordon, Julian Niedermeier, Karl Lessard, Keno Fischer, lanhin, Leon Graser, leondgarse, Li, Guizi, Li, Yiqiang, lxl910915, Mahmoud Abuzaina, manhyuk, Marcela Morales Quispe, margaretmz, Matt Conley, Max Pumperla, mbhuiyan, mdfaijul, Meng, Peng, Michael, Michael Gielda, mrTsjolder, Muhammad Wildan, neargye, Nehal J Wani, NEWPLAN, Niranjan Hasabnis, Nutti, olicht, Pan Daoxin, Pedro Monreal, Peng Yu, pillarpond, Pooya Davoodi, qiezi, Rholais Lii, Richard Yu, Rin Arakaki, Roger Iyengar, sahilbadyal, Sami Kama, Sandip Giri, Scott Leishman, Serge Panev, Seunghoon Park, Shafi Dayatar, shengfuintel, Shimin Guo, Siju, silent567, Stefan Dyulgerov, steven, Tao Wei, Thor Johnsen, Tingbo Lu, tomguluson92, Tongxuan Liu, Trevor Morris, Ubuntu, Vadim Borisov, vanderliang, wangsiyu, Wen Yun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaniv Blumenfeld, Yash Gaurkar, Yicheng Fan, Yong Tang, Yongjoon Lee, Yuan (Terry) Tang, Yuxin Wu, zldrobit\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15431762", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15431762/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/15431762/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.0-rc1", "id": 15431762, "node_id": "MDc6UmVsZWFzZTE1NDMxNzYy", "tag_name": "v1.13.0-rc1", "target_commitish": "r1.13", "name": "TensorFlow 1.13.0-rc1", "draft": false, "author": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-02-07T18:19:52Z", "published_at": "2019-02-07T18:52:35Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.13.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.13.0-rc1", "body": "# Release 1.13.0\r\n\r\n## Major Features and Improvements\r\n\r\n* TensorFlow Lite has moved from contrib to core. This means that Python modules are under `tf.lite` and source code is now under `tensorflow/lite` rather than `tensorflow/contrib/lite`.\r\n* TensorFlow GPU binaries are now built against CUDA 10 and TensorRT 5.0.\r\n* Moved NCCL to core.\r\n\r\n## Behavioral changes\r\n\r\n* Disallow conversion of python floating types to uint32/64 (matching behavior of other integer types) in `tf.constant`.\r\n* Make the `gain` argument of convolutional orthogonal initializers (`convolutional_delta_orthogonal`, `convolutional_orthogonal_1D`, `convolutional_orthogonal_2D`, `convolutional_orthogonal_3D`) have consistent behavior with the `tf.initializers.orthogonal` initializer, i.e. scale the output l2-norm by `gain` and NOT by `sqrt(gain)`. (Note that these functions are currently in `tf.contrib` which is not guaranteed backward compatible).\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Documentation\r\n  * Update the doc with the details about the rounding mode used in quantize_and_dequantize_v2.\r\n  * Clarify that tensorflow::port::InitMain() _should_ be called before using the TensorFlow library.  Programs failing to do this are not portable to all platforms.\r\n* Deprecations and Symbol renames.\r\n   * Removing deprecations for the following endpoints: `tf.acos`, `tf.acosh`, `tf.add`, `tf.as_string`, `tf.asin`, `tf.asinh`, `tf.atan`, `tf.atan2`, `tf.atanh`, `tf.cos`, `tf.cosh`, `tf.equal`, `tf.exp`, `tf.floor`, `tf.greater`, `tf.greater_equal`, `tf.less`, `tf.less_equal`, `tf.log`, `tf.logp1`, `tf.logical_and`, `tf.logical_not`, `tf.logical_or`, `tf.maximum`, `tf.minimum`, `tf.not_equal`, `tf.sin`, `tf.sinh`, `tf.tan`\r\n  * Deprecate `tf.data.Dataset.shard`.\r\n  * Deprecate `saved_model.loader.load` which is replaced by `saved_model.load` and `saved_model.main_op`, which will be replaced by `saved_model.main_op` in V2.\r\n  * Deprecate tf.QUANTIZED_DTYPES. The official new symbol is tf.dtypes.QUANTIZED_DTYPES.\r\n  * Update sklearn imports for deprecated packages.\r\n  * Deprecate `Variable.count_up_to` and `tf.count_up_to` in favor of `Dataset.range`.\r\n  * Export `confusion_matrix` op as `tf.math.confusion_matrix` instead of `tf.train.confusion_matrix`.\r\n  * Add `tf.dtypes.` endpoint for every constant in dtypes.py; moving endpoints in versions.py to corresponding endpoints in `tf.sysconfig.` and `tf.version.`; moving all constants under `tf.saved_model` submodules to `tf.saved_model` module. New endpoints are added in V1 and V2 but existing endpoint removals are only applied in V2.\r\n  * Deprecates behavior where device assignment overrides collocation constraints inside a collocation context manager.\r\n* Keras & Python API\r\n  * Add to Keras functionality analogous to `tf.register_tensor_conversion_function`.\r\n  * Subclassed Keras models can now be saved through `tf.contrib.saved_model.save_keras_model`.\r\n  * `LinearOperator.matmul` now returns a new `LinearOperator`.\r\n* New ops and improved op functionality\r\n  * Add a Nearest Neighbor Resize op.\r\n  * Add an `ignore_unknown` argument to `parse_values` which suppresses ValueError for unknown hyperparameter types. Such * Add `tf.linalg.matvec` convenience function.\r\n  * `tf.einsum()`raises `ValueError` for unsupported equations like `\"ii->\"`.\r\n  * Add DCT-I and IDCT-I in `tf.signal.dct` and `tf.signal.idct`.\r\n  * Add LU decomposition op.\r\n  * Add quantile loss to gradient boosted trees in estimator.\r\n  * Add `round_mode` to `QuantizeAndDequantizeV2` op to select rounding algorithm.\r\n  * Add `unicode_encode`, `unicode_decode`, `unicode_decode_with_offsets`, `unicode_split`, `unicode_split_with_offset`, and `unicode_transcode` ops. Amongst other things, this Op adds the ability to encode, decode, and transcode a variety of input text encoding formats into the main Unicode encodings (UTF-8, UTF-16-BE, UTF-32-BE)\r\n  * Add \"unit\" attribute to the substr op, which allows obtaining the substring of a string containing unicode characters.\r\n  * Broadcasting support for Ragged Tensors.\r\n  * `SpaceToDepth` supports uint8 data type.\r\n  * Support multi-label quantile regression in estimator.\r\n  * We now use \"div\" as the default partition_strategy in `tf.nn.safe_embedding_lookup_sparse`, `tf.nn.sampled_softmax` and `tf.nn.nce_loss`.\r\n  hyperparameter are ignored.\r\n* Performance\r\n  * Improve performance of GPU cumsum/cumprod by up to 300x.\r\n  * Added support for weight decay in most TPU embedding optimizers, including AdamW and MomentumW.\r\n* TensorFlow 2.0 Development\r\n  * Add a command line tool to convert to TF2.0, tf_upgrade_v2\r\n  * Merge `tf.spectral` into `tf.signal` for TensorFlow 2.0.\r\n  * Change the default recurrent activation function for LSTM from 'hard_sigmoid' to 'sigmoid' in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default LSTM will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with LSTM(recurrent_activation='hard_sigmoid') to fallback to 1.x behavior.\r\n* TensorFlow Lite\r\n  * Move from `tensorflow/contrib/lite` to `tensorflow/lite`.\r\n  * Add experimental Java API for injecting TensorFlow Lite delegates\r\n  * Add support for strings in TensorFlow Lite Java API.\r\n* `tf.contrib`:\r\n  * Add Apache Ignite Filesystem plugin to support accessing Apache IGFS.\r\n  * Dropout now takes `rate` argument, `keep_prob` is deprecated.\r\n  * Estimator occurrences references `tf.contrib.estimator` were changed to `tf.estimator`:\r\n    * `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n    * `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n    * `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n    * `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n    * `tf.contrib.estimator.InMemoryEvaluatorHook` and tf.estimator.experimental.InMemoryEvaluatorHook`.\r\n    * `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`.\r\n  * Expose `tf.distribute.Strategy as the new name for tf.contrib.distribute.DistributionStrategy.\r\n  * Migrate linear optimizer from contrib to core.\r\n  * Move `tf.contrib.signal` to `tf.signal` (preserving aliases in tf.contrib.signal).\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n* tf.data:\r\n  * Add `tf.data.experimental.StatsOptions()`, to configure options to collect statistics from `tf.data.Dataset` pipeline using `StatsAggregator`. Add nested option, `experimental_stats` (which takes a `tf.data.experimen tal.StatsOptions` object), to `tf.data.Options`. Deprecates `tf.data.experimental.set_stats_agregator`.\r\n  * Performance optimizations:\r\n    * Add `tf.data.experimental.OptimizationOptions()`, to configure options to enable `tf.data` performance optimizations. Add nested option, `experimental_optimization` (which takes a `tf.data.experimental.OptimizationOptions` object), to `tf.data.Options`. Remove performance optimization options from `tf.data.Options`, and add them under `tf.data.experimental.OptimizationOptions` instead.\r\n    * Enable `map_and_batch_fusion` and `noop_elimination` optimizations by default. They can be disabled by configuring `tf.data.experimental.OptimizationOptions` to set `map_and_batch = False` or `noop_elimination = False` respectively. To disable all default optimizations, set `apply_default_optimizations = False`.\r\n    * Support parallel map in `map_and_filter_fusion`.\r\n    * Disable static optimizations for input pipelines that use non-resource `tf.Variable`s.\r\n  * Add NUMA-aware MapAndBatch dataset.\r\n  * Deprecate `tf.data.Dataset.make_one_shot_iterator()` in V1, removed it from V2, and added tf.compat.v1.data.make_one_shot_iterator()`.\r\n  * Deprecate `tf.data.Dataset.make_initializable_iterator()` in V1, removed it from V2, and added `tf.compat.v1.data.make_initializable_iterator()`.\r\n  * Enable nested dataset support in core `tf.data` transformations.\r\n  * For `tf.data.Dataset` implementers: Added `tf.data.Dataset._element_structured property` to replace `Dataset.output_{types,shapes,classes}`.\r\n* Toolchains\r\n  * Fixed OpenSSL compatibility by avoiding `EVP_MD_CTX_destroy`.\r\n  * Added bounds checking to printing deprecation warnings.\r\n  * Upgraded CUDA dependency to 10.0\r\n  * To build with Android NDK r14b, add \"#include <linux/compiler.h>\" to android-ndk-r14b/platforms/android-14/arch-*/usr/include/linux/futex.h\r\n  * Removed `:android_tensorflow_lib_selective_registration*` targets, use `:android_tensorflow_lib_lite*` targets instead.\r\n* XLA\r\n  * Move `RoundToEven` function to xla/client/lib/math.h.\r\n  * A new environment variable `TF_XLA_DEBUG_OPTIONS_PASSTHROUGH` set to \"1\" or \"true\" allows the debug options passed within an XRTCompile op to be passed directly to the XLA compilation backend. If such variable is not set (service side), only a restricted set will be passed through.\r\n  * Allow the XRTCompile op to return the ProgramShape resulted form the XLA compilation as a second return argument.\r\n  * XLA HLO graphs can now be rendered as SVG/HTML.\r\n* Estimator\r\n  * Replace all occurences of `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n  * Replace all occurences of `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n  * Replace all occurrences of `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n  * Update `regression_head` to the new Head API for Canned Estimator V2.\r\n  * Switch `multi_class_head` to Head API for Canned Estimator V2.\r\n  * Replace all occurences of `tf.contrib.estimator.InMemoryEvaluatorHook` and `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.InMemoryEvaluatorHook` and `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`\r\n  * Migrate linear optimizer from contrib to core.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbhinav Upadhyay, Ag Ramesh, akikaaa, Alexis Louis, Anders Huss, Andreas Madsen, Andrew Banchich, Andy Craze, Anton Dmitriev, Artem Malykh, Avijit-Nervana, Balint Cristian, Benjamin Tan Wei Hao, Bhavani Subramanian, Brendan Finan, Brian Nemsick, Bryan Cutler, By Shen, Cao Zongyan, Castiel, Chris Antaki, Christian Goll, Cibifang, Clayne Robison, Codrut Grosu, Cong Xu, Dalmo Cirne, Daniel Hunter, Dougal J. Sutherland, Edvard Fagerholm, EFanZh, Erik Smistad, Evgeniy Polyakov, Feiyang Chen, franklin5, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Gitea, Grzegorz George Pawelczak, Guozhong Zhuang, himkt, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), HuiyangFei, hyunyoung, Isaac Burbank, jackonan, Jacky Ko, Jason Furmanek, Jason Zaman, Javier Luraschi, Jiang,Zhoulong, joaak, John Lin, Jonathan Wyatt Hoech, josephyearsley, Josh Gordon, Julian Niedermeier, Karl Lessard, Keno Fischer, lanhin, Leon Graser, leondgarse, Li, Guizi, Li, Yiqiang, lxl910915, Mahmoud Abuzaina, manhyuk, Marcela Morales Quispe, margaretmz, Matt Conley, Max Pumperla, mbhuiyan, mdfaijul, Meng, Peng, Michael, Michael Gielda, mrTsjolder, Muhammad Wildan, neargye, Nehal J Wani, NEWPLAN, Niranjan Hasabnis, Nutti, olicht, Pan Daoxin, Pedro Monreal, Peng Yu, pillarpond, Pooya Davoodi, qiezi, Rholais Lii, Richard Yu, Rin Arakaki, Roger Iyengar, sahilbadyal, Sami Kama, Sandip Giri, Scott Leishman, Serge Panev, Seunghoon Park, Shafi Dayatar, shengfuintel, Shimin Guo, Siju, silent567, Stefan Dyulgerov, steven, Tao Wei, Thor Johnsen, Tingbo Lu, tomguluson92, Tongxuan Liu, Trevor Morris, Ubuntu, Vadim Borisov, vanderliang, wangsiyu, Wen Yun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaniv Blumenfeld, Yash Gaurkar, Yicheng Fan, Yong Tang, Yongjoon Lee, Yuan (Terry) Tang, Yuxin Wu, zldrobit\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15140647", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/15140647/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/15140647/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.13.0-rc0", "id": 15140647, "node_id": "MDc6UmVsZWFzZTE1MTQwNjQ3", "tag_name": "v1.13.0-rc0", "target_commitish": "r1.13", "name": "TensorFlow 1.13.0-rc0", "draft": false, "author": {"login": "aselle", "id": 326106, "node_id": "MDQ6VXNlcjMyNjEwNg==", "avatar_url": "https://avatars1.githubusercontent.com/u/326106?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aselle", "html_url": "https://github.com/aselle", "followers_url": "https://api.github.com/users/aselle/followers", "following_url": "https://api.github.com/users/aselle/following{/other_user}", "gists_url": "https://api.github.com/users/aselle/gists{/gist_id}", "starred_url": "https://api.github.com/users/aselle/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aselle/subscriptions", "organizations_url": "https://api.github.com/users/aselle/orgs", "repos_url": "https://api.github.com/users/aselle/repos", "events_url": "https://api.github.com/users/aselle/events{/privacy}", "received_events_url": "https://api.github.com/users/aselle/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2019-01-23T10:05:14Z", "published_at": "2019-01-23T17:55:16Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.13.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.13.0-rc0", "body": "# Release 1.13.0\r\n\r\n## Major Features and Improvements\r\n\r\n* TensorFlow Lite has moved from contrib to core. This means that Python modules are under `tf.lite` and source code is now under `tensorflow/lite` rather than `tensorflow/contrib/lite`.\r\n* TensorFlow GPU binaries are now built against CUDA 10.\r\n* Moved NCCL to core.\r\n\r\n## Behavioral changes\r\n\r\n* Disallow conversion of python floating types to uint32/64 (matching behavior of other integer types) in `tf.constant`.\r\n* Make the `gain` argument of convolutional orthogonal initializers (`convolutional_delta_orthogonal`, `convolutional_orthogonal_1D`, `convolutional_orthogonal_2D`, `convolutional_orthogonal_3D`) have consistent behavior with the `tf.initializers.orthogonal` initializer, i.e. scale the output l2-norm by `gain` and NOT by `sqrt(gain)`. (Note that these functions are currently in `tf.contrib` which is not guaranteed backward compatible).\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* Documentation\r\n  * Update the doc with the details about the rounding mode used in quantize_and_dequantize_v2.\r\n  * Clarify that tensorflow::port::InitMain() _should_ be called before using the TensorFlow library.  Programs failing to do this are not portable to all platforms.\r\n* Deprecations and Symbol renames.\r\n   * Removing deprecations for the following endpoints: `tf.acos`, `tf.acosh`, `tf.add`, `tf.as_string`, `tf.asin`, `tf.asinh`, `tf.atan, `tf.atan2`, `tf.atanh`, `tf.cos`, `tf.cosh`, `tf.equal`, `tf.exp`, `tf.floor`, `tf.greater`, `tf.greater_equal`, `tf.less`, `tf.less_equal`, `tf.log`, `tf.logp1`, `tf.logical_and`, `tf.logical_not`, `tf.logical_or`, `tf.maximum`, `tf.minimum`, `tf.not_equal`, `tf.sin`, `tf.sinh`, `tf.tan`\r\n  * Deprecate `tf.data.Dataset.shard`.\r\n  * Deprecate `saved_model.loader.load` which is replaced by `saved_model.load` and `saved_model.main_op`, which will be replaced by `saved_model.main_op` in V2.\r\n  * Deprecate tf.QUANTIZED_DTYPES. The official new symbol is tf.dtypes.QUANTIZED_DTYPES.\r\n  * Update sklearn imports for deprecated packages.\r\n  * Deprecate `Variable.count_up_to` and `tf.count_up_to` in favor of `Dataset.range`.\r\n  * Export `confusion_matrix` op as `tf.math.confusion_matrix` instead of `tf.train.confusion_matrix`.\r\n  * Add `tf.dtypes.` endpoint for every constant in dtypes.py; moving endpoints in versions.py to corresponding endpoints in `tf.sysconfig.` and `tf.version.`; moving all constants under `tf.saved_model` submodules to `tf.saved_model` module. New endpoints are added in V1 and V2 but existing endpoint removals are only applied in V2.\r\n  * Deprecates behavior where device assignment overrides collocation constraints inside a collocation context manager.\r\n* Keras & Python API\r\n  * Add to Keras functionality analogous to `tf.register_tensor_conversion_function`.\r\n  * Subclassed Keras models can now be saved through `tf.contrib.saved_model.save_keras_model`.\r\n  * `LinearOperator.matmul` now returns a new `LinearOperator`.\r\n* New ops and improved op functionality\r\n  * Add a Nearest Neighbor Resize op.\r\n  * Add an `ignore_unknown` argument to `parse_values` which suppresses ValueError for unknown hyperparameter types. Such * Add `tf.linalg.matvec` convenience function.\r\n  * `tf.einsum()`raises `ValueError` for unsupported equations like `\"ii->\"`.\r\n  * Add DCT-I and IDCT-I in `tf.signal.dct` and `tf.signal.idct`.\r\n  * Add LU decomposition op.\r\n  * Add quantile loss to gradient boosted trees in estimator.\r\n  * Add `round_mode` to `QuantizeAndDequantizeV2` op to select rounding algorithm.\r\n  * Add `unicode_encode`, `unicode_decode`, `unicode_decode_with_offsets`, `unicode_split`, `unicode_split_with_offset`, and `unicode_transcode` ops. Amongst other things, this Op adds the ability to encode, decode, and transcode a variety of input text encoding formats into the main Unicode encodings (UTF-8, UTF-16-BE, UTF-32-BE)\r\n  * Add \"unit\" attribute to the substr op, which allows obtaining the substring of a string containing unicode characters.\r\n  * Broadcasting support for Ragged Tensors.\r\n  * `SpaceToDepth` supports uint8 data type.\r\n  * Support multi-label quantile regression in estimator.\r\n  * We now use \"div\" as the default partition_strategy in `tf.nn.safe_embedding_lookup_sparse`, `tf.nn.sampled_softmax` and `tf.nn.nce_loss`.\r\n  hyperparameter are ignored.\r\n* Performance\r\n  * Improve performance of GPU cumsum/cumprod by up to 300x.\r\n  * Added support for weight decay in most TPU embedding optimizers, including AdamW and MomentumW.\r\n* TensorFlow 2.0 Development\r\n  * Add a command line tool to convert to TF2.0, tf_upgrade_v2\r\n  * Merge `tf.spectral` into `tf.signal` for TensorFlow 2.0.\r\n  * Change the default recurrent activation function for LSTM from 'hard_sigmoid' to 'sigmoid' in 2.0. Historically recurrent activation is 'hard_sigmoid' since it is fast than 'sigmoid'. With new unified backend between CPU and GPU mode, since the CuDNN kernel is using sigmoid, we change the default for CPU mode to sigmoid as well. With that, the default LSTM will be compatible with both CPU and GPU kernel. This will enable user with GPU to use CuDNN kernel by default and get a 10x performance boost in training. Note that this is checkpoint breaking change. If user want to use their 1.x pre-trained checkpoint, please construct the layer with LSTM(recurrent_activation='hard_sigmoid') to fallback to 1.x behavior.\r\n* TensorFlow Lite\r\n  * Move from `tensorflow/contrib/lite` to `tensorflow/lite`.\r\n  * Add experimental Java API for injecting TensorFlow Lite delegates\r\n  * Add support for strings in TensorFlow Lite Java API.\r\n* `tf.contrib`:\r\n  * Add Apache Ignite Filesystem plugin to support accessing Apache IGFS.\r\n  * Dropout now takes `rate` argument, `keep_prob` is deprecated.\r\n  * Estimator occurrences references `tf.contrib.estimator` were changed to `tf.estimator`:\r\n    * `tf.contrib.estimator.BaselineEstimator` with `tf.estimator.BaselineEstimator`\r\n    * `tf.contrib.estimator.DNNLinearCombinedEstimator` with `tf.estimator.DNNLinearCombinedEstimator`\r\n    * `tf.contrib.estimator.DNNEstimator` with `tf.estimator.DNNEstimator`\r\n    * `tf.contrib.estimator.LinearEstimator` with `tf.estimator.LinearEstimator`\r\n    * `tf.contrib.estimator.InMemoryEvaluatorHook` and tf.estimator.experimental.InMemoryEvaluatorHook`.\r\n    * `tf.contrib.estimator.make_stop_at_checkpoint_step_hook` with `tf.estimator.experimental.make_stop_at_checkpoint_step_hook`.\r\n  * Expose `tf.distribute.Strategy as the new name for tf.contrib.distribute.DistributionStrategy.\r\n  * Migrate linear optimizer from contrib to core.\r\n  * Move `tf.contrib.signal` to `tf.signal` (preserving aliases in tf.contrib.signal).\r\n  * Users of `tf.contrib.estimator.export_all_saved_models` and related should switch to `tf.estimator.Estimator.experimental_export_all_saved_models`.\r\n* tf.data:\r\n  * Add `tf.data.experimental.StatsOptions()`, to configure options to collect statistics from `tf.data.Dataset` pipeline using dStatsAggregatord. Adds option \"experimental_stats\" to `tf.data.Options` which takes `tf.data.experimental.StatsOptions` object. Deprecates `tf.data.experimental.set_stats_agregator`.\r\n  * NUMA-aware MapAndBatch dataset.\r\n  * Parallel map and filter fusion.\r\n  * Deprecate `tf.data.Dataset.make_one_shot_iterator()` in V1, removed it from V2, and added tf.compat.v1.data.make_one_shot_iterator()`.\r\n  * Deprecate `tf.data.Dataset.make_initializable_iterator()` in V1, removed it from V2, and added `tf.compat.v1.data.make_initializable_iterator()`.\r\n  * Enable nested dataset support in core `tf.data` transformations.\r\n  * For `tf.data.Dataset` implementers: Added `tf.data.Dataset._element_structured property` to replace `Dataset.output_{types,shapes,classes}`.\r\n* Toolchains\r\n  * Fixed OpenSSL compatibility by avoiding `EVP_MD_CTX_destroy`.\r\n  * Added bounds checking to printing deprecation warnings.\r\n  * Upgraded CUDA dependency to 10.0\r\n  * To build with Android NDK r14b, add \"#include <linux/compiler.h>\" to android-ndk-r14b/platforms/android-14/arch-*/usr/include/linux/futex.h\r\n  * Removed `:android_tensorflow_lib_selective_registration*` targets, use `:android_tensorflow_lib_lite*` targets instead.\r\n* XLA\r\n  * Move `RoundToEven` function to xla/client/lib/math.h.\r\n  * A new environment variable `TF_XLA_DEBUG_OPTIONS_PASSTHROUGH` set to \"1\" or \"true\" allows the debug options passed within an XRTCompile op to be passed directly to the XLA compilation backend. If such variable is not set (service side), only a restricted set will be passed through.\r\n  * Allow the XRTCompile op to return the ProgramShape resulted form the XLA compilation as a second return argument.\r\n  * XLA HLO graphs can now be rendered as SVG/HTML.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbhinav Upadhyay, Ag Ramesh, akikaaa, Alexis Louis, Anders Huss, Andreas Madsen, Andrew Banchich, Andy Craze, Anton Dmitriev, Artem Malykh, Avijit-Nervana, Balint Cristian, Benjamin Tan Wei Hao, Bhavani Subramanian, Brendan Finan, Brian Nemsick, Bryan Cutler, By Shen, Cao Zongyan, Castiel, Chris Antaki, Christian Goll, Cibifang, Clayne Robison, Codrut Grosu, Cong Xu, Dalmo Cirne, Daniel Hunter, Dougal J. Sutherland, Edvard Fagerholm, EFanZh, Erik Smistad, Evgeniy Polyakov, Feiyang Chen, franklin5, Fred Reiss, Gautam, gehring, Geoffrey Irving, George Sterpu, Gitea, Grzegorz George Pawelczak, Guozhong Zhuang, himkt, Hoeseong Kim, Huan Li (\u674e\u5353\u6853), HuiyangFei, hyunyoung, Isaac Burbank, jackonan, Jacky Ko, Jason Furmanek, Jason Zaman, Javier Luraschi, Jiang,Zhoulong, joaak, John Lin, Jonathan Wyatt Hoech, josephyearsley, Josh Gordon, Julian Niedermeier, Karl Lessard, Keno Fischer, lanhin, Leon Graser, leondgarse, Li, Guizi, Li, Yiqiang, lxl910915, Mahmoud Abuzaina, manhyuk, Marcela Morales Quispe, margaretmz, Matt Conley, Max Pumperla, mbhuiyan, mdfaijul, Meng, Peng, Michael, Michael Gielda, mrTsjolder, Muhammad Wildan, neargye, Nehal J Wani, NEWPLAN, Niranjan Hasabnis, Nutti, olicht, Pan Daoxin, Pedro Monreal, Peng Yu, pillarpond, Pooya Davoodi, qiezi, Rholais Lii, Richard Yu, Rin Arakaki, Roger Iyengar, sahilbadyal, Sami Kama, Sandip Giri, Scott Leishman, Serge Panev, Seunghoon Park, Shafi Dayatar, shengfuintel, Shimin Guo, Siju, silent567, Stefan Dyulgerov, steven, Tao Wei, Thor Johnsen, Tingbo Lu, tomguluson92, Tongxuan Liu, Trevor Morris, Ubuntu, Vadim Borisov, vanderliang, wangsiyu, Wen Yun, Wen-Heng (Jack) Chung, wenxizhu, William D. Irons, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaniv Blumenfeld, Yash Gaurkar, Yicheng Fan, Yong Tang, Yongjoon Lee, Yuan (Terry) Tang, Yuxin Wu, zldrobit\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13841904", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13841904/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13841904/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.0", "id": 13841904, "node_id": "MDc6UmVsZWFzZTEzODQxOTA0", "tag_name": "v1.12.0", "target_commitish": "r1.12", "name": "TensorFlow 1.12.0", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-11-02T01:35:10Z", "published_at": "2018-11-05T23:30:45Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.0", "body": "# Release 1.12.0\r\n                                                                          \r\n## Major Features and Improvements                                                 \r\n* Keras models can now be directly exported to the SavedModel format(`tf.contrib.saved_model.save_keras_model()`) and used with Tensorflow Serving.\r\n* Keras models now support evaluating with a `tf.data.Dataset`.                    \r\n* TensorFlow binaries are built with XLA support linked in by default.\r\n* Ignite Dataset added to contrib/ignite that allows to work with Apache Ignite.\r\n                                                                                   \r\n## Bug Fixes and Other Changes                                                     \r\n                                                                                   \r\n* `tf.data`:                                                                         \r\n  * `tf.data` users can now represent, get, and set options of TensorFlow input pipelines using `tf.data.Options()`, `tf.data.Dataset.options()`, and `tf.data.Dataset.with_options()` respectively.\r\n  * New `tf.data.Dataset.reduce()` API allows users to reduce a finite dataset to a single element using a user-provided reduce function.\r\n  * New `tf.data.Dataset.window()` API allows users to create finite windows of input dataset; when combined with the `tf.data.Dataset.reduce()` API, this allows users to implement customized batching.\r\n  * All C++ code moves to the `tensorflow::data` namespace.                        \r\n  * Add support for `num_parallel_calls` to `tf.data.Dataset.interleave`.          \r\n* `tf.contrib`:                                                                    \r\n  * Remove `tf.contrib.linalg`. `tf.linalg` should be used instead.                \r\n  * Replace any calls to `tf.contrib.get_signature_def_by_key(metagraph_def, signature_def_key)` with `meta_graph_def.signature_def[signature_def_key]`. Catching a ValueError exception thrown by `tf.contrib.get_signature_def_by_key` should be replaced by catching a KeyError exception.\r\n* `tf.contrib.data`                                                                \r\n  * Deprecate, and replace by tf.data.experimental.                                \r\n* Other:                                                                           \r\n  * Improved XLA stability and performance.\r\n  * Fix single replica TensorBoard summary stats in Cloud ML Engine.\r\n  * TPUEstimator: Initialize dataset iterators in parallel.\r\n  * Keras on TPU model quality and bug fixes.\r\n  * Instead of jemalloc, revert back to using system malloc since it simplifies build and has comparable performance.\r\n  * Remove integer types from `tf.nn.softplus` and `tf.nn.softsign` OpDefs. This is a bugfix; these ops were never meant to support integers.\r\n  * Allow subslicing Tensors with a single dimension.                              \r\n  * Add option to calculate string length in Unicode characters                    \r\n  * Add functionality to SubSlice a tensor.                                        \r\n  * Add searchsorted (ie lower/upper_bound) op.                                    \r\n  * Add model explainability to Boosted Trees.                                     \r\n  * Support negative positions for tf.substr                                       \r\n  * There was previously a bug in the bijector_impl where the _reduce_jacobian_det_over_event does not handle scalar ILDJ implementations properly.\r\n  * In tf eager execution, allow re-entering a GradientTape context                \r\n  * Add tf_api_version flag. If --define=tf_api_version=2 flag is passed in, then bazel will build TensorFlow API version 2.0. Note that TensorFlow 2.0 is under active development and has no guarantees at this point.\r\n  * Add additional compression options to TfRecordWriter                           \r\n  * Performance improvements for regex full match operations.                      \r\n  * Replace `tf.GraphKeys.VARIABLES` with `tf.GraphKeys.GLOBAL_VARIABLES`            \r\n  * Remove unused dynamic learning rate support.                                   \r\n                                                                                   \r\n## Thanks to our Contributors                                                      \r\n                                                                                   \r\nThis release contains contributions from many people at Google, as well as: \r\n       \r\n(David) Siu-Kei Muk, Ag Ramesh, Anton Dmitriev, Artem Sobolev, Avijit-Nervana, Bairen Yi, Bruno Goncalves, By Shen, candy.dc, Cheng Chen, Clayne Robison, coder3101, Dao Zhang, Elms, Fei Hu, feiquan, Geoffrey Irving, Guozhong Zhuang, hellcom, Hoeseong Kim, imsheridan, Jason Furmanek, Jason Zaman, Jenny Sahng, jiefangxuanyan, Johannes Bannhofer, Jonathan Homer, Koan-Sin Tan, kouml, Loo Rong Jie, Lukas Geiger, manipopopo, Ming Li, Moritz Kr\u00f6Ger, Naurril, Niranjan Hasabnis, Pan Daoxin, Peng Yu, pengwa, rasmi, Roger Xin, Roland Fernandez, Sami Kama, Samuel Matzek, Sangjung Woo, Sergei Lebedev, Sergii Khomenko, shaohua, Shaohua Zhang, Shujian2015, Sunitha Kambhampati, tomguluson92, Vin\u00edCius Camargo, wangsiyu, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Xin Jin, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yash Katariya, Yong Tang, \u5728\u539f\u4f50\u4e3a"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13681612", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13681612/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13681612/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.0-rc2", "id": 13681612, "node_id": "MDc6UmVsZWFzZTEzNjgxNjEy", "tag_name": "v1.12.0-rc2", "target_commitish": "r1.12", "name": "TensorFlow 1.12.0-rc2", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-10-26T03:26:00Z", "published_at": "2018-10-26T19:06:17Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.0-rc2", "body": "# Release 1.12.0-rc2\r\n\r\n## Differences from 1.12.0-rc1\r\n* Improved XLA stability and performance.\r\n* Fix single replica TensorBoard summary stats in Cloud ML Engine.\r\n\r\n## Differences from 1.12.0-rc0     \r\n* Keras on TPU model quality and bug fixes.\r\n* TPUEstimator: Initialize dataset iterators in parallel.                                                      \r\n                                                                                   \r\n## Major Features and Improvements                                                 \r\n* Keras models can now be directly exported to the SavedModel format(`tf.contrib.saved_model.save_keras_model()`) and used with Tensorflow Serving.\r\n* Keras models now support evaluating with a `tf.data.Dataset`.                    \r\n* TensorFlow binaries are built with XLA support linked in by default.\r\n* Ignite Dataset added to contrib/ignite that allows to work with Apache Ignite.      \r\n                                                                                   \r\n## Bug Fixes and Other Changes                                                     \r\n                                                                                   \r\n* `tf.data`:                                                                         \r\n  * `tf.data` users can now represent, get, and set options of TensorFlow input pipelines using `tf.data.Options()`, `tf.data.Dataset.options()`, and `tf.data.Dataset.with_options()` respectively.\r\n  * New `tf.data.Dataset.reduce()` API allows users to reduce a finite dataset to a single element using a user-provided reduce function.\r\n  * New `tf.data.Dataset.window()` API allows users to create finite windows of input dataset; when combined with the `tf.data.Dataset.reduce()` API, this allows users to implement customized batching.\r\n  * All C++ code moves to the `tensorflow::data` namespace.                        \r\n  * Add support for `num_parallel_calls` to `tf.data.Dataset.interleave`.          \r\n* `tf.contrib`:                                                                    \r\n  * Remove `tf.contrib.linalg`. `tf.linalg` should be used instead.                \r\n  * Replace any calls to `tf.contrib.get_signature_def_by_key(metagraph_def, signature_def_key)` with `meta_graph_def.signature_def[signature_def_key]`. Catching a ValueError exception thrown by `tf.contrib.get_signature_def_by_key` should be replaced by catching a KeyError exception.\r\n* `tf.contrib.data`                                                                \r\n  * Deprecate, and replace by tf.data.experimental.                                \r\n* Other:                                                                           \r\n  * Instead of jemalloc, revert back to using system malloc since it simplifies build and has comparable performance.\r\n  * Remove integer types from `tf.nn.softplus` and `tf.nn.softsign` OpDefs. This is a bugfix; these ops were never meant to support integers.\r\n  * Allow subslicing Tensors with a single dimension.                              \r\n  * Add option to calculate string length in Unicode characters                    \r\n  * Add functionality to SubSlice a tensor.                                        \r\n  * Add searchsorted (ie lower/upper_bound) op.                                    \r\n  * Add model explainability to Boosted Trees.                                     \r\n  * Support negative positions for tf.substr                                       \r\n  * There was previously a bug in the bijector_impl where the _reduce_jacobian_det_over_event does not handle scalar ILDJ implementations properly.\r\n  * In tf eager execution, allow re-entering a GradientTape context                \r\n  * Add tf_api_version flag. If --define=tf_api_version=2 flag is passed in, then bazel will build TensorFlow API version 2.0. Note that TensorFlow 2.0 is under active development and has no guarantees at this point.\r\n  * Add additional compression options to TfRecordWriter                           \r\n  * Performance improvements for regex full match operations.                      \r\n  * Replace `tf.GraphKeys.VARIABLES` with `tf.GraphKeys.GLOBAL_VARIABLES`            \r\n  * Remove unused dynamic learning rate support.                                   \r\n                                                                                   \r\n## Thanks to our Contributors                                                      \r\n                                                                                   \r\nThis release contains contributions from many people at Google, as well as: \r\n       \r\n(David) Siu-Kei Muk, Ag Ramesh, Anton Dmitriev, Artem Sobolev, Avijit-Nervana, Bairen Yi, Bruno Goncalves, By Shen, candy.dc, Cheng Chen, Clayne Robison, coder3101, Dao Zhang, Elms, Fei Hu, feiquan, Geoffrey Irving, Guozhong Zhuang, hellcom, Hoeseong Kim, imsheridan, Jason Furmanek, Jason Zaman, Jenny Sahng, jiefangxuanyan, Johannes Bannhofer, Jonathan Homer, Koan-Sin Tan, kouml, Loo Rong Jie, Lukas Geiger, manipopopo, Ming Li, Moritz Kr\u00f6Ger, Naurril, Niranjan Hasabnis, Pan Daoxin, Peng Yu, pengwa, rasmi, Roger Xin, Roland Fernandez, Sami Kama, Samuel Matzek, Sangjung Woo, Sergei Lebedev, Sergii Khomenko, shaohua, Shaohua Zhang, Shujian2015, Sunitha Kambhampati, tomguluson92, Vin\u00edCius Camargo, wangsiyu, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Xin Jin, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yash Katariya, Yong Tang, \u5728\u539f\u4f50\u4e3a"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13485630", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13485630/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13485630/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.0-rc1", "id": 13485630, "node_id": "MDc6UmVsZWFzZTEzNDg1NjMw", "tag_name": "v1.12.0-rc1", "target_commitish": "r1.12", "name": "TensorFlow 1.12.0-rc1", "draft": false, "author": {"login": "goldiegadde", "id": 43185254, "node_id": "MDQ6VXNlcjQzMTg1MjU0", "avatar_url": "https://avatars2.githubusercontent.com/u/43185254?v=4", "gravatar_id": "", "url": "https://api.github.com/users/goldiegadde", "html_url": "https://github.com/goldiegadde", "followers_url": "https://api.github.com/users/goldiegadde/followers", "following_url": "https://api.github.com/users/goldiegadde/following{/other_user}", "gists_url": "https://api.github.com/users/goldiegadde/gists{/gist_id}", "starred_url": "https://api.github.com/users/goldiegadde/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/goldiegadde/subscriptions", "organizations_url": "https://api.github.com/users/goldiegadde/orgs", "repos_url": "https://api.github.com/users/goldiegadde/repos", "events_url": "https://api.github.com/users/goldiegadde/events{/privacy}", "received_events_url": "https://api.github.com/users/goldiegadde/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-10-16T17:14:23Z", "published_at": "2018-10-17T18:45:24Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.0-rc1", "body": "# Release 1.12.0-rc1\r\n\r\n## Differences from 1.12.0-rc0     \r\n* Keras on TPU model quality and bug fixes.\r\n* TPUEstimator: Initialize dataset iterators in parallel.                                                      \r\n                                                                                   \r\n## Major Features and Improvements                                                 \r\n* Keras models can now be directly exported to the SavedModel format(`tf.contrib.saved_model.save_keras_model()`) and used with Tensorflow Serving.\r\n* Keras models now support evaluating with a `tf.data.Dataset`.                    \r\n* TensorFlow binaries are built with XLA support linked in by default.             \r\n                                                                                   \r\n## Bug Fixes and Other Changes                                                     \r\n                                                                                   \r\n* tf.data:                                                                         \r\n  * `tf.data` users can now represent, get, and set options of TensorFlow input pipelines using `tf.data.Options()`, `tf.data.Dataset.options()`, and `tf.data.Dataset.with_options()` respectively.\r\n  * New `tf.data.Dataset.reduce()` API allows users to reduce a finite dataset to a single element using a user-provided reduce function.\r\n  * New `tf.data.Dataset.window()` API allows users to create finite windows of input dataset; when combined with the `tf.data.Dataset.reduce()` API, this allows users to implement customized batching.\r\n  * All C++ code moves to the `tensorflow::data` namespace.                        \r\n  * Add support for `num_parallel_calls` to `tf.data.Dataset.interleave`.          \r\n* `tf.contrib`:                                                                    \r\n  * Remove `tf.contrib.linalg`. `tf.linalg` should be used instead.                \r\n  * Replace any calls to `tf.contrib.get_signature_def_by_key(metagraph_def, signature_def_key)` with `meta_graph_def.signature_def[signature_def_key]`. Catching a ValueError exception thrown by `tf.contrib.get_signature_def_by_key` should be replaced by catching a KeyError exception.\r\n* `tf.contrib.data`                                                                \r\n  * Deprecate, and replace by tf.data.experimental.                                \r\n* Other:                                                                           \r\n  * Instead of jemalloc, revert back to using system malloc since it simplifies build and has comparable performance.\r\n  * Remove integer types from `tf.nn.softplus` and `tf.nn.softsign` OpDefs. This is a bugfix; these ops were never meant to support integers.\r\n  * Allow subslicing Tensors with a single dimension.                              \r\n  * Add option to calculate string length in Unicode characters                    \r\n  * Add functionality to SubSlice a tensor.                                        \r\n  * Add searchsorted (ie lower/upper_bound) op.                                    \r\n  * Add model explainability to Boosted Trees.                                     \r\n  * Support negative positions for tf.substr                                       \r\n  * There was previously a bug in the bijector_impl where the _reduce_jacobian_det_over_event does not handle scalar ILDJ implementations properly.\r\n  * In tf eager execution, allow re-entering a GradientTape context                \r\n  * Add tf_api_version flag. If --define=tf_api_version=2 flag is passed in, then bazel will build TensorFlow API version 2.0. Note that TensorFlow 2.0 is under active development and has no guarantees at this point.\r\n  * Add additional compression options to TfRecordWriter                           \r\n  * Performance improvements for regex full match operations.                      \r\n  * Replace `tf.GraphKeys.VARIABLES` with `tf.GraphKeys.GLOBAL_VARIABLES`            \r\n  * Remove unused dynamic learning rate support.                                   \r\n                                                                                   \r\n## Thanks to our Contributors                                                      \r\n                                                                                   \r\nThis release contains contributions from many people at Google, as well as: \r\n       \r\n(David) Siu-Kei Muk, Ag Ramesh, Anton Dmitriev, Artem Sobolev, Avijit-Nervana, Bairen Yi, Bruno Goncalves, By Shen, candy.dc, Cheng Chen, Clayne Robison, coder3101, Dao Zhang, Elms, Fei Hu, feiquan, Geoffrey Irving, Guozhong Zhuang, hellcom, Hoeseong Kim, imsheridan, Jason Furmanek, Jason Zaman, Jenny Sahng, jiefangxuanyan, Johannes Bannhofer, Jonathan Homer, Koan-Sin Tan, kouml, Loo Rong Jie, Lukas Geiger, manipopopo, Ming Li, Moritz Kr\u00f6Ger, Naurril, Niranjan Hasabnis, Pan Daoxin, Peng Yu, pengwa, rasmi, Roger Xin, Roland Fernandez, Sami Kama, Samuel Matzek, Sangjung Woo, Sergei Lebedev, Sergii Khomenko, shaohua, Shaohua Zhang, Shujian2015, Sunitha Kambhampati, tomguluson92, Vin\u00edCius Camargo, wangsiyu, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Xin Jin, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yash Katariya, Yong Tang, \u5728\u539f\u4f50\u4e3a"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13340673", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13340673/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13340673/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.12.0-rc0", "id": 13340673, "node_id": "MDc6UmVsZWFzZTEzMzQwNjcz", "tag_name": "v1.12.0-rc0", "target_commitish": "r1.12", "name": "TensorFlow 1.12.0-rc0", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-10-08T18:36:57Z", "published_at": "2018-10-10T00:28:22Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.12.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.12.0-rc0", "body": "# Release 1.12.0\r\n\r\n## Major Features and Improvements\r\n* Keras models can now be directly exported to the SavedModel format(`tf.contrib.saved_model.save_keras_model()`) and used with Tensorflow Serving.\r\n* Keras models now support evaluating with a `tf.data.Dataset`.\r\n* TensorFlow binaries are built with XLA support linked in by default.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* tf.data:\r\n  * tf.data users can now represent, get, and set options of TensorFlow input pipelines using `tf.data.Options()`, `tf.data.Dataset.options()`, and `tf.data.Dataset.with_options()` respectively.\r\n  * New `tf.data.Dataset.reduce()` API allows users to reduce a finite dataset to a single element using a user-provided reduce function.\r\n  * New `tf.data.Dataset.window()` API allows users to create finite windows of input dataset; when combined with the `tf.data.Dataset.reduce()` API, this allows users to implement customized batching.\r\n  * All C++ code moves to the `tensorflow::data` namespace.\r\n  * Add support for `num_parallel_calls` to `tf.data.Dataset.interleave`.\r\n* `tf.contrib`:\r\n  * Remove `tf.contrib.linalg`. `tf.linalg` should be used instead.\r\n  * Replace any calls to `tf.contrib.get_signature_def_by_key(metagraph_def, signature_def_key)` with `meta_graph_def.signature_def[signature_def_key]`. Catching a ValueError exception thrown by `tf.contrib.get_signature_def_by_key` should be replaced by catching a KeyError exception.\r\n* `tf.contrib.data`\r\n  * Deprecate, and replace by tf.data.experimental.\r\n* Other:\r\n  * Instead of jemalloc, revert back to using system malloc since it simplifies build and has comparable performance.\r\n  * Remove integer types from `tf.nn.softplus` and `tf.nn.softsign` OpDefs. This is a bugfix; these ops were never meant to support integers.\r\n  * Allow subslicing Tensors with a single dimension.\r\n  * Add option to calculate string length in Unicode characters\r\n  * Add functionality to SubSlice a tensor.\r\n  * Add searchsorted (ie lower/upper_bound) op.\r\n  * Add model explainability to Boosted Trees.\r\n  * Support negative positions for tf.substr\r\n  * There was previously a bug in the bijector_impl where the _reduce_jacobian_det_over_event does not handle scalar ILDJ implementations properly.\r\n  * In tf eager execution, allow re-entering a GradientTape context\r\n  * Add tf_api_version flag. If --define=tf_api_version=2 flag is passed in, then bazel will build TensorFlow API version 2.0. Note that TensorFlow 2.0 is under active development and has no guarantees at this point.\r\n  * Add additional compression options to TfRecordWriter\r\n  * Performance improvements for regex full match operations.\r\n  * Replace tf.GraphKeys.VARIABLES with `tf.GraphKeys.GLOBAL_VARIABLES`\r\n  * Remove unused dynamic learning rate support.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n(David) Siu-Kei Muk, Ag Ramesh, Anton Dmitriev, Artem Sobolev, Avijit-Nervana, Bairen Yi, Bruno Goncalves, By Shen, candy.dc, Cheng Chen, Clayne Robison, coder3101, Dao Zhang, Elms, Fei Hu, feiquan, Geoffrey Irving, Guozhong Zhuang, hellcom, Hoeseong Kim, imsheridan, Jason Furmanek, Jason Zaman, Jenny Sahng, jiefangxuanyan, Johannes Bannhofer, Jonathan Homer, Koan-Sin Tan, kouml, Loo Rong Jie, Lukas Geiger, manipopopo, Ming Li, Moritz Kr\u00f6Ger, Naurril, Niranjan Hasabnis, Pan Daoxin, Peng Yu, pengwa, rasmi, Roger Xin, Roland Fernandez, Sami Kama, Samuel Matzek, Sangjung Woo, Sergei Lebedev, Sergii Khomenko, shaohua, Shaohua Zhang, Shujian2015, Sunitha Kambhampati, tomguluson92, Vin\u00edCius Camargo, wangsiyu, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Xin Jin, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yash Katariya, Yong Tang, \u5728\u539f\u4f50\u4e3a\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13134715", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13134715/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13134715/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0", "id": 13134715, "node_id": "MDc6UmVsZWFzZTEzMTM0NzE1", "tag_name": "v1.11.0", "target_commitish": "r1.11", "name": "TensorFlow 1.11.0", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-09-25T21:50:52Z", "published_at": "2018-09-27T18:03:24Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.11.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.11.0", "body": "# Release 1.11.0\r\n\r\n## Major Features and Improvements\r\n\r\n* Nvidia GPU:\r\n  * Prebuilt binaries are now (as of TensorFlow 1.11) built against cuDNN 7.2 and TensorRT 4. See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support)\r\n* Google Cloud TPU:\r\n  * Experimental tf.data integration for Keras on Google Cloud TPUs.\r\n  * Experimental / preview support for eager execution on Google Cloud TPUs.\r\n* DistributionStrategy:\r\n  * Add multi-GPU DistributionStrategy support in tf.keras. Users can now use `fit`, `evaluate` and `predict` to distribute their model on multiple GPUs.\r\n  * Add multi-worker DistributionStrategy and standalone client support in Estimator. See [README] (https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/distribute) for more details.\r\n* Add C, C++, and Python functions for querying kernels\r\n* Starting from this release, Windows builds will use Bazel. Therefore, we will drop official support for cmake.\r\n\r\n## Breaking Changes\r\n\r\n* Keras:\r\n  * The default values for tf.keras `RandomUniform`, `RandomNormal`, and `TruncatedNormal` initializers have been changed to match those in external Keras.\r\n  * Breaking change: `model.get_config()` on a Sequential model now returns a config dictionary (consistent with other Model instances) instead of a list of configs for the underlying layers.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* C++:\r\n  * Changed the signature of SessionFactory::NewSession so that it can return a meaningful error message on failure.\r\n* tf.data:\r\n  * Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`. [tf.data] Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`.\r\n  * `tf.data.Dataset.list_files()` raises an exception at initialization time if the argument matches no files.\r\n  * Renamed BigTable class to BigtableTable for clarity\r\n  * Document use of the Cloud Bigtable API\r\n  * Adding `tf.contrib.data.reduce_dataset` which can be used to reduce a dataset to a single element.\r\n  * Generalization of `tf.contrib.data.sliding_window_batch`.\r\n* INC:\r\n  * Runtime improvements to triangular solve.\r\n* `tf.contrib`:\r\n  * Add an `implementation` argument to `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D`. The new mode (`implementation=2`) performs forward pass as a single dense matrix multiplication, allowing dramatic speedups in certain scenarios (but worse performance in others - see docstring). The option also allows to use `padding=same`.\r\n  * Add documentation clarifying the differences between tf.fill and tf.constant.\r\n  * Add experimental IndexedDatasets.\r\n  * Add selective registration target using the lite proto runtime.\r\n  * Add simple Tensor and DataType classes to TensorFlow Lite Java\r\n  * Add support for bitcasting to/from uint32 and uint64.\r\n  * Added a subclass of Estimator that can be created from a SavedModel (SavedModelEstimator).\r\n  * Adds leaf index modes as an argument.\r\n  * Allow a different output shape from the input in tf.contrib.image.transform.\r\n  * Change the state_size order of the StackedRNNCell to be natural order. To keep the existing behavior, user can add reverse_state_order=True when constructing the StackedRNNCells.\r\n  * Deprecate self.test_session() in favor of self.session() or self.cached_session().\r\n  * Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)\r\n  * Estimator.train() now supports tf.contrib.summary.\\* summaries out of the box; each call to .train() will now create a separate tfevents file rather than re-using a shared one.\r\n  * Fix FTRL L2-shrinkage behavior: the gradient from the L2 shrinkage term should not end up in the accumulator.\r\n  * Fix toco compilation/execution on Windows\r\n  * GoogleZoneProvider class added to detect  which Google Cloud Engine zone tensorflow is running in.\r\n  * It is now safe to call any of the C API's TF_Delete\\* functions on nullptr\r\n  * Log some errors on Android to logcat\r\n  * Match FakeQuant numerics in TFLite to improve accuracy of TFLite quantized inference models.\r\n  * Optional bucket location check for the GCS Filesystem.\r\n  * Performance enhancements for StringSplitOp & StringSplitV2Op.\r\n  * Performance improvements for regex replace operations.\r\n  * TFRecordWriter now raises an error if .write() fails.\r\n  * TPU: More helpful error messages in TPUClusterResolvers.\r\n  * The legacy_init_op argument to SavedModelBuilder methods for adding MetaGraphs has been deprecated. Please use the equivalent main_op argument instead. As part of this, we now explicitly check for a single main_op or legacy_init_op at the time of SavedModel building, whereas the check on main_op was previously only done at load time.\r\n  * The protocol used for Estimator training is now configurable in RunConfig.\r\n  * Triangular solve performance improvements.\r\n  * Unify RNN cell interface between TF and Keras. Add new get_initial_state() to Keras and TF RNN cell, which will use to replace the existing zero_state() method.\r\n  * Update initialization of variables in Keras.\r\n  * Updates to \"constrained_optimization\" in tensorflow/contrib.\r\n  * boosted trees: adding pruning mode\r\n  * tf.train.Checkpoint does not delete old checkpoints by default.\r\n  * tfdbg: Limit the total disk space occupied by dumped tensor data to 100 GBytes. Add environment variable `TFDBG_DISK_BYTES_LIMIT` to allow adjustment of this upper limit.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAapeli, adoda, Ag Ramesh, Amogh Mannekote, Andrew Gibiansky, Andy Craze, Anirudh Koul, Aurelien Geron, Avijit, Avijit-Nervana, Ben, Benjamin H. Myara, bhack, Brett Koonce, Cao Zongyan, cbockman, cheerss, Chikanaga Tomoyuki, Clayne Robison, cosine0, Cui Wei, Dan J, David, David Norman, Dmitry Klimenkov, Eliel Hojman, Florian Courtial, fo40225, formath, Geoffrey Irving, gracehoney, Grzegorz Pawelczak, Guoliang Hua, Guozhong Zhuang, Herman Zvonimir Do\u0161Ilovi\u0107, HuiyangFei, Jacker, Jan H\u00fcNnemeyer, Jason Taylor, Jason Zaman, Jesse, Jiang,Zhoulong, Jiawei Zhang, Jie, Joe Yearsley, Johannes Schmitz, Jon Perl, Jon Triebenbach, Jonathan, Jonathan Hseu, Jongmin Park, Justin Shenk, karl@kubx.ca, Kate Hodesdon, Kb Sriram, Keishi Hattori, Kenneth Blomqvist, Koan-Sin Tan, Li Liangbin, Li, Yiqiang, Loo Rong Jie, Madiyar, Mahmoud Abuzaina, Mark Ryan, Matt Dodge, mbhuiyan, melvinljy96, Miguel Mota, Nafis Sadat, Nathan Luehr, naurril, Nehal J Wani, Niall Moran, Niranjan Hasabnis, Nishidha Panpaliya, npow, olicht, Pei Zhang, Peng Wang (Simpeng), Peng Yu, Philipp Jund, Pradeep Banavara, Pratik Kalshetti, qwertWZ, Rakesh Chada, Randy West, Ray Kim, Rholais Lii, Robin Richtsfeld, Rodrigo Silveira, Ruizhi, Santosh Kumar, Seb Bro, Sergei Lebedev, sfujiwara, Shaba Abhiram, Shashi, SneakyFish5, Soila Kavulya, Stefan Dyulgerov, Steven Winston, Sunitha Kambhampati, Surry Shome, Taehoon Lee, Thor Johnsen, Tristan Rice, TShapinsky, tucan, tucan9389, Vicente Reyes, Vilmar-Hillow, Vitaly Lavrukhin, wangershi, weidan.kong, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Wim Glenn, XFeiF, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yong Tang, Yoshihiro Yamazaki, Yuan (Terry) Tang, Yuan, Man, zhaoyongke, \u00c1Ron\r\nRicardo Perez-Lopez, \u5f20\u5929\u542f, \u5f20\u6653\u98de"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13029990", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/13029990/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/13029990/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0-rc2", "id": 13029990, "node_id": "MDc6UmVsZWFzZTEzMDI5OTkw", "tag_name": "v1.11.0-rc2", "target_commitish": "r1.11", "name": "TensorFlow 1.11.0-rc2", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-09-20T18:15:35Z", "published_at": "2018-09-21T17:26:13Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.11.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.11.0-rc2", "body": "# Release 1.11.0-rc2\r\n\r\n## Differences from 1.11.0-rc1\r\n\r\n* Fixed memory usage regression when training a model. The only affected TF versions were 1.11.0-rc0, rc1.\r\n\r\n## Differences from 1.11.0-rc0\r\n\r\n* Fixed performance issue when training a Keras model in Eager mode. The only affected TF version was 1.11.0-rc0.\r\n\r\n## Major Features and Improvements\r\n\r\n* Nvidia GPU:\r\n  * Prebuilt binaries are now (as of TensorFlow 1.11) built against cuDNN 7.2 and TensorRT 4. See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support)\r\n* Google Cloud TPU:\r\n  * Experimental tf.data integration for Keras on Google Cloud TPUs.\r\n  * Experimental / preview support for eager execution on Google Cloud TPUs.\r\n* DistributionStrategy:\r\n  * Add multi-GPU DistributionStrategy support in tf.keras. Users can now use `fit`, `evaluate` and `predict` to distribute their model on multiple GPUs.\r\n  * Add multi-worker DistributionStrategy and standalone client support in Estimator. See [README] (https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/distribute) for more details.\r\n* Add C, C++, and Python functions for querying kernels\r\n\r\n## Breaking Changes\r\n\r\n* Keras:\r\n  * The default values for tf.keras `RandomUniform`, `RandomNormal`, and `TruncatedNormal` initializers have been changed to match those in external Keras.\r\n  * Breaking change: `model.get_config()` on a Sequential model now returns a config dictionary (consistent with other Model instances) instead of a list of configs for the underlying layers.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* C++:\r\n  * Changed the signature of SessionFactory::NewSession so that it can return a meaningful error message on failure.\r\n* tf.data:\r\n  * Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`. [tf.data] Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`.\r\n  * `tf.data.Dataset.list_files()` raises an exception at initialization time if the argument matches no files.\r\n  * Renamed BigTable class to BigtableTable for clarity\r\n  * Document use of the Cloud Bigtable API\r\n  * Adding `tf.contrib.data.reduce_dataset` which can be used to reduce a dataset to a single element.\r\n  * Generalization of `tf.contrib.data.sliding_window_batch`.\r\n* INC:\r\n  * Runtime improvements to triangular solve.\r\n* `tf.contrib`:\r\n  * Add an `implementation` argument to `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D`. The new mode (`implementation=2`) performs forward pass as a single dense matrix multiplication, allowing dramatic speedups in certain scenarios (but worse performance in others - see docstring). The option also allows to use `padding=same`.\r\n  * Add documentation clarifying the differences between tf.fill and tf.constant.\r\n  * Add experimental IndexedDatasets.\r\n  * Add selective registration target using the lite proto runtime.\r\n  * Add simple Tensor and DataType classes to TensorFlow Lite Java\r\n  * Add support for bitcasting to/from uint32 and uint64.\r\n  * Added a subclass of Estimator that can be created from a SavedModel (SavedModelEstimator).\r\n  * Adds leaf index modes as an argument.\r\n  * Allow a different output shape from the input in tf.contrib.image.transform.\r\n  * Change the state_size order of the StackedRNNCell to be natural order. To keep the existing behavior, user can add reverse_state_order=True when constructing the StackedRNNCells.\r\n  * Deprecate self.test_session() in favor of self.session() or self.cached_session().\r\n  * Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)\r\n  * Estimator.train() now supports tf.contrib.summary.\\* summaries out of the box; each call to .train() will now create a separate tfevents file rather than re-using a shared one.\r\n  * Fix FTRL L2-shrinkage behavior: the gradient from the L2 shrinkage term should not end up in the accumulator.\r\n  * Fix toco compilation/execution on Windows\r\n  * GoogleZoneProvider class added to detect  which Google Cloud Engine zone tensorflow is running in.\r\n  * It is now safe to call any of the C API's TF_Delete\\* functions on nullptr\r\n  * Log some errors on Android to logcat\r\n  * Match FakeQuant numerics in TFLite to improve accuracy of TFLite quantized inference models.\r\n  * Optional bucket location check for the GCS Filesystem.\r\n  * Performance enhancements for StringSplitOp & StringSplitV2Op.\r\n  * Performance improvements for regex replace operations.\r\n  * TFRecordWriter now raises an error if .write() fails.\r\n  * TPU: More helpful error messages in TPUClusterResolvers.\r\n  * The legacy_init_op argument to SavedModelBuilder methods for adding MetaGraphs has been deprecated. Please use the equivalent main_op argument instead. As part of this, we now explicitly check for a single main_op or legacy_init_op at the time of SavedModel building, whereas the check on main_op was previously only done at load time.\r\n  * The protocol used for Estimator training is now configurable in RunConfig.\r\n  * Triangular solve performance improvements.\r\n  * Unify RNN cell interface between TF and Keras. Add new get_initial_state() to Keras and TF RNN cell, which will use to replace the existing zero_state() method.\r\n  * Update initialization of variables in Keras.\r\n  * Updates to \"constrained_optimization\" in tensorflow/contrib.\r\n  * boosted trees: adding pruning mode\r\n  * tf.train.Checkpoint does not delete old checkpoints by default.\r\n  * tfdbg: Limit the total disk space occupied by dumped tensor data to 100 GBytes. Add environment variable `TFDBG_DISK_BYTES_LIMIT` to allow adjustment of this upper limit.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAapeli, adoda, Ag Ramesh, Amogh Mannekote, Andrew Gibiansky, Andy Craze, Anirudh Koul, Aurelien Geron, Avijit, Avijit-Nervana, Ben, Benjamin H. Myara, bhack, Brett Koonce, Cao Zongyan, cbockman, cheerss, Chikanaga Tomoyuki, Clayne Robison, cosine0, Cui Wei, Dan J, David, David Norman, Dmitry Klimenkov, Eliel Hojman, Florian Courtial, fo40225, formath, Geoffrey Irving, gracehoney, Grzegorz Pawelczak, Guoliang Hua, Guozhong Zhuang, Herman Zvonimir Do\u0161Ilovi\u0107, HuiyangFei, Jacker, Jan H\u00fcNnemeyer, Jason Taylor, Jason Zaman, Jesse, Jiang,Zhoulong, Jiawei Zhang, Jie, Joe Yearsley, Johannes Schmitz, Jon Perl, Jon Triebenbach, Jonathan, Jonathan Hseu, Jongmin Park, Justin Shenk, karl@kubx.ca, Kate Hodesdon, Kb Sriram, Keishi Hattori, Kenneth Blomqvist, Koan-Sin Tan, Li Liangbin, Li, Yiqiang, Loo Rong Jie, Madiyar, Mahmoud Abuzaina, Mark Ryan, Matt Dodge, mbhuiyan, melvinljy96, Miguel Mota, Nafis Sadat, Nathan Luehr, naurril, Nehal J Wani, Niall Moran, Niranjan Hasabnis, Nishidha Panpaliya, npow, olicht, Pei Zhang, Peng Wang (Simpeng), Peng Yu, Philipp Jund, Pradeep Banavara, Pratik Kalshetti, qwertWZ, Rakesh Chada, Randy West, Ray Kim, Rholais Lii, Robin Richtsfeld, Rodrigo Silveira, Ruizhi, Santosh Kumar, Seb Bro, Sergei Lebedev, sfujiwara, Shaba Abhiram, Shashi, SneakyFish5, Soila Kavulya, Stefan Dyulgerov, Steven Winston, Sunitha Kambhampati, Surry Shome, Taehoon Lee, Thor Johnsen, Tristan Rice, TShapinsky, tucan, tucan9389, Vicente Reyes, Vilmar-Hillow, Vitaly Lavrukhin, wangershi, weidan.kong, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Wim Glenn, XFeiF, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yong Tang, Yoshihiro Yamazaki, Yuan (Terry) Tang, Yuan, Man, zhaoyongke, \u00c1Ron\r\nRicardo Perez-Lopez, \u5f20\u5929\u542f, \u5f20\u6653\u98de"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12943506", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12943506/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12943506/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0-rc1", "id": 12943506, "node_id": "MDc6UmVsZWFzZTEyOTQzNTA2", "tag_name": "v1.11.0-rc1", "target_commitish": "r1.11", "name": "TensorFlow 1.11.0-rc1", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-09-14T19:38:07Z", "published_at": "2018-09-17T20:02:33Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.11.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.11.0-rc1", "body": "# Release 1.11.0-rc1\r\n\r\n## Differences from 1.11.0-rc0\r\n\r\n* Fixed performance issue when training a Keras model in Eager mode. The only affected TF version was 1.11.0-rc0.\r\n\r\n## Major Features and Improvements\r\n\r\n* Nvidia GPU:\r\n  * Prebuilt binaries are now (as of TensorFlow 1.11) built against cuDNN 7.2 and TensorRT 4. See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support)\r\n* Google Cloud TPU:\r\n  * Experimental tf.data integration for Keras on Google Cloud TPUs.\r\n  * Experimental / preview support for eager execution on Google Cloud TPUs.\r\n* DistributionStrategy:\r\n  * Add multi-GPU DistributionStrategy support in tf.keras. Users can now use `fit`, `evaluate` and `predict` to distribute their model on multiple GPUs.\r\n  * Add multi-worker DistributionStrategy and standalone client support in Estimator. See [README] (https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/distribute) for more details.\r\n* Add C, C++, and Python functions for querying kernels\r\n\r\n## Breaking Changes\r\n\r\n* Keras:\r\n  * The default values for tf.keras `RandomUniform`, `RandomNormal`, and `TruncatedNormal` initializers have been changed to match those in external Keras.\r\n  * Breaking change: `model.get_config()` on a Sequential model now returns a config dictionary (consistent with other Model instances) instead of a list of configs for the underlying layers.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* C++:\r\n  * Changed the signature of SessionFactory::NewSession so that it can return a meaningful error message on failure.\r\n* tf.data:\r\n  * Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`. [tf.data] Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`.\r\n  * `tf.data.Dataset.list_files()` raises an exception at initialization time if the argument matches no files.\r\n  * Renamed BigTable class to BigtableTable for clarity\r\n  * Document use of the Cloud Bigtable API\r\n  * Adding `tf.contrib.data.reduce_dataset` which can be used to reduce a dataset to a single element.\r\n  * Generalization of `tf.contrib.data.sliding_window_batch`.\r\n* INC:\r\n  * Runtime improvements to triangular solve.\r\n* `tf.contrib`:\r\n  * Add an `implementation` argument to `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D`. The new mode (`implementation=2`) performs forward pass as a single dense matrix multiplication, allowing dramatic speedups in certain scenarios (but worse performance in others - see docstring). The option also allows to use `padding=same`.\r\n  * Add documentation clarifying the differences between tf.fill and tf.constant.\r\n  * Add experimental IndexedDatasets.\r\n  * Add selective registration target using the lite proto runtime.\r\n  * Add simple Tensor and DataType classes to TensorFlow Lite Java\r\n  * Add support for bitcasting to/from uint32 and uint64.\r\n  * Added a subclass of Estimator that can be created from a SavedModel (SavedModelEstimator).\r\n  * Adds leaf index modes as an argument.\r\n  * Allow a different output shape from the input in tf.contrib.image.transform.\r\n  * Change the state_size order of the StackedRNNCell to be natural order. To keep the existing behavior, user can add reverse_state_order=True when constructing the StackedRNNCells.\r\n  * Deprecate self.test_session() in favor of self.session() or self.cached_session().\r\n  * Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)\r\n  * Estimator.train() now supports tf.contrib.summary.\\* summaries out of the box; each call to .train() will now create a separate tfevents file rather than re-using a shared one.\r\n  * Fix FTRL L2-shrinkage behavior: the gradient from the L2 shrinkage term should not end up in the accumulator.\r\n  * Fix toco compilation/execution on Windows\r\n  * GoogleZoneProvider class added to detect  which Google Cloud Engine zone tensorflow is running in.\r\n  * It is now safe to call any of the C API's TF_Delete\\* functions on nullptr\r\n  * Log some errors on Android to logcat\r\n  * Match FakeQuant numerics in TFLite to improve accuracy of TFLite quantized inference models.\r\n  * Optional bucket location check for the GCS Filesystem.\r\n  * Performance enhancements for StringSplitOp & StringSplitV2Op.\r\n  * Performance improvements for regex replace operations.\r\n  * TFRecordWriter now raises an error if .write() fails.\r\n  * TPU: More helpful error messages in TPUClusterResolvers.\r\n  * The legacy_init_op argument to SavedModelBuilder methods for adding MetaGraphs has been deprecated. Please use the equivalent main_op argument instead. As part of this, we now explicitly check for a single main_op or legacy_init_op at the time of SavedModel building, whereas the check on main_op was previously only done at load time.\r\n  * The protocol used for Estimator training is now configurable in RunConfig.\r\n  * Triangular solve performance improvements.\r\n  * Unify RNN cell interface between TF and Keras. Add new get_initial_state() to Keras and TF RNN cell, which will use to replace the existing zero_state() method.\r\n  * Update initialization of variables in Keras.\r\n  * Updates to \"constrained_optimization\" in tensorflow/contrib.\r\n  * boosted trees: adding pruning mode\r\n  * tf.train.Checkpoint does not delete old checkpoints by default.\r\n  * tfdbg: Limit the total disk space occupied by dumped tensor data to 100 GBytes. Add environment variable `TFDBG_DISK_BYTES_LIMIT` to allow adjustment of this upper limit.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAapeli, adoda, Ag Ramesh, Amogh Mannekote, Andrew Gibiansky, Andy Craze, Anirudh Koul, Aurelien Geron, Avijit, Avijit-Nervana, Ben, Benjamin H. Myara, bhack, Brett Koonce, Cao Zongyan, cbockman, cheerss, Chikanaga Tomoyuki, Clayne Robison, cosine0, Cui Wei, Dan J, David, David Norman, Dmitry Klimenkov, Eliel Hojman, Florian Courtial, fo40225, formath, Geoffrey Irving, gracehoney, Grzegorz Pawelczak, Guoliang Hua, Guozhong Zhuang, Herman Zvonimir Do\u0161Ilovi\u0107, HuiyangFei, Jacker, Jan H\u00fcNnemeyer, Jason Taylor, Jason Zaman, Jesse, Jiang,Zhoulong, Jiawei Zhang, Jie, Joe Yearsley, Johannes Schmitz, Jon Perl, Jon Triebenbach, Jonathan, Jonathan Hseu, Jongmin Park, Justin Shenk, karl@kubx.ca, Kate Hodesdon, Kb Sriram, Keishi Hattori, Kenneth Blomqvist, Koan-Sin Tan, Li Liangbin, Li, Yiqiang, Loo Rong Jie, Madiyar, Mahmoud Abuzaina, Mark Ryan, Matt Dodge, mbhuiyan, melvinljy96, Miguel Mota, Nafis Sadat, Nathan Luehr, naurril, Nehal J Wani, Niall Moran, Niranjan Hasabnis, Nishidha Panpaliya, npow, olicht, Pei Zhang, Peng Wang (Simpeng), Peng Yu, Philipp Jund, Pradeep Banavara, Pratik Kalshetti, qwertWZ, Rakesh Chada, Randy West, Ray Kim, Rholais Lii, Robin Richtsfeld, Rodrigo Silveira, Ruizhi, Santosh Kumar, Seb Bro, Sergei Lebedev, sfujiwara, Shaba Abhiram, Shashi, SneakyFish5, Soila Kavulya, Stefan Dyulgerov, Steven Winston, Sunitha Kambhampati, Surry Shome, Taehoon Lee, Thor Johnsen, Tristan Rice, TShapinsky, tucan, tucan9389, Vicente Reyes, Vilmar-Hillow, Vitaly Lavrukhin, wangershi, weidan.kong, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Wim Glenn, XFeiF, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yong Tang, Yoshihiro Yamazaki, Yuan (Terry) Tang, Yuan, Man, zhaoyongke, \u00c1Ron\r\nRicardo Perez-Lopez, \u5f20\u5929\u542f, \u5f20\u6653\u98de"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12870268", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12870268/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12870268/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.11.0-rc0", "id": 12870268, "node_id": "MDc6UmVsZWFzZTEyODcwMjY4", "tag_name": "v1.11.0-rc0", "target_commitish": "r1.11", "name": "TensorFlow 1.11.0-rc0", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-09-11T23:18:00Z", "published_at": "2018-09-12T21:54:46Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.11.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.11.0-rc0", "body": "# Release 1.11.0\r\n\r\n## Major Features and Improvements\r\n\r\n* Nvidia GPU:\r\n  * Prebuilt binaries are now (as of TensorFlow 1.11) built against cuDNN 7.2 and TensorRT 4. See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support)\r\n* Google Cloud TPU:\r\n  * Experimental tf.data integration for Keras on Google Cloud TPUs.\r\n  * Experimental / preview support for eager execution on Google Cloud TPUs.\r\n* DistributionStrategy:\r\n  * Add multi-GPU DistributionStrategy support in tf.keras. Users can now use `fit`, `evaluate` and `predict` to distribute their model on multiple GPUs.\r\n  * Add multi-worker DistributionStrategy and standalone client support in Estimator. See [README] (https://github.com/tensorflow/tensorflow/tree/master/tensorflow/contrib/distribute) for more details.\r\n* Add C, C++, and Python functions for querying kernels\r\n\r\n## Breaking Changes\r\n\r\n* Keras:\r\n  * The default values for tf.keras `RandomUniform`, `RandomNormal`, and `TruncatedNormal` initializers have been changed to match those in external Keras.\r\n  * Breaking change: `model.get_config()` on a Sequential model now returns a config dictionary (consistent with other Model instances) instead of a list of configs for the underlying layers.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* C++:\r\n  * Changed the signature of SessionFactory::NewSession so that it can return a meaningful error message on failure.\r\n* tf.data:\r\n  * Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`. [tf.data] Remove `num_parallel_parser_calls` argument from `tf.contrib.data.make_csv_dataset()`.\r\n  * `tf.data.Dataset.list_files()` raises an exception at initialization time if the argument matches no files.\r\n  * Renamed BigTable class to BigtableTable for clarity\r\n  * Document use of the Cloud Bigtable API\r\n  * Adding `tf.contrib.data.reduce_dataset` which can be used to reduce a dataset to a single element.\r\n  * Generalization of `tf.contrib.data.sliding_window_batch`.\r\n* INC:\r\n  * Runtime improvements to triangular solve.\r\n* `tf.contrib`:\r\n  * Add an `implementation` argument to `tf.keras.layers.LocallyConnected2D` and `tf.keras.layers.LocallyConnected1D`. The new mode (`implementation=2`) performs forward pass as a single dense matrix multiplication, allowing dramatic speedups in certain scenarios (but worse performance in others - see docstring). The option also allows to use `padding=same`.\r\n  * Add documentation clarifying the differences between tf.fill and tf.constant.\r\n  * Add experimental IndexedDatasets.\r\n  * Add selective registration target using the lite proto runtime.\r\n  * Add simple Tensor and DataType classes to TensorFlow Lite Java\r\n  * Add support for bitcasting to/from uint32 and uint64.\r\n  * Added a subclass of Estimator that can be created from a SavedModel (SavedModelEstimator).\r\n  * Adds leaf index modes as an argument.\r\n  * Allow a different output shape from the input in tf.contrib.image.transform.\r\n  * Change the state_size order of the StackedRNNCell to be natural order. To keep the existing behavior, user can add reverse_state_order=True when constructing the StackedRNNCells.\r\n  * Deprecate self.test_session() in favor of self.session() or self.cached_session().\r\n  * Directly import tensor.proto.h (the transitive import will be removed from tensor.h soon)\r\n  * Estimator.train() now supports tf.contrib.summary.\\* summaries out of the box; each call to .train() will now create a separate tfevents file rather than re-using a shared one.\r\n  * Fix FTRL L2-shrinkage behavior: the gradient from the L2 shrinkage term should not end up in the accumulator.\r\n  * Fix toco compilation/execution on Windows\r\n  * GoogleZoneProvider class added to detect  which Google Cloud Engine zone tensorflow is running in.\r\n  * It is now safe to call any of the C API's TF_Delete\\* functions on nullptr\r\n  * Log some errors on Android to logcat\r\n  * Match FakeQuant numerics in TFLite to improve accuracy of TFLite quantized inference models.\r\n  * Optional bucket location check for the GCS Filesystem.\r\n  * Performance enhancements for StringSplitOp & StringSplitV2Op.\r\n  * Performance improvements for regex replace operations.\r\n  * TFRecordWriter now raises an error if .write() fails.\r\n  * TPU: More helpful error messages in TPUClusterResolvers.\r\n  * The legacy_init_op argument to SavedModelBuilder methods for adding MetaGraphs has been deprecated. Please use the equivalent main_op argument instead. As part of this, we now explicitly check for a single main_op or legacy_init_op at the time of SavedModel building, whereas the check on main_op was previously only done at load time.\r\n  * The protocol used for Estimator training is now configurable in RunConfig.\r\n  * Triangular solve performance improvements.\r\n  * Unify RNN cell interface between TF and Keras. Add new get_initial_state() to Keras and TF RNN cell, which will use to replace the existing zero_state() method.\r\n  * Update initialization of variables in Keras.\r\n  * Updates to \"constrained_optimization\" in tensorflow/contrib.\r\n  * boosted trees: adding pruning mode\r\n  * tf.train.Checkpoint does not delete old checkpoints by default.\r\n  * tfdbg: Limit the total disk space occupied by dumped tensor data to 100 GBytes. Add environment variable `TFDBG_DISK_BYTES_LIMIT` to allow adjustment of this upper limit.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAapeli, adoda, Ag Ramesh, Amogh Mannekote, Andrew Gibiansky, Andy Craze, Anirudh Koul, Aurelien Geron, Avijit, Avijit-Nervana, Ben, Benjamin H. Myara, bhack, Brett Koonce, Cao Zongyan, cbockman, cheerss, Chikanaga Tomoyuki, Clayne Robison, cosine0, Cui Wei, Dan J, David, David Norman, Dmitry Klimenkov, Eliel Hojman, Florian Courtial, fo40225, formath, Geoffrey Irving, gracehoney, Grzegorz Pawelczak, Guoliang Hua, Guozhong Zhuang, Herman Zvonimir Do\u0161Ilovi\u0107, HuiyangFei, Jacker, Jan H\u00fcNnemeyer, Jason Taylor, Jason Zaman, Jesse, Jiang,Zhoulong, Jiawei Zhang, Jie, Joe Yearsley, Johannes Schmitz, Jon Perl, Jon Triebenbach, Jonathan, Jonathan Hseu, Jongmin Park, Justin Shenk, karl@kubx.ca, Kate Hodesdon, Kb Sriram, Keishi Hattori, Kenneth Blomqvist, Koan-Sin Tan, Li Liangbin, Li, Yiqiang, Loo Rong Jie, Madiyar, Mahmoud Abuzaina, Mark Ryan, Matt Dodge, mbhuiyan, melvinljy96, Miguel Mota, Nafis Sadat, Nathan Luehr, naurril, Nehal J Wani, Niall Moran, Niranjan Hasabnis, Nishidha Panpaliya, npow, olicht, Pei Zhang, Peng Wang (Simpeng), Peng Yu, Philipp Jund, Pradeep Banavara, Pratik Kalshetti, qwertWZ, Rakesh Chada, Randy West, Ray Kim, Rholais Lii, Robin Richtsfeld, Rodrigo Silveira, Ruizhi, Santosh Kumar, Seb Bro, Sergei Lebedev, sfujiwara, Shaba Abhiram, Shashi, SneakyFish5, Soila Kavulya, Stefan Dyulgerov, Steven Winston, Sunitha Kambhampati, Surry Shome, Taehoon Lee, Thor Johnsen, Tristan Rice, TShapinsky, tucan, tucan9389, Vicente Reyes, Vilmar-Hillow, Vitaly Lavrukhin, wangershi, weidan.kong, weidankong, Wen-Heng (Jack) Chung, William D. Irons, Wim Glenn, XFeiF, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yong Tang, Yoshihiro Yamazaki, Yuan (Terry) Tang, Yuan, Man, zhaoyongke, \u00c1Ron\r\nRicardo Perez-Lopez, \u5f20\u5929\u542f, \u5f20\u6653\u98de"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12565888", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12565888/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12565888/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.10.1", "id": 12565888, "node_id": "MDc6UmVsZWFzZTEyNTY1ODg4", "tag_name": "v1.10.1", "target_commitish": "r1.10", "name": "TensorFlow 1.10.1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-08-23T19:58:44Z", "published_at": "2018-08-24T17:05:15Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.10.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.10.1", "body": "# Release 1.10.1\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.keras`:\r\n  * Fixing keras on Cloud TPUs. No new binaries will be built for Windows."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12312653", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12312653/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12312653/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.10.0", "id": 12312653, "node_id": "MDc6UmVsZWFzZTEyMzEyNjUz", "tag_name": "v1.10.0", "target_commitish": "r1.10", "name": "TensorFlow 1.10.0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-08-07T23:52:04Z", "published_at": "2018-08-08T20:25:34Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.10.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.10.0", "body": "# Release 1.10.0\r\n\r\n## Major Features And Improvements\r\n\r\n* The `tf.lite` runtime now supports `complex64`.\r\n* Initial Bigtable integration for `tf.data`.\r\n* Improved local run behavior in `tf.estimator.train_and_evaluate` which does not reload checkpoints for evaluation.\r\n* `RunConfig` now sets device_filters to restrict how workers and PS can communicate. This can speed up training and ensure clean shutdowns in some situations. But if you have jobs that require communication between workers, you will have to set custom session_options in your `RunConfig`.\r\n* Moved Distributions and Bijectors from `tf.contrib.distributions` to [Tensorflow Probability (TFP)](https://github.com/tensorflow/probability). `tf.contrib.distributions` is now deprecated and will be removed by the end of 2018.\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. See below for the complete list. New symbols have been added to the following modules: [`tf.debugging`](https://www.tensorflow.org/versions/master/api_docs/python/tf/debugging), [`tf.dtypes`](https://www.tensorflow.org/versions/master/api_docs/python/tf/dtypes), [`tf.image`](https://www.tensorflow.org/versions/master/api_docs/python/tf/image), [`tf.io`](https://www.tensorflow.org/versions/master/api_docs/python/tf/io), [`tf.linalg`](https://www.tensorflow.org/versions/master/api_docs/python/tf/linalg), [`tf.manip`](https://www.tensorflow.org/versions/master/api_docs/python/tf/manip), [`tf.math`](https://www.tensorflow.org/versions/master/api_docs/python/tf/math), [`tf.quantization`](https://www.tensorflow.org/versions/master/api_docs/python/tf/quantization), [`tf.strings`](https://www.tensorflow.org/versions/master/api_docs/python/tf/strings)\r\n\r\n## Breaking Changes\r\n\r\n* Prebuilt binaries are now (as of TensorFlow 1.10) built against NCCL 2.2 and no longer include NCCL in the binary install. TensorFlow usage with multiple GPUs and NCCL requires upgrade to [NCCL 2.2](https://developer.nvidia.com/nccl). See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support) and [Install TensorFlow from Sources](https://www.tensorflow.org/install/install_sources#optional_install_tensorflow_for_gpu_prerequisites).\r\n* Starting from TensorFlow 1.11, Windows builds will use Bazel. Therefore, we will drop official support for cmake.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.data`:\r\n  * `tf.contrib.data.group_by_reducer()` is now available via the public API.\r\n  * `tf.contrib.data.choose_from_datasets()` is now available via the public API.\r\n  * Adding `drop_remainder` argument to `tf.data.Dataset.batch()` and `tf.data.Dataset.padded_batch()`, deprecating `tf.contrib.data.batch_and_drop_remainder()` and `tf.contrib.data.padded_batch_and_drop_remainder()`.\r\n* `tf.estimator`:\r\n  * `Estimator`s now use custom savers included in `EstimatorSpec` scaffolds for saving SavedModels during export.\r\n  * `EstimatorSpec` will now add a default prediction output for export if no `export_output` is provided, eliminating the need to explicitly include a `PredictOutput` object in the `model_fn` for simple use-cases.\r\n  * Support sparse_combiner in canned Linear Estimators.\r\n  * Added batch normalization to `DNNClassifier`, `DNNRegressor`, and `DNNEstimator`.\r\n  * Adding ranking support for boosted trees.\r\n  * Adding center bias option for boosted trees.\r\n* Add `synchronization` and `aggregation` args to get_variable(). These args will be used for distributed variables.\r\n* Add `synchronization` and `aggregation` args to the layer `add_weight()` API. These args will be used for distributed variables.\r\n* `tf.losses.*` do not add to the global collection when executing eagerly (to avoid leaking memory).\r\n* Support different summary and checkpoint directories in `tf.train.MonitoredTrainingSession()`.\r\n* Added IndRNN, IndyGRU, and IndyLSTM cells to `tf.contrib.rnn`.\r\n* Add safe static factory functions for SparseTensor and convert all CHECKs to DCHECKs. Using the constructor directly is unsafe and deprecated.\r\n* Make the Bigtable client connection pool configurable & increase the default # of connections for performance.\r\n* Added derivative of `tf.random_gamma` with respect to the alpha parameter.\r\n* Added derivative of `tf.igamma(a, x)` and `tf.igammac(a, x)` with respect to a.\r\n* Modified Bessel functions of order zero and one.\r\n* Add FillTriangular Bijector to create triangular matrices.\r\n* Added support for Type III DCT, and `tf.spectral.idct(type=2|3)`.\r\n* Correctly handle CuDNN RNN weight loaded when nest in `TimeDistributed`.\r\n* Adding per-element weight support for `WALSComputePartialLhsAndRhsOp`.\r\n* ZerosLike and OnesLike ops treated as constants by Graph Transform Tool.\r\n* Gamma distribution and the derived distributions (Beta, Dirichlet, Student's t, inverse Gamma) now fully reparameterized.\r\n* Java: Experimental wrapper classes to make graph generation easier. Thanks @karllessard and @kbsriram\r\n* Build & link in secure gRPC components (switch from the insecure grpc dependency to secure grpc dependency).\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. List of new endpoints:\r\n  * New endpoints in `tf.image` namespace: `tf.image.extract_image_patches`\r\n  * New endpoints in `tf.debugging` namespace: `tf.debugging.check_numerics`, `tf.debugging.is_finite`, `tf.debugging.is_inf`, `tf.debugging.is_nan`.\r\n  * New endpoints in `tf.dtypes` namespace: `tf.dtypes.as_string`.\r\n  * New endpoints in `tf.io` namespace: `tf.io.decode_base64`, `tf.io.decode_compressed`, `tf.io.decode_json_example`, `tf.io.decode_raw`, `tf.io.encode_base64`, `tf.io.matching_files`, `tf.io.parse_tensor`, `tf.io.read_file, `tf.io.write_file`.\r\n  * New endpoints in tf.linalg namespace: `tf.linalg.cross`, `tf.linalg.tensor_diag` (corresponds to `tf.diag`), `tf.linalg.tensor_diag_part` (corresponds to `tf.diag_part`).\r\n  * New endpoints in tf.manip namespace: `tf.manip.batch_to_space_nd`, `tf.manip.gather_nd`, `tf.manip.reshape`, `tf.manip.reverse`, `tf.manip.scatter_nd`, `tf.manip.space_to_batch_nd`, `tf.manip.tile`\r\n  * New endpoints in tf.math namespace: `tf.math.acos`, `tf.math.acosh`, `tf.math.add`, `tf.math.asin`, `tf.math.asinh`, `tf.math.atan`, `tf.math.atan2`, `tf.math.atanh`, `tf.math.betainc`, `tf.math.ceil`, `tf.math.cos`, `tf.math.cosh`, `tf.math.digamma`, `tf.math.equal`, `tf.math.erfc`, `tf.math.exp`, `tf.math.expm1`, `tf.math.floor`, `tf.math.greater`, `tf.math.greater_equal`, `tf.math.igamma`, `tf.math.igammac`, `tf.math.invert_permutation`, `tf.math.less`, `tf.math.less_equal`, `tf.math.lgamma`, `tf.math.log`, `tf.math.log1p`, `tf.math.logical_and`, `tf.math.logical_not`, `tf.math.logical_or`, `tf.math.maximum`, `tf.math.minimum`, `tf.math.not_equal`, `tf.math.polygamma`, `tf.math.reciprocal`, `tf.math.rint`, `tf.math.rsqrt`, `tf.math.segment_max`, `tf.math.segment_mean`, `tf.math.segment_min`, `tf.math.segment_prod`, `tf.math.segment_sum`, `tf.math.sin`, `tf.math.sinh`, `tf.math.softplus`, `tf.math.softsign`, `tf.math.squared_difference`, `tf.math.tan`, `tf.math.unsorted_segment_max`, `tf.math.unsorted_segment_min`, `tf.math.unsorted_segment_prod`, `tf.math.unsorted_segment_sum`, `tf.math.zeta`.\r\n  * New endpoints in `tf.quantization` namespace: `tf.quantization.dequantize`, `tf.quantization.fake_quant_with_min_max_args`, `tf.quantization.fake_quant_with_min_max_args_gradient`, `tf.quantization.fake_quant_with_min_max_vars`,  `tf.quantization.fake_quant_with_min_max_vars_gradient`, `tf.quantization.fake_quant_with_min_max_vars_per_channel`,  `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient`.\r\n  * New endpoints in tf.strings namespace: `tf.strings.join` (corresponds to `tf.string_join`), `tf.strings.regex_replace`, `tf.strings.to_number` (corresponds to `tf.string_to_number`), `tf.strings.strip` (corresponds to `tf.string_strip`), `tf.strings.substr`, `tf.strings.to_hash_bucket` (corresponds to `tf.string_to_hash_bucket`), `tf.strings.to_hash_bucket_fast` (corresponds to `tf.string_to_hash_bucket_fast`), `tf.strings.to_hash_bucket_strong` (corresponds to `tf.string_to_hash_bucket_strong`).\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAg Ramesh, Alex Wiltschko, Alexander Pantyukhin, Amogh Mannekote, An Jiaoyang, Andrei Nigmatulin, Andrew Ginns, Bj\u00f8Rn Moholt, Brett Koonce, Chengzhi Chen, Chinmay Das, Christian Ertler, Christoph Boeddeker, Clayne Robison, Courtial Florian, ctiijima, Dan Douthit, Dan J, Dan Ringwalt, EFanZh, Emanuele Ballarin, eqy, Evgeniy Zheltonozhskiy, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, G K, gracehoney, Guillaume Klein, Guozhong Zhuang, Hsien-Yang Li, hsm207, ImSheridan, Jayaram Bobba, Jiandong Ruan, Jie, Joel Shor, Jonas Rauber, Jongmin Baek, jsawruk, Karan Kaw, Karl Lessard, karl@kubx.ca, Kb Sriram, KinmanLam, leiiwang, Li, Yiqiang, Loo Rong Jie, Mahmoud Abuzaina, Mahmoud Aslan, ManHyuk, Martin Patz, Martin Zeitler, mktozk, Mohammad Ashraf Bhuiyan, mrTsjolder, Naman Bhalla, Nick Felt, Nicolas Lopez, Niranjan Hasabnis, Nishidha Panpaliya, Nitish, nrstott, Nutti, Parag Jain, PeterLee, Philipp Jund, Rach L, Rafal Wojdyla, Roland Zimmermann, Sergei Lebedev, SneakyFish5, Soila Kavulya, Sriram Veturi, Steven Schmatz, Taehoon Lee, Tang, Wenyi, Taras Sereda, Ted Chang, Tim Zaman, Tristan Rice, tucan, vchigrin, Vikram Tiwari, Vincent, WeberXie, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yong Tang, Yu Yi, Yuxin Wu, Z\u00e9 Vin\u00edCius"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12174141", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12174141/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12174141/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.10.0-rc1", "id": 12174141, "node_id": "MDc6UmVsZWFzZTEyMTc0MTQx", "tag_name": "v1.10.0-rc1", "target_commitish": "r1.10", "name": "TensorFlow 1.10.0-rc1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-07-30T18:46:35Z", "published_at": "2018-07-30T22:45:06Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.10.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.10.0-rc1", "body": "# Release 1.10.0\r\n\r\n## Major Features And Improvements\r\n\r\n* The `tf.lite` runtime now supports `complex64`.\r\n* Initial Bigtable integration for `tf.data`.\r\n* Improved local run behavior in `tf.estimator.train_and_evaluate` which does not reload checkpoints for evaluation.\r\n* `RunConfig` now sets device_filters to restrict how workers and PS can communicate. This can speed up training and ensure clean shutdowns in some situations. But if you have jobs that require communication between workers, you will have to set custom session_options in your `RunConfig`.\r\n* Moved Distributions and Bijectors from `tf.contrib.distributions` to [Tensorflow Probability (TFP)](https://github.com/tensorflow/probability). `tf.contrib.distributions` is now deprecated and will be removed by the end of 2018.\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. See below for the complete list. New symbols have been added to the following modules: [`tf.debugging`](https://www.tensorflow.org/versions/master/api_docs/python/tf/debugging), [`tf.dtypes`](https://www.tensorflow.org/versions/master/api_docs/python/tf/dtypes), [`tf.image`](https://www.tensorflow.org/versions/master/api_docs/python/tf/image), [`tf.io`](https://www.tensorflow.org/versions/master/api_docs/python/tf/io), [`tf.linalg`](https://www.tensorflow.org/versions/master/api_docs/python/tf/linalg), [`tf.manip`](https://www.tensorflow.org/versions/master/api_docs/python/tf/manip), [`tf.math`](https://www.tensorflow.org/versions/master/api_docs/python/tf/math), [`tf.quantization`](https://www.tensorflow.org/versions/master/api_docs/python/tf/quantization), [`tf.strings`](https://www.tensorflow.org/versions/master/api_docs/python/tf/strings)\r\n\r\n## Breaking Changes\r\n\r\n* Prebuilt binaries are now (as of TensorFlow 1.10) built against NCCL 2.2 and no longer include NCCL in the binary install. TensorFlow usage with multiple GPUs and NCCL requires upgrade to [NCCL 2.2](https://developer.nvidia.com/nccl). See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support) and [Install TensorFlow from Sources](https://www.tensorflow.org/install/install_sources#optional_install_tensorflow_for_gpu_prerequisites).\r\n* Starting from TensorFlow 1.11, Windows builds will use Bazel. Therefore, we will drop official support for cmake.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.data`:\r\n  * `tf.contrib.data.group_by_reducer()` is now available via the public API.\r\n  * `tf.contrib.data.choose_from_datasets()` is now available via the public API.\r\n  * Adding `drop_remainder` argument to `tf.data.Dataset.batch()` and `tf.data.Dataset.padded_batch()`, deprecating tf.contrib.data.batch_and_drop_remainder()` and `tf.contrib.data.padded_batch_and_drop_remainder()`.\r\n* `tf.estimator`:\r\n  * `Estimator`s now use custom savers included in `EstimatorSpec` scaffolds for saving SavedModels during export.\r\n  * `EstimatorSpec` will now add a default prediction output for export if no `export_output` is provided, eliminating the need to explicitly include a `PredictOutput` object in the `model_fn` for simple use-cases.\r\n  * Support sparse_combiner in canned Linear Estimators.\r\n  * Added batch normalization to `DNNClassifier`, `DNNRegressor`, and `DNNEstimator`.\r\n  * Adding ranking support for boosted trees.\r\n  * Adding center bias option for boosted trees.\r\n* Add `synchronization` and `aggregation` args to get_variable(). These args will be used for distributed variables.\r\n* Add `synchronization` and `aggregation` args to the layer `add_weight()` API. These args will be used for distributed variables.\r\n* `tf.losses.*` do not add to the global collection when executing eagerly (to avoid leaking memory).\r\n* Support different summary and checkpoint directories in `tf.train.MonitoredTrainingSession()`.\r\n* Added IndRNN, IndyGRU, and IndyLSTM cells to `tf.contrib.rnn`.\r\n* Add safe static factory functions for SparseTensor and convert all CHECKs to DCHECKs. Using the constructor directly is unsafe and deprecated.\r\n* Make the Bigtable client connection pool configurable & increase the default # of connections for performance.\r\n* Added derivative of `tf.random_gamma` with respect to the alpha parameter.\r\n* Added derivative of `tf.igamma(a, x)` and `tf.igammac(a, x)` with respect to a.\r\n* Modified Bessel functions of order zero and one.\r\n* Add FillTriangular Bijector to create triangular matrices.\r\n* Added support for Type III DCT, and `tf.spectral.idct(type=2|3)`.\r\n* Correctly handle CuDNN RNN weight loaded when nest in `TimeDistributed`.\r\n* Adding per-element weight support for `WALSComputePartialLhsAndRhsOp`.\r\n* ZerosLike and OnesLike ops treated as constants by Graph Transform Tool.\r\n* Gamma distribution and the derived distributions (Beta, Dirichlet, Student's t, inverse Gamma) now fully reparameterized.\r\n* Java: Experimental wrapper classes to make graph generation easier. Thanks @karllessard and @kbsriram\r\n* Build & link in secure gRPC components (switch from the insecure grpc dependency to secure grpc dependency).\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. List of new endpoints:\r\n  * New endpoints in `tf.image` namespace: `tf.image.extract_image_patches`\r\n  * New endpoints in `tf.debugging` namespace: `tf.debugging.check_numerics`, `tf.debugging.is_finite`, `tf.debugging.is_inf`, `tf.debugging.is_nan`.\r\n  * New endpoints in `tf.dtypes` namespace: `tf.dtypes.as_string`.\r\n  * New endpoints in `tf.io` namespace: `tf.io.decode_base64`, `tf.io.decode_compressed`, `tf.io.decode_json_example`, `tf.io.decode_raw`, `tf.io.encode_base64`, `tf.io.matching_files`, `tf.io.parse_tensor`, `tf.io.read_file, `tf.io.write_file`.\r\n  * New endpoints in tf.linalg namespace: `tf.linalg.cross`, `tf.linalg.tensor_diag` (corresponds to `tf.diag`), `tf.linalg.tensor_diag_part` (corresponds to `tf.diag_part`).\r\n  * New endpoints in tf.manip namespace: `tf.manip.batch_to_space_nd`, `tf.manip.gather_nd`, `tf.manip.reshape`, `tf.manip.reverse`, `tf.manip.scatter_nd`, `tf.manip.space_to_batch_nd`, `tf.manip.tile`\r\n  * New endpoints in tf.math namespace: `tf.math.acos`, `tf.math.acosh`, `tf.math.add`, `tf.math.asin`, `tf.math.asinh`, `tf.math.atan`, `tf.math.atan2`, `tf.math.atanh`, `tf.math.betainc`, `tf.math.ceil`, `tf.math.cos`, `tf.math.cosh`, `tf.math.digamma`, `tf.math.equal`, `tf.math.erfc`, `tf.math.exp`, `tf.math.expm1`, `tf.math.floor`, `tf.math.greater`, `tf.math.greater_equal`, `tf.math.igamma`, `tf.math.igammac`, `tf.math.invert_permutation`, `tf.math.less`, `tf.math.less_equal`, `tf.math.lgamma`, `tf.math.log`, `tf.math.log1p`, `tf.math.logical_and`, `tf.math.logical_not`, `tf.math.logical_or`, `tf.math.maximum`, `tf.math.minimum`, `tf.math.not_equal`, `tf.math.polygamma`, `tf.math.reciprocal`, `tf.math.rint`, `tf.math.rsqrt`, `tf.math.segment_max`, `tf.math.segment_mean`, `tf.math.segment_min`, `tf.math.segment_prod`, `tf.math.segment_sum`, `tf.math.sin`, `tf.math.sinh`, `tf.math.softplus`, `tf.math.softsign`, `tf.math.squared_difference`, `tf.math.tan`, `tf.math.unsorted_segment_max`, `tf.math.unsorted_segment_min`, `tf.math.unsorted_segment_prod`, `tf.math.unsorted_segment_sum`, `tf.math.zeta`.\r\n  * New endpoints in `tf.quantization` namespace: `tf.quantization.dequantize`, `tf.quantization.fake_quant_with_min_max_args`, `tf.quantization.fake_quant_with_min_max_args_gradient`, `tf.quantization.fake_quant_with_min_max_vars`,  `tf.quantization.fake_quant_with_min_max_vars_gradient`, `tf.quantization.fake_quant_with_min_max_vars_per_channel`,  `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient`.\r\n  * New endpoints in tf.strings namespace: `tf.strings.join` (corresponds to `tf.string_join`), `tf.strings.regex_replace`, `tf.strings.to_number` (corresponds to `tf.string_to_number`), `tf.strings.strip` (corresponds to `tf.string_strip`), `tf.strings.substr`, `tf.strings.to_hash_bucket` (corresponds to `tf.string_to_hash_bucket`), `tf.strings.to_hash_bucket_fast` (corresponds to `tf.string_to_hash_bucket_fast`), `tf.strings.to_hash_bucket_strong` (corresponds to `tf.string_to_hash_bucket_strong`).\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAg Ramesh, Alex Wiltschko, Alexander Pantyukhin, Amogh Mannekote, An Jiaoyang, Andrei Nigmatulin, Andrew Ginns, Bj\u00f8Rn Moholt, Brett Koonce, Chengzhi Chen, Chinmay Das, Christian Ertler, Christoph Boeddeker, Clayne Robison, Courtial Florian, ctiijima, Dan Douthit, Dan J, Dan Ringwalt, EFanZh, Emanuele Ballarin, eqy, Evgeniy Zheltonozhskiy, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, G K, gracehoney, Guillaume Klein, Guozhong Zhuang, Hsien-Yang Li, hsm207, ImSheridan, Jayaram Bobba, Jiandong Ruan, Jie, Joel Shor, Jonas Rauber, Jongmin Baek, jsawruk, Karan Kaw, Karl Lessard, karl@kubx.ca, Kb Sriram, KinmanLam, leiiwang, Li, Yiqiang, Loo Rong Jie, Mahmoud Abuzaina, Mahmoud Aslan, ManHyuk, Martin Patz, Martin Zeitler, mktozk, Mohammad Ashraf Bhuiyan, mrTsjolder, Naman Bhalla, Nick Felt, Nicolas Lopez, Niranjan Hasabnis, Nishidha Panpaliya, Nitish, nrstott, Nutti, Parag Jain, PeterLee, Philipp Jund, Rach L, Rafal Wojdyla, Roland Zimmermann, Sergei Lebedev, SneakyFish5, Soila Kavulya, Sriram Veturi, Steven Schmatz, Taehoon Lee, Tang, Wenyi, Taras Sereda, Ted Chang, Tim Zaman, Tristan Rice, tucan, vchigrin, Vikram Tiwari, Vincent, WeberXie, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yong Tang, Yu Yi, Yuxin Wu, Z\u00e9 Vin\u00edCius"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12059816", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/12059816/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/12059816/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.10.0-rc0", "id": 12059816, "node_id": "MDc6UmVsZWFzZTEyMDU5ODE2", "tag_name": "v1.10.0-rc0", "target_commitish": "r1.10", "name": "TensorFlow 1.10.0-rc0", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-07-21T00:59:01Z", "published_at": "2018-07-23T16:44:01Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.10.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.10.0-rc0", "body": "# Release 1.10.0\r\n\r\n## Major Features And Improvements\r\n\r\n* The `tf.lite` runtime now supports `complex64`.\r\n* Initial Bigtable integration for `tf.data`.\r\n* Improved local run behavior in `tf.estimator.train_and_evaluate` which does not reload checkpoints for evaluation.\r\n* `RunConfig` now sets device_filters to restrict how workers and PS can communicate. This can speed up training and ensure clean shutdowns in some situations. But if you have jobs that require communication between workers, you will have to set custom session_options in your `RunConfig`.\r\n* Moved Distributions and Bijectors from `tf.contrib.distributions` to [Tensorflow Probability (TFP)](https://github.com/tensorflow/probability). `tf.contrib.distributions` is now deprecated and will be removed by the end of 2018.\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. See below for the complete list. New symbols have been added to the following modules: [`tf.debugging`](https://www.tensorflow.org/versions/master/api_docs/python/tf/debugging), [`tf.dtypes`](https://www.tensorflow.org/versions/master/api_docs/python/tf/dtypes), [`tf.image`](https://www.tensorflow.org/versions/master/api_docs/python/tf/image), [`tf.io`](https://www.tensorflow.org/versions/master/api_docs/python/tf/io), [`tf.linalg`](https://www.tensorflow.org/versions/master/api_docs/python/tf/linalg), [`tf.manip`](https://www.tensorflow.org/versions/master/api_docs/python/tf/manip), [`tf.math`](https://www.tensorflow.org/versions/master/api_docs/python/tf/math), [`tf.quantization`](https://www.tensorflow.org/versions/master/api_docs/python/tf/quantization), [`tf.strings`](https://www.tensorflow.org/versions/master/api_docs/python/tf/strings)\r\n\r\n## Breaking Changes\r\n\r\n* Prebuilt binaries are now (as of TensorFlow 1.10) built against NCCL 2.2 and no longer include NCCL in the binary install. TensorFlow usage with multiple GPUs and NCCL requires upgrade to [NCCL 2.2](https://developer.nvidia.com/nccl). See updated install guides: [Installing TensorFlow on Ubuntu](https://www.tensorflow.org/install/install_linux#tensorflow_gpu_support) and [Install TensorFlow from Sources](https://www.tensorflow.org/install/install_sources#optional_install_tensorflow_for_gpu_prerequisites).\r\n* Starting from TensorFlow 1.11, Windows builds will use Bazel. Therefore, we will drop official support for cmake.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tf.data`:\r\n  * `tf.contrib.data.group_by_reducer()` is now available via the public API.\r\n  * `tf.contrib.data.choose_from_datasets()` is now available via the public API.\r\n  * Adding `drop_remainder` argument to `tf.data.Dataset.batch()` and `tf.data.Dataset.padded_batch()`, deprecating tf.contrib.data.batch_and_drop_remainder()` and `tf.contrib.data.padded_batch_and_drop_remainder()`.\r\n* `tf.estimator`:\r\n  * `Estimator`s now use custom savers included in `EstimatorSpec` scaffolds for saving SavedModels during export.\r\n  * `EstimatorSpec` will now add a default prediction output for export if no `export_output` is provided, eliminating the need to explicitly include a `PredictOutput` object in the `model_fn` for simple use-cases.\r\n  * Support sparse_combiner in canned Linear Estimators.\r\n  * Added batch normalization to `DNNClassifier`, `DNNRegressor`, and `DNNEstimator`.\r\n  * Adding ranking support for boosted trees.\r\n  * Adding center bias option for boosted trees.\r\n* Add `synchronization` and `aggregation` args to get_variable(). These args will be used for distributed variables.\r\n* Add `synchronization` and `aggregation` args to the layer `add_weight()` API. These args will be used for distributed variables.\r\n* `tf.losses.*` do not add to the global collection when executing eagerly (to avoid leaking memory).\r\n* Support different summary and checkpoint directories in `tf.train.MonitoredTrainingSession()`.\r\n* Added IndRNN, IndyGRU, and IndyLSTM cells to `tf.contrib.rnn`.\r\n* Add safe static factory functions for SparseTensor and convert all CHECKs to DCHECKs. Using the constructor directly is unsafe and deprecated.\r\n* Make the Bigtable client connection pool configurable & increase the default # of connections for performance.\r\n* Added derivative of `tf.random_gamma` with respect to the alpha parameter.\r\n* Added derivative of `tf.igamma(a, x)` and `tf.igammac(a, x)` with respect to a.\r\n* Modified Bessel functions of order zero and one.\r\n* Add FillTriangular Bijector to create triangular matrices.\r\n* Added support for Type III DCT, and `tf.spectral.idct(type=2|3)`.\r\n* Correctly handle CuDNN RNN weight loaded when nest in `TimeDistributed`.\r\n* Adding per-element weight support for `WALSComputePartialLhsAndRhsOp`.\r\n* ZerosLike and OnesLike ops treated as constants by Graph Transform Tool.\r\n* Gamma distribution and the derived distributions (Beta, Dirichlet, Student's t, inverse Gamma) now fully reparameterized.\r\n* Java: Experimental wrapper classes to make graph generation easier. Thanks @karllessard and @kbsriram\r\n* Build & link in secure gRPC components (switch from the insecure grpc dependency to secure grpc dependency).\r\n* Adding new endpoints for existing tensorflow symbols. These endpoints are going to be the preferred endpoints going forward and may replace some of the existing endpoints in the future. List of new endpoints:\r\n  * New endpoints in `tf.image` namespace: `tf.image.extract_image_patches`\r\n  * New endpoints in `tf.debugging` namespace: `tf.debugging.check_numerics`, `tf.debugging.is_finite`, `tf.debugging.is_inf`, `tf.debugging.is_nan`.\r\n  * New endpoints in `tf.dtypes` namespace: `tf.dtypes.as_string`.\r\n  * New endpoints in `tf.io` namespace: `tf.io.decode_base64`, `tf.io.decode_compressed`, `tf.io.decode_json_example`, `tf.io.decode_raw`, `tf.io.encode_base64`, `tf.io.matching_files`, `tf.io.parse_tensor`, `tf.io.read_file, `tf.io.write_file`.\r\n  * New endpoints in tf.linalg namespace: `tf.linalg.cross`, `tf.linalg.tensor_diag` (corresponds to `tf.diag`), `tf.linalg.tensor_diag_part` (corresponds to `tf.diag_part`).\r\n  * New endpoints in tf.manip namespace: `tf.manip.batch_to_space_nd`, `tf.manip.gather_nd`, `tf.manip.reshape`, `tf.manip.reverse`, `tf.manip.scatter_nd`, `tf.manip.space_to_batch_nd`, `tf.manip.tile`\r\n  * New endpoints in tf.math namespace: `tf.math.acos`, `tf.math.acosh`, `tf.math.add`, `tf.math.asin`, `tf.math.asinh`, `tf.math.atan`, `tf.math.atan2`, `tf.math.atanh`, `tf.math.betainc`, `tf.math.ceil`, `tf.math.cos`, `tf.math.cosh`, `tf.math.digamma`, `tf.math.equal`, `tf.math.erfc`, `tf.math.exp`, `tf.math.expm1`, `tf.math.floor`, `tf.math.greater`, `tf.math.greater_equal`, `tf.math.igamma`, `tf.math.igammac`, `tf.math.invert_permutation`, `tf.math.less`, `tf.math.less_equal`, `tf.math.lgamma`, `tf.math.log`, `tf.math.log1p`, `tf.math.logical_and`, `tf.math.logical_not`, `tf.math.logical_or`, `tf.math.maximum`, `tf.math.minimum`, `tf.math.not_equal`, `tf.math.polygamma`, `tf.math.reciprocal`, `tf.math.rint`, `tf.math.rsqrt`, `tf.math.segment_max`, `tf.math.segment_mean`, `tf.math.segment_min`, `tf.math.segment_prod`, `tf.math.segment_sum`, `tf.math.sin`, `tf.math.sinh`, `tf.math.softplus`, `tf.math.softsign`, `tf.math.squared_difference`, `tf.math.tan`, `tf.math.unsorted_segment_max`, `tf.math.unsorted_segment_min`, `tf.math.unsorted_segment_prod`, `tf.math.unsorted_segment_sum`, `tf.math.zeta`.\r\n  * New endpoints in `tf.quantization` namespace: `tf.quantization.dequantize`, `tf.quantization.fake_quant_with_min_max_args`, `tf.quantization.fake_quant_with_min_max_args_gradient`, `tf.quantization.fake_quant_with_min_max_vars`,  `tf.quantization.fake_quant_with_min_max_vars_gradient`, `tf.quantization.fake_quant_with_min_max_vars_per_channel`,  `tf.quantization.fake_quant_with_min_max_vars_per_channel_gradient`.\r\n  * New endpoints in tf.strings namespace: `tf.strings.join` (corresponds to `tf.string_join`), `tf.strings.regex_replace`, `tf.strings.to_number` (corresponds to `tf.string_to_number`), `tf.strings.strip` (corresponds to `tf.string_strip`), `tf.strings.substr`, `tf.strings.to_hash_bucket` (corresponds to `tf.string_to_hash_bucket`), `tf.strings.to_hash_bucket_fast` (corresponds to `tf.string_to_hash_bucket_fast`), `tf.strings.to_hash_bucket_strong` (corresponds to `tf.string_to_hash_bucket_strong`).\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAg Ramesh, Alex Wiltschko, Alexander Pantyukhin, Amogh Mannekote, An Jiaoyang, Andrei Nigmatulin, Andrew Ginns, Bj\u00f8Rn Moholt, Brett Koonce, Chengzhi Chen, Chinmay Das, Christian Ertler, Christoph Boeddeker, Clayne Robison, Courtial Florian, ctiijima, Dan Douthit, Dan J, Dan Ringwalt, EFanZh, Emanuele Ballarin, eqy, Evgeniy Zheltonozhskiy, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, G K, gracehoney, Guillaume Klein, Guozhong Zhuang, Hsien-Yang Li, hsm207, ImSheridan, Jayaram Bobba, Jiandong Ruan, Jie, Joel Shor, Jonas Rauber, Jongmin Baek, jsawruk, Karan Kaw, Karl Lessard, karl@kubx.ca, Kb Sriram, KinmanLam, leiiwang, Li, Yiqiang, Loo Rong Jie, Mahmoud Abuzaina, Mahmoud Aslan, ManHyuk, Martin Patz, Martin Zeitler, mktozk, Mohammad Ashraf Bhuiyan, mrTsjolder, Naman Bhalla, Nick Felt, Nicolas Lopez, Niranjan Hasabnis, Nishidha Panpaliya, Nitish, nrstott, Nutti, Parag Jain, PeterLee, Philipp Jund, Rach L, Rafal Wojdyla, Roland Zimmermann, Sergei Lebedev, SneakyFish5, Soila Kavulya, Sriram Veturi, Steven Schmatz, Taehoon Lee, Tang, Wenyi, Taras Sereda, Ted Chang, Tim Zaman, Tristan Rice, tucan, vchigrin, Vikram Tiwari, Vincent, WeberXie, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yong Tang, Yu Yi, Yuxin Wu, Z\u00e9 Vin\u00edCius"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11856449", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11856449/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/11856449/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0", "id": 11856449, "node_id": "MDc6UmVsZWFzZTExODU2NDQ5", "tag_name": "v1.9.0", "target_commitish": "r1.9", "name": "TensorFlow 1.9.0", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-07-09T20:38:25Z", "published_at": "2018-07-10T13:15:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.9.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.9.0", "body": "# Release 1.9.0\r\n\r\n## Major Features And Improvements\r\n* Updated docs for `tf.keras`: New Keras-based [get started](http://tensorflow.org/versions/r1.9/get_started) and [programmers guide page](http://tensorflow.org/versions/r1.9/programmers_guide/keras).\r\n* Update `tf.keras` to the Keras 2.1.6 API.\r\n* Added [`tf.keras.layers.CuDNNGRU`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/keras/layers/CuDNNGRU) and [`tf.keras.layers.CuDNNLSTM`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/keras/layers/CuDNNLSTM) layers. [Try it](https://colab.sandbox.google.com/github/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/examples/nmt_with_attention/nmt_with_attention.ipynb?linkId=53292082).\r\n* Adding support of core [feature columns](https://www.tensorflow.org/get_started/feature_columns) and [losses](https://www.tensorflow.org/api_docs/python/tf/losses) to [gradient boosted trees estimators](https://github.com/tensorflow/models/tree/master/official/boosted_trees).\r\n* The [python interface](https://tensorflow-dot-devsite.googleplex.com/versions/r1.9/api_docs/python/tf/contrib/lite) for the [TFLite Optimizing Converter](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/toco/README.md) has been expanded, and the command line interface (AKA: `toco`, `tflite_convert`) is once again included in the standard `pip` installation.\r\n* Improved data-loading and text processing with:\r\n    * [`tf.decode_compressed`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/decode_compressed)\r\n    * [`tf.string_strip`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/string_strip)\r\n    * [`tf.strings.regex_full_match`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/strings/regex_full_match)\r\n* Added experimental support for new pre-made Estimators:\r\n  * [`tf.contrib.estimator.BaselineEstimator`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/BaselineEstimator)\r\n  * [`tf.contrib.estimator.RNNClassifier`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/RNNEstimator)\r\n  * [`tf.contrib.estimator.RNNEstimator`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/RNNClassifier)\r\n* The [distributions.Bijector](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/distributions/bijectors/Bijector) API supports broadcasting for Bijectors with new API changes.\r\n  \r\n## Breaking Changes\r\n  * If you're opening empty variable scopes; replace `variable_scope('', ...)` by `variable_scope(tf.get_variable_scope(), ...)`.\r\n  * Headers used for building custom ops have been moved from site-packages/external into site-packages/tensorflow/include/external.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tfe.Network` is deprecated. Please inherit from `tf.keras.Model`.\r\n* Layered variable names have changed in the following conditions:\r\n  * Using `tf.keras.layers` with custom variable scopes.\r\n  * Using `tf.layers` in  a subclassed `tf.keras.Model` class. See [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/layers) for more details\r\n\r\n* `tf.data`:\r\n  * `Dataset.from_generator()` now accepts an `args` list, in order to create nested generators.\r\n  * `Dataset.list_files()` now produces determinstic results when `shuffle=False` or a `seed` is passed.\r\n  * `tf.contrib.data.sample_from_datasets()` and `tf.contrib.data.choose_from_datasets()` make it easier to sample or deterministically choose elements from multiple datasets.\r\n  * `tf.contrib.data.make_csv_dataset()` now supports line breaks in quoted strings, and two infrequently used arguments removed.\r\n  * (C++) `DatasetBase::DebugString()` is now `const`.\r\n  * (C++) `DatasetBase::MakeIterator()` has been renamed to `DatasetBase::MakeIteratorInternal()`.\r\n  * (C++) `IteratorBase::Initialize()` method was added to support raising errors during iterator construction.\r\n* Eager Execution:\r\n  * Added the ability to pause recording operations for gradient computation via `tf.GradientTape.stop_recording`.\r\n  * Updated documentation, introductory notebooks.\r\n* `tf.keras`:\r\n  * Move Keras code out of _impl folder and remove API files.\r\n  * `tf.keras.Model.save_weights` now saves in TensorFlow format by default.\r\n  * Enable dataset iterators to be passed to `tf.keras.Model` training/eval methods.\r\n* TensorFlow Debugger (tfdbg)\r\n  * Fix an issue in which the TensorBoard Debugger Plugin could not handle total source file size exceeding gRPC message size limit (4 MB).\r\n* `tf.contrib`:\r\n  * `tf.contrib.framework.zero_initializer` supports ResourceVariable.\r\n  * Adding \"constrained_optimization\" to tensorflow/contrib.\r\n* Other:\r\n  * Add GCS Configuration Ops.\r\n  * Changing signature of `MakeIterator` to enable propagating error status.\r\n  * KL divergence for two Dirichlet distributions.\r\n  * More consistent GcsFileSystem behavior for certain reads past EOF.\r\n  * Update benchmark for tf.scan to match ranges across eager and graph modes.\r\n  * Fixed bug in `tf.reduce_prod gradient` for complex dtypes.\r\n  * Allow the use of '.' in variables (e.g. \"hparams.parse('a.b=1.0')\"), which would previously raise an error. This will correspond to an attribute name with an embedded '.' symbol (e.g. 'a.b'), which can only be accessed indirectly (e.g. through getattr and setattr).  To set this up the user will first need to explicitly add the variable to the hparam object (e.g. \"hparams.add_hparam(name='a.b', value=0.0)\").\r\n  * Benchmark for tf.scan in graph and eager modes.\r\n  * Added complex128 support to FFT, FFT2D, FFT3D, IFFT, IFFT2D, and IFFT3D.\r\n  * Making ids unique in `nn.embedding_lookup_sparse`. This helps to reduce RPC calls for looking up the embeddings when there are repeated ids in the batch.\r\n  * Support indicator column in boosted trees.\r\n  * Prevent `tf.gradients()` from backpropagating through integer tensors.\r\n  * LinearOperator[1D,2D,3D]Circulant added to `tensorflow.linalg`.\r\n  * Conv3D, Conv3DBackpropInput, Conv3DBackpropFilter now supports arbitrary.\r\n  * Added `tf.train.Checkpoint` for reading/writing object-based checkpoints.\r\n  * Added LinearOperatorKronecker, a dense-free implementation of the Kronecker Product.\r\n  * Allow LinearOperator to broadcast.\r\n  * SavedModelBuilder will now deduplicate asset names that point to files with the same basename and the same contents. Note that this may result in new asset files included in SavedModels in cases where assets with the same name but different contents were previously overwriting each other.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbdullah Alrasheed, Achal Shah, Ad-530, ADiegoCAlonso, Aditya Yogi, Ag Ramesh, akindyakov, Andy Kernahan, Anya Petrova, Aurelien Geron, Ben, Ben Barsdell, Bhavani-Subramanian, braincodercn, Brett Koonce, Brian Nemsick, Brian Zier, Bryan Heden, candy.dc, cclauss, Clayne Robison, ctiijima, Dalmo Cirne, David Norman, David T.H. Kao, DosLin, ekelsen, Elson Rodriguez, Erik Smistad, Felix Abecassis, Fergal Cotter, fo40225, foo0x29a, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, gdh1995, Geoffrey Irving, Giuseppe, gracehoney, Guido Zuidhof, Guillaume Klein, Guozhong Zhuang, Haggai, Harald Husum, imsheridan, Ivan Zhang, Jan Zikes, Jayaram Bobba, Jesse Benson, Jesse Gumz, Jiajia Li, Jie, jinghuangintel, Jingwen, jjsjann123, Joe Yearsley, Joel Hestness, Joel Shor, josephyearsley, Junpeng Lao, Karol M. Langner, Kb Sriram, krantideep95, Krish Ravindranath, Letian Feng, Loo Rong Jie, Lukas Geiger, Maciej, Mahmoud Abuzaina, ManHyuk, Mark Ryan, mbhuiyan, Michal Turek, Mostafa Alaa, Myungsung Kwak, Nand Dalal, Nehal J Wani, Neil Tenenholtz, ngc92, Nicholas Nadeau, P.Eng., Avs, Niranjan Hasabnis, P-Hidringer, Paul Van Eck, Peng Yu, Qing Zhao, Qingying Chen, Quanlong, Rajendra Arora, Rholais Lii, rmanyari, Robin Richtsfeld, Russell Klopfer, Sagi, Sam Sendelbach, Sandeep N Gupta, Sandip Giri, Sarah Edkins, Scott Tseng, Sdalbsoo, Sergii Khomenko, Seungwoo Choi (Biggie), Seyed Majid Azimi, Shaoning Zeng, shengfuintel, Siu Kei, Muk, Smit Shilu, soonson, Stefan Schweter, Sukhwan Kim, Sunitha Kambhampati, Taehoon Lee, tamimaddari82, Tang, Wenyi, Ted Chang, u2takey, Utkarsh Upadhyay, Vadim Markovtsev, voegtlel, Wai Hon Law, wangsiyu, Wenhao Hu, wenhao.hu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yihong Wang, Yilei (Dolee) Yang, Yong Tang, Yuan (Terry) Tang"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11748420", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11748420/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/11748420/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0-rc2", "id": 11748420, "node_id": "MDc6UmVsZWFzZTExNzQ4NDIw", "tag_name": "v1.9.0-rc2", "target_commitish": "r1.9", "name": "TensorFlow 1.9.0-rc2", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-07-02T22:07:51Z", "published_at": "2018-07-02T22:46:40Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.9.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.9.0-rc2", "body": "# Release 1.9.0\r\n\r\n## Major Features And Improvements\r\n* Updated docs for `tf.keras`: New Keras-based [get started](http://tensorflow.org/versions/r1.9/get_started),\r\n  and [programmers guide page](http://tensorflow.org/versions/r1.9/programmers_guide/keras).\r\n* Update `tf.keras` to the Keras 2.1.6 API.\r\n* Added [`tf.keras.layers.CuDNNGRU`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/keras/layers/CuDNNGRU) and [`tf.keras.layers.CuDNNLSTM`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/keras/layers/CuDNNLSTM) layers. [Try it](https://colab.sandbox.google.com/github/tensorflow/tensorflow/blob/master/tensorflow/contrib/eager/python/examples/nmt_with_attention/nmt_with_attention.ipynb?linkId=53292082).\r\n* Adding support of core [feature columns](https://www.tensorflow.org/get_started/feature_columns) and [losses](https://www.tensorflow.org/api_docs/python/tf/losses) to [gradient boosted trees estimators](https://github.com/tensorflow/models/tree/master/official/boosted_trees).\r\n* The [python interface](https://tensorflow-dot-devsite.googleplex.com/versions/r1.9/api_docs/python/tf/contrib/lite)\r\n  for the [TFLite Optimizing Converter](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/lite/toco/README.md)\r\n  has been expanded, and the command line interface (AKA: `toco`, `tflite_convert`) is once again\r\n  included in the standard `pip` installation.\r\n* Improved data-loading and text processing with:\r\n    * [`tf.decode_compressed`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/decode_compressed)\r\n    * [`tf.string_strip`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/string_strip)\r\n    * [`tf.strings.regex_full_match`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/strings/regex_full_match)\r\n* Added experimental support for new pre-made Estimators:\r\n  * [`tf.contrib.estimator.BaselineEstimator`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/BaselineEstimator)\r\n  * [`tf.contrib.estimator.RNNClassifier`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/RNNEstimator)\r\n  * [`tf.contrib.estimator.RNNEstimator`](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/estimator/RNNClassifier)\r\n* The [distributions.Bijector](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/contrib/distributions/bijectors/Bijector)\r\n  API supports broadcasting for Bijectors with new API changes.\r\n  \r\n## Breaking Chances\r\n  * If you're opening empty variable scopes; replace `variable_scope('', ...)` by\r\n    `variable_scope(tf.get_variable_scope(), ...)`.\r\n  * Headers used for building custom ops have been moved from site-packages/external into site-packages/tensorflow/include/external.\r\n\r\n## Bug Fixes and Other Changes\r\n\r\n* `tfe.Network` is deprecated. Please inherit from `tf.keras.Model`.\r\n* Layered variable names have changed in the following conditions:\r\n  * Using `tf.keras.layers` with custom variable scopes.\r\n  * Using `tf.layers` in  a subclassed `tf.keras.Model` class. See\r\n    [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/layers) for more details\r\n* `tf.data`:\r\n  * The `DatasetBase::DebugString()` method is now `const`.\r\n  * Added the `tf.contrib.data.sample_from_datasets()` API for randomly sampling from multiple datasets.\r\n* Eager Execution:\r\n* `tf.keras`:\r\n  * Move Keras code out of _impl folder and remove API files.\r\n  * `tf.keras.Model.save_weights` now saves in TensorFlow format by default.\r\n  * Enable dataset iterators to be passed to `tf.keras.Model` training/eval methods.\r\n* Accelerated Linear Algebra (XLA):\r\n* TensorFlow Debugger (tfdbg): fix an issue in which the TensorBoard Debugger Plugin could not handle total source file size exceeding gRPC message size limit (4 MB).\r\n* `tf.contrib`:\r\n  * Add `tf.contrib.data.choose_from_datasets()`.\r\n  * `tf.contrib.data.make_csv_dataset()` now supports line breaks in quoted strings. Two arguments were removed from `make_csv_dataset`.\r\n  * `tf.contrib.framework.zero_initializer` supports ResourceVariable.\r\n  * Adding \"constrained_optimization\" to tensorflow/contrib.\r\n* Other:\r\n  * Add GCS Configuration Ops.\r\n  * Changing signature of `MakeIterator` to enable propagating error status.\r\n  * KL divergence for two Dirichlet distributions.\r\n  * More consistent GcsFileSystem behavior for certain reads past EOF.\r\n  * Update benchmark for tf.scan to match ranges across eager and graph modes.\r\n  * Fixed bug in `tf.reduce_prod gradient` for complex dtypes.\r\n  * Add optional `args` argument to `Dataset.from_generator()`.\r\n  * Allow the use of '.' in variables (e.g. \"hparams.parse('a.b=1.0')\"), which would previously raise an error. This will correspond to an attribute name with an embedded '.' symbol (e.g. 'a.b'), which can only be accessed indirectly (e.g. through getattr and setattr).  To set this up the user will first need to explicitly add the variable to the hparam object (e.g. \"hparams.add_hparam(name='a.b', value=0.0)\").\r\n  * Benchmark for tf.scan in graph and eager modes.\r\n  * Added complex128 support to FFT, FFT2D, FFT3D, IFFT, IFFT2D, and IFFT3D.\r\n  * Making ids unique in `nn.embedding_lookup_sparse`. This helps to reduce RPC calls for looking up the embeddings when there are repeated ids in the batch.\r\n  * Support indicator column in boosted trees.\r\n  * Prevent `tf.gradients()` from backpropagating through integer tensors.\r\n  * LinearOperator[1D,2D,3D]Circulant added to `tensorflow.linalg`.\r\n  * Conv3D, Conv3DBackpropInput, Conv3DBackpropFilter now supports arbitrary.\r\n  * Added `tf.train.Checkpoint` for reading/writing object-based checkpoints.\r\n  * `Dataset.list_files()` now produces determinstic results when `shuffle=False` or a `seed` is passed.\r\n  * Added LinearOperatorKronecker, a dense-free implementation of the Kronecker Product.\r\n  * Allow LinearOperator to broadcast.\r\n  * SavedModelBuilder will now deduplicate asset names that point to files with the same basename and the same contents. Note that this may result in new asset files included in SavedModels in cases where assets with the same name but different contents were previously overwriting each other.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbdullah Alrasheed, Achal Shah, Ad-530, ADiegoCAlonso, Aditya Yogi, Ag Ramesh, akindyakov, Andy Kernahan, Anya Petrova, Aurelien Geron, Ben, Ben Barsdell, Bhavani-Subramanian, braincodercn, Brett Koonce, Brian Nemsick, Brian Zier, Bryan Heden, candy.dc, cclauss, Clayne Robison, ctiijima, Dalmo Cirne, David Norman, David T.H. Kao, DosLin, ekelsen, Elson Rodriguez, Erik Smistad, Felix Abecassis, Fergal Cotter, fo40225, foo0x29a, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, gdh1995, Geoffrey Irving, Giuseppe, gracehoney, Guido Zuidhof, Guillaume Klein, Guozhong Zhuang, Haggai, Harald Husum, imsheridan, Ivan Zhang, Jan Zikes, Jayaram Bobba, Jesse Benson, Jesse Gumz, Jiajia Li, Jie, jinghuangintel, Jingwen, jjsjann123, Joe Yearsley, Joel Hestness, Joel Shor, josephyearsley, Junpeng Lao, Karol M. Langner, Kb Sriram, krantideep95, Krish Ravindranath, Letian Feng, Loo Rong Jie, Lukas Geiger, Maciej, Mahmoud Abuzaina, ManHyuk, Mark Ryan, mbhuiyan, Michal Turek, Mostafa Alaa, Myungsung Kwak, Nand Dalal, Nehal J Wani, Neil Tenenholtz, ngc92, Nicholas Nadeau, P.Eng., Avs, Niranjan Hasabnis, P-Hidringer, Paul Van Eck, Peng Yu, Qing Zhao, Qingying Chen, Quanlong, Rajendra Arora, Rholais Lii, rmanyari, Robin Richtsfeld, Russell Klopfer, Sagi, Sam Sendelbach, Sandeep N Gupta, Sandip Giri, Sarah Edkins, Scott Tseng, Sdalbsoo, Sergii Khomenko, Seungwoo Choi (Biggie), Seyed Majid Azimi, Shaoning Zeng, shengfuintel, Siu Kei, Muk, Smit Shilu, soonson, Stefan Schweter, Sukhwan Kim, Sunitha Kambhampati, Taehoon Lee, tamimaddari82, Tang, Wenyi, Ted Chang, u2takey, Utkarsh Upadhyay, Vadim Markovtsev, voegtlel, Wai Hon Law, wangsiyu, Wenhao Hu, wenhao.hu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yihong Wang, Yilei (Dolee) Yang, Yong Tang, Yuan (Terry) Tang"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11489395", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11489395/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/11489395/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0-rc1", "id": 11489395, "node_id": "MDc6UmVsZWFzZTExNDg5Mzk1", "tag_name": "v1.9.0-rc1", "target_commitish": "r1.9", "name": "TensorFlow 1.9.0-rc1", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-06-14T13:24:27Z", "published_at": "2018-06-14T19:58:03Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.9.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.9.0-rc1", "body": "# Release 1.9.0\r\n\r\n## Major Features And Improvements\r\n* Update tf.keras to the Keras 2.1.6 API.\r\n* `tfe.Network` is deprecated. Please inherit from `tf.keras.Model`.\r\n* Adding support of core feature columns and losses to gradient boosted trees estimators.\r\n* The distributions.Bijector API supports broadcasting for Bijectors with new API changes. See [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/distributions/bijectors/Bijector) for more details.\r\n* Layered variable names have changed in the following conditions:\r\n  * Using `tf.keras.layers` with custom variable scopes.\r\n  * Using `tf.layers` in  a subclassed `tf.keras.Model` class. See [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/layers) for more details\r\n\r\n## Breaking Chances\r\n  * If you're opening empty variable scopes; replace `variable_scope`('', ...) by `variable_scope`(`tf.get_variable_scope()`, ...).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * `Dataset.from_generator()` now accepts an `args` list, in order to create nested generators.\r\n  * `Dataset.list_files()` now produces determinstic results when `shuffle=False` or a `seed` is passed.\r\n  * `tf.contrib.data.sample_from_datasets()` and `tf.contrib.data.choose_from_datasets()` make it easier to sample or deterministically choose elements from multiple datasets.\r\n  * `tf.contrib.data.make_csv_dataset()` now supports line breaks in quoted strings, and two infrequently used arguments removed.\r\n  * (C++) `DatasetBase::DebugString()` is now `const`.\r\n  * (C++) `DatasetBase::MakeIterator()` has been renamed to `DatasetBase::MakeIteratorInternal()`.\r\n  * (C++) `IteratorBase::Initialize()` method was added to support raising errors during iterator construction.\r\n* Eager Execution:\r\n* `tf.keras`:\r\n  * Move Keras code out of _impl folder and remove API files.\r\n  * `tf.keras.Model.save_weights` now saves in TensorFlow format by default.\r\n  * Enable dataset iterators to be passed to `tf.keras.Model` training/eval methods.\r\n* TensorFlow Debugger (tfdbg) CLI: fix an issue in which the TensorBoard Debugger Plugin could not handle total source file size exceeding gRPC message size limit (4 MB).\r\n* `tf.contrib`:\r\n  * `tf.contrib.framework.zero_initializer` supports ResourceVariable.\r\n  * Adding \"constrained_optimization\" to tensorflow/contrib.\r\n* Other:\r\n  * Add GCS Configuration Ops.\r\n  * Changing signature of `MakeIterator` to enable propagating error status.\r\n  * KL divergence for two Dirichlet distributions.\r\n  * More consistent GcsFileSystem behavior for certain reads past EOF.\r\n  * Update benchmark for tf.scan to match ranges across eager and graph modes.\r\n  * Fixed bug in `tf.reduce_prod gradient` for complex dtypes.\r\n  * Allow the use of '.' in variables (e.g. \"hparams.parse('a.b=1.0')\"), which would previously raise an error. This will correspond to an attribute name with an embedded '.' symbol (e.g. 'a.b'), which can only be accessed indirectly (e.g. through getattr and setattr).  To set this up the user will first need to explicitly add the variable to the hparam object (e.g. \"hparams.add_hparam(name='a.b', value=0.0)\").\r\n  * Benchmark for tf.scan in graph and eager modes.\r\n  * Added complex128 support to FFT, FFT2D, FFT3D, IFFT, IFFT2D, and IFFT3D.\r\n  * Making ids unique in `nn.embedding_lookup_sparse`. This helps to reduce RPC calls for looking up the embeddings when there are repeated ids in the batch.\r\n  * Support indicator column in boosted trees.\r\n  * Prevent `tf.gradients()` from backpropagating through integer tensors.\r\n  * LinearOperator[1D,2D,3D]Circulant added to `tensorflow.linalg`.\r\n  * Conv3D, Conv3DBackpropInput, Conv3DBackpropFilter now supports arbitrary.\r\n  * Added `tf.train.Checkpoint` for reading/writing object-based checkpoints.\r\n  * Added LinearOperatorKronecker, a dense-free implementation of the Kronecker Product.\r\n  * Allow LinearOperator to broadcast.\r\n  * SavedModelBuilder will now deduplicate asset names that point to files with the same basename and the same contents. Note that this may result in new asset files included in SavedModels in cases where assets with the same name but different contents were previously overwriting each other.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbdullah Alrasheed, Achal Shah, Ad-530, ADiegoCAlonso, Aditya Yogi, Ag Ramesh, akindyakov, Andy Kernahan, Anya Petrova, Aurelien Geron, Ben, Ben Barsdell, Bhavani-Subramanian, braincodercn, Brett Koonce, Brian Nemsick, Brian Zier, Bryan Heden, candy.dc, cclauss, Clayne Robison, ctiijima, Dalmo Cirne, David Norman, David T.H. Kao, DosLin, ekelsen, Elson Rodriguez, Erik Smistad, Felix Abecassis, Fergal Cotter, fo40225, foo0x29a, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, gdh1995, Geoffrey Irving, Giuseppe, gracehoney, Guido Zuidhof, Guillaume Klein, Guozhong Zhuang, Haggai, Harald Husum, imsheridan, Ivan Zhang, Jan Zikes, Jayaram Bobba, Jesse Benson, Jesse Gumz, Jiajia Li, Jie, jinghuangintel, Jingwen, jjsjann123, Joe Yearsley, Joel Hestness, Joel Shor, josephyearsley, Junpeng Lao, Karol M. Langner, Kb Sriram, krantideep95, Krish Ravindranath, Letian Feng, Loo Rong Jie, Lukas Geiger, Maciej, Mahmoud Abuzaina, ManHyuk, Mark Ryan, mbhuiyan, Michal Turek, Mostafa Alaa, Myungsung Kwak, Nand Dalal, Nehal J Wani, Neil Tenenholtz, ngc92, Nicholas Nadeau, P.Eng., Avs, Niranjan Hasabnis, P-Hidringer, Paul Van Eck, Peng Yu, Qing Zhao, Qingying Chen, Quanlong, Rajendra Arora, Rholais Lii, rmanyari, Robin Richtsfeld, Russell Klopfer, Sagi, Sam Sendelbach, Sandeep N Gupta, Sandip Giri, Sarah Edkins, Scott Tseng, Sdalbsoo, Sergii Khomenko, Seungwoo Choi (Biggie), Seyed Majid Azimi, Shaoning Zeng, shengfuintel, Siu Kei, Muk, Smit Shilu, soonson, Stefan Schweter, Sukhwan Kim, Sunitha Kambhampati, Taehoon Lee, tamimaddari82, Tang, Wenyi, Ted Chang, u2takey, Utkarsh Upadhyay, Vadim Markovtsev, voegtlel, Wai Hon Law, wangsiyu, Wenhao Hu, wenhao.hu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yihong Wang, Yilei (Dolee) Yang, Yong Tang, Yuan (Terry) Tang"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11361731", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/11361731/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/11361731/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.9.0-rc0", "id": 11361731, "node_id": "MDc6UmVsZWFzZTExMzYxNzMx", "tag_name": "v1.9.0-rc0", "target_commitish": "r1.9", "name": "TensorFlow 1.9.0-rc0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-06-06T22:07:00Z", "published_at": "2018-06-07T14:59:33Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.9.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.9.0-rc0", "body": "# Release 1.9.0\r\n\r\n## Major Features And Improvements\r\n* Update tf.keras to the Keras 2.1.6 API.\r\n* `tfe.Network` is deprecated. Please inherit from `tf.keras.Model`.\r\n* Adding support of core feature columns and losses to gradient boosted trees estimators.\r\n* The distributions.Bijector API supports broadcasting for Bijectors with new API changes. See [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/distributions/bijectors/Bijector) for more details.\r\n* Layered variable names have changed in the following conditions:\r\n  * Using `tf.keras.layers` with custom variable scopes.\r\n  * Using `tf.layers` in  a subclassed `tf.keras.Model` class. See [here](https://www.tensorflow.org/versions/r1.9/api_docs/python/tf/layers) for more details\r\n\r\n## Breaking Chances\r\n  * If you're opening empty variable scopes; replace `variable_scope`('', ...) by `variable_scope`(`tf.get_variable_scope()`, ...).\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * The `DatasetBase::DebugString()` method is now `const`.\r\n  * Added the `tf.contrib.data.sample_from_datasets()` API for randomly sampling from multiple datasets.\r\n* Eager Execution:\r\n* `tf.keras`:\r\n  * Move Keras code out of _impl folder and remove API files.\r\n  * `tf.keras.Model.save_weights` now saves in TensorFlow format by default.\r\n  * Enable dataset iterators to be passed to `tf.keras.Model` training/eval methods.\r\n* Accelerated Linear Algebra (XLA):\r\n* TensorFlow Debugger (tfdbg) CLI:\r\n* `tf.contrib`:\r\n  * Add `tf.contrib.data.choose_from_datasets()`.\r\n  * `tf.contrib.data.make_csv_dataset()` now supports line breaks in quoted strings. Two arguments were removed from `make_csv_dataset`.\r\n  * `tf.contrib.framework.zero_initializer` supports ResourceVariable.\r\n  * Adding \"constrained_optimization\" to tensorflow/contrib.\r\n* Other:\r\n  * Add GCS Configuration Ops.\r\n  * Changing signature of `MakeIterator` to enable propagating error status.\r\n  * KL divergence for two Dirichlet distributions.\r\n  * More consistent GcsFileSystem behavior for certain reads past EOF.\r\n  * Update benchmark for tf.scan to match ranges across eager and graph modes.\r\n  * Fixed bug in `tf.reduce_prod gradient` for complex dtypes.\r\n  * Add optional `args` argument to `Dataset.from_generator()`.\r\n  * Allow the use of '.' in variables (e.g. \"hparams.parse('a.b=1.0')\"), which would previously raise an error. This will correspond to an attribute name with an embedded '.' symbol (e.g. 'a.b'), which can only be accessed indirectly (e.g. through getattr and setattr).  To set this up the user will first need to explicitly add the variable to the hparam object (e.g. \"hparams.add_hparam(name='a.b', value=0.0)\").\r\n  * Benchmark for tf.scan in graph and eager modes.\r\n  * Added complex128 support to FFT, FFT2D, FFT3D, IFFT, IFFT2D, and IFFT3D.\r\n  * Making ids unique in `nn.embedding_lookup_sparse`. This helps to reduce RPC calls for looking up the embeddings when there are repeated ids in the batch.\r\n  * Support indicator column in boosted trees.\r\n  * Prevent `tf.gradients()` from backpropagating through integer tensors.\r\n  * LinearOperator[1D,2D,3D]Circulant added to `tensorflow.linalg`.\r\n  * Conv3D, Conv3DBackpropInput, Conv3DBackpropFilter now supports arbitrary.\r\n  * Added `tf.train.Checkpoint` for reading/writing object-based checkpoints.\r\n  * `Dataset.list_files()` now produces determinstic results when `shuffle=False` or a `seed` is passed.\r\n  * Added LinearOperatorKronecker, a dense-free implementation of the Kronecker Product.\r\n  * Allow LinearOperator to broadcast.\r\n  * SavedModelBuilder will now deduplicate asset names that point to files with the same basename and the same contents. Note that this may result in new asset files included in SavedModels in cases where assets with the same name but different contents were previously overwriting each other.\r\n\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAbdullah Alrasheed, Achal Shah, Ad-530, ADiegoCAlonso, Aditya Yogi, Ag Ramesh, akindyakov, Andy Kernahan, Anya Petrova, Aurelien Geron, Ben, Ben Barsdell, Bhavani-Subramanian, braincodercn, Brett Koonce, Brian Nemsick, Brian Zier, Bryan Heden, candy.dc, cclauss, Clayne Robison, ctiijima, Dalmo Cirne, David Norman, David T.H. Kao, DosLin, ekelsen, Elson Rodriguez, Erik Smistad, Felix Abecassis, Fergal Cotter, fo40225, foo0x29a, Freedom\" Koan-Sin Tan, Fr\u00e9D\u00e9Ric Branchaud-Charron, gdh1995, Geoffrey Irving, Giuseppe, gracehoney, Guido Zuidhof, Guillaume Klein, Guozhong Zhuang, Haggai, Harald Husum, imsheridan, Ivan Zhang, Jan Zikes, Jayaram Bobba, Jesse Benson, Jesse Gumz, Jiajia Li, Jie, jinghuangintel, Jingwen, jjsjann123, Joe Yearsley, Joel Hestness, Joel Shor, josephyearsley, Junpeng Lao, Karol M. Langner, Kb Sriram, krantideep95, Krish Ravindranath, Letian Feng, Loo Rong Jie, Lukas Geiger, Maciej, Mahmoud Abuzaina, ManHyuk, Mark Ryan, mbhuiyan, Michal Turek, Mostafa Alaa, Myungsung Kwak, Nand Dalal, Nehal J Wani, Neil Tenenholtz, ngc92, Nicholas Nadeau, P.Eng., Avs, Niranjan Hasabnis, P-Hidringer, Paul Van Eck, Peng Yu, Qing Zhao, Qingying Chen, Quanlong, Rajendra Arora, Rholais Lii, rmanyari, Robin Richtsfeld, Russell Klopfer, Sagi, Sam Sendelbach, Sandeep N Gupta, Sandip Giri, Sarah Edkins, Scott Tseng, Sdalbsoo, Sergii Khomenko, Seungwoo Choi (Biggie), Seyed Majid Azimi, Shaoning Zeng, shengfuintel, Siu Kei, Muk, Smit Shilu, soonson, Stefan Schweter, Sukhwan Kim, Sunitha Kambhampati, Taehoon Lee, tamimaddari82, Tang, Wenyi, Ted Chang, u2takey, Utkarsh Upadhyay, Vadim Markovtsev, voegtlel, Wai Hon Law, wangsiyu, Wenhao Hu, wenhao.hu, William D. Irons, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yihong Wang, Yilei (Dolee) Yang, Yong Tang, Yuan (Terry) Tang\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10860033", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10860033/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10860033/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.7.1", "id": 10860033, "node_id": "MDc6UmVsZWFzZTEwODYwMDMz", "tag_name": "v1.7.1", "target_commitish": "r1.7", "name": "TensorFlow 1.7.1", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-05-04T19:13:34Z", "published_at": "2018-05-04T19:58:07Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.7.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.7.1", "body": "# Release 1.7.1\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes the following potential security vulnerabilities:\r\n  * The TensorFlow Lite TOCO compiler did not perform correct boundary checks when reading from some fields within TFLite files.\r\n  * The block size in meta file could contain a large int64 value which causes an integer overflow upon addition. Subsequent code using n as index may cause an out-of-bounds read.\r\n  * TensorFlow checkpoint meta file uses Google's [https://github.com/google/snappy](snappy) compression/decompression library. There is a memcpy-param-overlap issue in the version of snappy currently used by TensorFlow.\r\n  * A maliciously crafted configuration file passed into the TensorFlow XLA compiler could cause an invalid memory access and/or a heap buffer overflow.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10759885", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10759885/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10759885/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.8.0", "id": 10759885, "node_id": "MDc6UmVsZWFzZTEwNzU5ODg1", "tag_name": "v1.8.0", "target_commitish": "r1.8", "name": "TensorFlow 1.8.0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-04-27T16:36:49Z", "published_at": "2018-04-27T18:32:36Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.8.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.8.0", "body": "# Release 1.8.0\r\n\r\n## Major Features And Improvements\r\n* Can now pass `tf.contrib.distribute.MirroredStrategy()` to `tf.estimator.RunConfig()` to run an Estimator model on multiple GPUs on one machine.\r\n* Add `tf.contrib.data.prefetch_to_device()`, which supports prefetching to GPU memory.\r\n* Added Gradient Boosted Trees as pre-made Estimators: BoostedTreesClassifier, BoostedTreesRegressor.\r\n* Add 3rd generation pipeline config for Cloud TPUs which improves performance and usability.\r\n* `tf.contrib.bayesflow` is moving out to it's own repo.\r\n* Added `tf.contrib.{proto,rpc}` to allow generic proto parsing and RPC communication<sup>[1](#rpc-issue)</sup>.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Add `tf.contrib.data.prefetch_to_device`, which enables prefetching dataset elements to GPU memory.\r\n  * Add `tf.contrib.data.AUTOTUNE`, which allows the tf.data runtime to automatically tune the prefetch buffer sizes based on your system and environment.\r\n  * Add `tf.contrib.data.make_csv_dataset` for building datasets of CSV files.\r\n* Eager Execution:\r\n  * With eager execution Datasets can now be used as standard python iterators (`for batch in dataset:`). Both `Dataset.__iter__()` and `Dataset.make_one_shot_iterator()` can now be used to create iterators when eager execution is enabled.\r\n  * Automatic device placement has been enabled (i.e., use a GPU if available automatically, without requiring an explicit `with tf.device(\u201c/gpu:0\u201d)`) (Fixes #14133)\r\n  * `tf.GradientTape` has moved out of contrib.\r\n* `tf.keras`:\r\n  * Added the fashion mnist dataset.\r\n  * New data preprocessing functions: `image/random_brightness`, `sequence/TimeseriesGenerator`, and `text/hashing_trick`.\r\n* Accelerated Linear Algebra (XLA):\r\n  * Select and scatter in reference util and evaluator now use lexicographical order to break ties.\r\n* TensorFlow Debugger (tfdbg) CLI:\r\n  * During tensor-filter operations, allow exclusion of nodes by regular expressions.\r\n  * Fix spurious background colors in some text terminals.\r\n* `tf.contrib`:\r\n  * Add meta-distribution BatchReshape which reshapes batch dimensions.\r\n  * `tf.contrib.layers.recompute_grad` works for explicit gradient checkpointing on TPU.\r\n  * Add `tf.contrib.framework.argsort`.\r\n  * Allow `DNNBoostedTreeCombinedEstimator` to work with core versions of feature columns and losses.\r\n  * Add non-linear image warping ops: `tf.contrib.image.sparse_image_warp`, `tf.contrib.image.dense_image_warp`, and `tf.contrib.image.interpolate_spline`.\r\n  * Fix bug in `tf.contrib.opt.MultitaskOptimizerWrapper` where types of tensors were mismatched.\r\n* Other:\r\n  * Low-level graph construction now calls the TensorFlow C API. This change should be invisible to most users, but can be disabled by setting the environment variable `TF_C_API_GRAPH_CONSTRUCTION=0` in this release. Future releases will remove the ability to disable this change. Please [file a bug](https://github.com/tensorflow/tensorflow/issues/new) if you find yourself using this escape hatch.\r\n  * Add description of shapes and a pointer to tutorial notebook in `tf.distributions.Distribution`.\r\n  * Update scatter operations:\r\n    * Add `tf.scatter_min` and `tf.scatter_max`\r\n    * Extend scatter operations to work with a scalar update parameter.\r\n  * Move cuDNN RNN ops to core for use in TensorFlow codebase only.\r\n  * Add `float64` support for `Conv2d`, `Conv2dBackpropInput`, and `Conv2dBackpropFilter`.\r\n  * Add `float64` support for `AvgPool`/`AvgPoolGrad`.\r\n  * Make graph name scope thread local so that they work correctly in multi-threaded environments.\r\n  * Update nsync synchronization library to avoid slow primitives on Linux.\r\n  * Removed need to put nsync/public on C include path when building custom ops.\r\n  * Add `tf.image.psnr`, `tf.image.ssim`, `tf.image.ssim_multiscale`, `tf.image.image_gradients`, `tf.image.sobel_edges`.\r\n  * Add links to https://js.tensorflow.org.\r\n  * Fix non-uniformity of orthogonal matrices.\r\n  * Fix bug where multi-image Estimator eval summaries were not displayed correctly.\r\n\r\n<a name=\"rpc-issue\"><sup>1</sup></a> The cancellation logic of the RPC op contains a concurrency error. A fix has been submitted to master and will be part of the next release.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Aghasy, Alan Du, Alan Lee, Alan Yee, Alex Wiltschko, Animesh Karnewar, Ankit Gupta, Anton Matosov, Aris L, Ben Barsdell, Brent Yi, Brett Koonce, Carl Thom\u00e9, cbockman, Chikanaga Tomoyuki, Chris Tava, C\u00e9Dric Deltheil, Dahan Gong, Dalmo Cirne, Daniel Erenrich, David Norman, DavidNorman, Edd Wilder-James, Fanjin Zeng, Felix Abecassis, fo40225, George Sterpu, Giovanni Terlingen, Gor Baghdasaryan, Guillaume Klein, Hanchen Li, Ilya Polenov, Jakub Kolodziejczyk, Jason Sadler, Jayaram Bobba, Jerry Liu, jinghuangintel, Jiongyan Zhang (\u5f20\u70af\u884d), Joel Shor, Jong Wook Kim, Julian Eisenschlos, Karl Lessard, Krish Ravindranath, Loo Rong Jie, Lukas Geiger, Luke Iwanski, Mahmoud Abuzaina, ManHyuk, Marvin Richter, Maximilian Mitchell, Mohammad Ashraf Bhuiyan, msofka, Mustafa Kasap, Nathan Burnham, Nathan Luehr, Naveen Marri, ngc92, nio1814, Oleg Zabluda, Ou Changkun, Panos Ipeirotis, Paul Van Eck, Peter Lee, Piotr Czapla, qjivy, Rholais Lii, Rodrigo Formigone, Russell Klopfer, ryantimjohn, Sang Han, Sebasti\u00e1N Ram\u00edRez, shengfuintel, Siby Jose Plathottam, Silver Chan, Stanislaw Antol, Taehoon Lee, Tarang Chugh, Ted Chang, Thomas Bastiani, Xian Xu, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), yaox12, Yashal Shakti Kanungo, Yong Tang, Yuan (Terry) Tang, Yuxin Wu, Ziyue(Louis) Lu\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10632466", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10632466/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10632466/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.8.0-rc1", "id": 10632466, "node_id": "MDc6UmVsZWFzZTEwNjMyNDY2", "tag_name": "v1.8.0-rc1", "target_commitish": "r1.8", "name": "TensorFlow 1.8.0-rc1", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-04-19T15:53:13Z", "published_at": "2018-04-19T20:36:36Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.8.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.8.0-rc1", "body": "# Release 1.8.0\r\n\r\n## Major Features And Improvements\r\n* Can now pass `tf.contrib.distribute.MirroredStrategy()` to `tf.estimator.RunConfig()` to run an Estimator model on multiple GPUs on one machine.\r\n* Add `tf.contrib.data.prefetch_to_device()`, which supports prefetching to GPU memory.\r\n* Added Gradient Boosted Trees as pre-made Estimators: BoostedTreesClassifier, BoostedTreesRegressor.\r\n* Add 3rd generation pipeline config for Cloud TPUs which improves performance and usability.\r\n* `tf.contrib.bayesflow` is moving out to it's own repo.\r\n* Added `tf.contrib.{proto,rpc}` to allow generic proto parsing and RPC communication.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Add `tf.contrib.data.prefetch_to_device`, which enables prefetching dataset elements to GPU memory.\r\n  * Add `tf.contrib.data.AUTOTUNE`, which allows the tf.data runtime to automatically tune the prefetch buffer sizes based on your system and environment.\r\n  * Add `tf.contrib.data.make_csv_dataset` for building datasets of CSV files.\r\n* Eager Execution:\r\n  * With eager execution Datasets can now be used as standard python iterators (`for batch in dataset:`). Both `Dataset.__iter__()` and `Dataset.make_one_shot_iterator()` can now be used to create iterators when eager execution is enabled.\r\n  * Automatic device placement has been enabled (i.e., use a GPU if available automatically, without requiring an explicit `with tf.device(\u201c/gpu:0\u201d)`) (Fixes #14133)\r\n  * `tf.GradientTape` has moved out of contrib.\r\n* `tf.keras`:\r\n  * Added the fashion mnist dataset.\r\n  * New data preprocessing functions: `image/random_brightness`, `sequence/TimeseriesGenerator`, and `text/hashing_trick`.\r\n* Accelerated Linear Algebra (XLA):\r\n  * Select and scatter in reference util and evaluator now use lexicographical order to break ties.\r\n* TensorFlow Debugger (tfdbg) CLI:\r\n  * During tensor-filter operations, allow exclusion of nodes by regular expressions.\r\n  * Fix spurious background colors in some text terminals.\r\n* `tf.contrib`:\r\n  * Add meta-distribution BatchReshape which reshapes batch dimensions.\r\n  * `tf.contrib.layers.recompute_grad` works for explicit gradient checkpointing on TPU.\r\n  * Add `tf.contrib.framework.argsort`.\r\n  * Allow `DNNBoostedTreeCombinedEstimator` to work with core versions of feature columns and losses.\r\n  * Add non-linear image warping ops: `tf.contrib.image.sparse_image_warp`, `tf.contrib.image.dense_image_warp`, and `tf.contrib.image.interpolate_spline`.\r\n  * Fix bug in `tf.contrib.opt.MultitaskOptimizerWrapper` where types of tensors were mismatched.\r\n* Other:\r\n  * Low-level graph construction now calls the TensorFlow C API. This change should be invisible to most users, but can be disabled by setting the environment variable `TF_C_API_GRAPH_CONSTRUCTION=0` in this release. Future releases will remove the ability to disable this change. Please [file a bug](https://github.com/tensorflow/tensorflow/issues/new) if you find yourself using this escape hatch.\r\n  * Add description of shapes and a pointer to tutorial notebook in `tf.distributions.Distribution`.\r\n  * Update scatter operations:\r\n    * Add `tf.scatter_min` and `tf.scatter_max`\r\n    * Extend scatter operations to work with a scalar update parameter.\r\n  * Move cuDNN RNN ops to core for use in TensorFlow codebase only.\r\n  * Add `float64` support for `Conv2d`, `Conv2dBackpropInput`, and `Conv2dBackpropFilter`.\r\n  * Add `float64` support for `AvgPool`/`AvgPoolGrad`.\r\n  * Make graph name scope thread local so that they work correctly in multi-threaded environments.\r\n  * Update nsync synchronization library to avoid slow primitives on Linux.\r\n  * Removed need to put nsync/public on C include path when building custom ops.\r\n  * Add `tf.image.psnr`, `tf.image.ssim`, `tf.image.ssim_multiscale`, `tf.image.image_gradients`, `tf.image.sobel_edges`.\r\n  * Add links to https://js.tensorflow.org.\r\n  * Fix non-uniformity of orthogonal matrices.\r\n  * Fix bug where multi-image Estimator eval summaries were not displayed correctly.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Aghasy, Alan Du, Alan Lee, Alan Yee, Alex Wiltschko, Animesh Karnewar, Ankit Gupta, Anton Matosov, Aris L, Ben Barsdell, Brent Yi, Brett Koonce, Carl Thom\u00e9, cbockman, Chikanaga Tomoyuki, Chris Tava, C\u00e9Dric Deltheil, Dahan Gong, Dalmo Cirne, Daniel Erenrich, David Norman, DavidNorman, Edd Wilder-James, Fanjin Zeng, Felix Abecassis, fo40225, George Sterpu, Giovanni Terlingen, Gor Baghdasaryan, Guillaume Klein, Hanchen Li, Ilya Polenov, Jakub Kolodziejczyk, Jason Sadler, Jayaram Bobba, Jerry Liu, jinghuangintel, Jiongyan Zhang (\u5f20\u70af\u884d), Joel Shor, Jong Wook Kim, Julian Eisenschlos, Karl Lessard, Krish Ravindranath, Loo Rong Jie, Lukas Geiger, Luke Iwanski, Mahmoud Abuzaina, ManHyuk, Marvin Richter, Maximilian Mitchell, Mohammad Ashraf Bhuiyan, msofka, Mustafa Kasap, Nathan Burnham, Nathan Luehr, Naveen Marri, ngc92, nio1814, Oleg Zabluda, Ou Changkun, Panos Ipeirotis, Paul Van Eck, Peter Lee, Piotr Czapla, qjivy, Rholais Lii, Rodrigo Formigone, Russell Klopfer, ryantimjohn, Sang Han, Sebasti\u00e1N Ram\u00edRez, shengfuintel, Siby Jose Plathottam, Silver Chan, Stanislaw Antol, Taehoon Lee, Tarang Chugh, Ted Chang, Thomas Bastiani, Xian Xu, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), yaox12, Yashal Shakti Kanungo, Yong Tang, Yuan (Terry) Tang, Yuxin Wu, Ziyue(Louis) Lu"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10528301", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10528301/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10528301/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.8.0-rc0", "id": 10528301, "node_id": "MDc6UmVsZWFzZTEwNTI4MzAx", "tag_name": "v1.8.0-rc0", "target_commitish": "r1.8", "name": "TensorFlow 1.8.0-rc0", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-04-12T18:07:34Z", "published_at": "2018-04-13T03:55:51Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.8.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.8.0-rc0", "body": "# Release 1.8.0\r\n\r\n## Major Features And Improvements\r\n* Can now pass `tf.contrib.distribute.MirroredStrategy()` to `tf.estimator.RunConfig()` to run an Estimator model on multiple GPUs on one machine.\r\n* Add `tf.contrib.data.prefetch_to_device()`, which supports prefetching to GPU memory.\r\n* Added Gradient Boosted Trees as pre-made Estimators: BoostedTreesClassifier, BoostedTreesRegressor.\r\n* Add 3rd generation pipeline config for Cloud TPUs which improves performance and usability.\r\n* `tf.contrib.bayesflow` is moving out to it's own repo.\r\n* Added `tf.contrib.{proto,rpc}` to allow generic proto parsing and RPC communication.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.data`:\r\n  * Add `tf.contrib.data.prefetch_to_device`, which enables prefetching dataset elements to GPU memory.\r\n  * Add `tf.contrib.data.AUTOTUNE`, which allows the tf.data runtime to automatically tune the prefetch buffer sizes based on your system and environment.\r\n  * Add `tf.contrib.data.make_csv_dataset` for building datasets of CSV files.\r\n* Eager Execution:\r\n  * With eager execution Datasets can now be used as standard python iterators (`for batch in dataset:`). Both `Dataset.__iter__()` and `Dataset.make_one_shot_iterator()` can now be used to create iterators when eager execution is enabled.\r\n  * Automatic device placement has been enabled (i.e., use a GPU if available automatically, without requiring an explicit `with tf.device(\u201c/gpu:0\u201d)`) (Fixes #14133)\r\n  * `tf.GradientTape` has moved out of contrib.\r\n* `tf.keras`:\r\n  * Added the fashion mnist dataset.\r\n  * New data preprocessing functions: `image/random_brightness`, `sequence/TimeseriesGenerator`, and `text/hashing_trick`.\r\n* Accelerated Linear Algebra (XLA):\r\n  * Select and scatter in reference util and evaluator now use lexicographical order to break ties.\r\n* TensorFlow Debugger (tfdbg) CLI:\r\n  * During tensor-filter operations, allow exclusion of nodes by regular expressions.\r\n  * Fix spurious background colors in some text terminals.\r\n* `tf.contrib`:\r\n  * Add meta-distribution BatchReshape which reshapes batch dimensions.\r\n  * `tf.contrib.layers.recompute_grad` works for explicit gradient checkpointing on TPU.\r\n  * Add `tf.contrib.framework.argsort`.\r\n  * Allow `DNNBoostedTreeCombinedEstimator` to work with core versions of feature columns and losses.\r\n  * Add non-linear image warping ops: `tf.contrib.image.sparse_image_warp`, `tf.contrib.image.dense_image_warp`, and `tf.contrib.image.interpolate_spline`.\r\n  * Fix bug in `tf.contrib.opt.MultitaskOptimizerWrapper` where types of tensors were mismatched.\r\n* Other:\r\n  * Low-level graph construction now calls the TensorFlow C API. This change should be invisible to most users, but can be disabled by setting the environment variable `TF_C_API_GRAPH_CONSTRUCTION=0` in this release. Future releases will remove the ability to disable this change. Please [file a bug](https://github.com/tensorflow/tensorflow/issues/new) if you find yourself using this escape hatch.\r\n  * Add description of shapes and a pointer to tutorial notebook in `tf.distributions.Distribution`.\r\n  * Update scatter operations:\r\n    * Add `tf.scatter_min` and `tf.scatter_max`\r\n    * Extend scatter operations to work with a scalar update parameter.\r\n  * Move cuDNN RNN ops to core for use in TensorFlow codebase only.\r\n  * Add `float64` support for `Conv2d`, `Conv2dBackpropInput`, and `Conv2dBackpropFilter`.\r\n  * Add `float64` support for `AvgPool`/`AvgPoolGrad`.\r\n  * Make graph name scope thread local so that they work correctly in multi-threaded environments.\r\n  * Update nsync synchronization library to avoid slow primitives on Linux.\r\n  * Removed need to put nsync/public on C include path when building custom ops.\r\n  * Add `tf.image.psnr`, `tf.image.ssim`, `tf.image.ssim_multiscale`, `tf.image.image_gradients`, `tf.image.sobel_edges`.\r\n  * Add links to https://js.tensorflow.org.\r\n  * Fix non-uniformity of orthogonal matrices.\r\n  * Fix bug where multi-image Estimator eval summaries were not displayed correctly.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Aghasy, Alan Du, Alan Lee, Alan Yee, Alex Wiltschko, Animesh Karnewar, Ankit Gupta, Anton Matosov, Aris L, Ben Barsdell, Brent Yi, Brett Koonce, Carl Thom\u00e9, cbockman, Chikanaga Tomoyuki, Chris Tava, C\u00e9Dric Deltheil, Dahan Gong, Dalmo Cirne, Daniel Erenrich, David Norman, DavidNorman, Edd Wilder-James, Fanjin Zeng, Felix Abecassis, fo40225, George Sterpu, Giovanni Terlingen, Gor Baghdasaryan, Guillaume Klein, Hanchen Li, Ilya Polenov, Jakub Kolodziejczyk, Jason Sadler, Jayaram Bobba, Jerry Liu, jinghuangintel, Jiongyan Zhang (\u5f20\u70af\u884d), Joel Shor, Jong Wook Kim, Julian Eisenschlos, Karl Lessard, Krish Ravindranath, Loo Rong Jie, Lukas Geiger, Luke Iwanski, Mahmoud Abuzaina, ManHyuk, Marvin Richter, Maximilian Mitchell, Mohammad Ashraf Bhuiyan, msofka, Mustafa Kasap, Nathan Burnham, Nathan Luehr, Naveen Marri, ngc92, nio1814, Oleg Zabluda, Ou Changkun, Panos Ipeirotis, Paul Van Eck, Peter Lee, Piotr Czapla, qjivy, Rholais Lii, Rodrigo Formigone, Russell Klopfer, ryantimjohn, Sang Han, Sebasti\u00e1N Ram\u00edRez, shengfuintel, Siby Jose Plathottam, Silver Chan, Stanislaw Antol, Taehoon Lee, Tarang Chugh, Ted Chang, Thomas Bastiani, Xian Xu, Xiaoming (Jason) Cui, Yan Facai (\u989c\u53d1\u624d), yaox12, Yashal Shakti Kanungo, Yong Tang, Yuan (Terry) Tang, Yuxin Wu, Ziyue(Louis) Lu\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10324872", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10324872/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10324872/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.7.0", "id": 10324872, "node_id": "MDc6UmVsZWFzZTEwMzI0ODcy", "tag_name": "v1.7.0", "target_commitish": "r1.7", "name": "TensorFlow 1.7.0", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-03-29T04:18:40Z", "published_at": "2018-03-29T20:29:33Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.7.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.7.0", "body": "# Release 1.7.0\r\n\r\n## Major Features And Improvements\r\n* Eager mode is moving out of contrib, try `tf.enable_eager_execution()`.\r\n* Graph rewrites emulating fixed-point quantization compatible with TensorFlow Lite, supported by new `tf.contrib.quantize` package.\r\n* Easily customize gradient computation with `tf.custom_gradient`.\r\n* [TensorBoard Debugger Plugin](https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/debugger/README.md), the graphical user interface (GUI) of TensorFlow Debugger (tfdbg), is now in alpha.\r\n* Experimental support for reading a sqlite database as a `Dataset` with new `tf.contrib.data.SqlDataset`.\r\n* Distributed Mutex / CriticalSection added to `tf.contrib.framework.CriticalSection`.\r\n* Better text processing with `tf.regex_replace`.\r\n* Easy, efficient sequence input with `tf.contrib.data.bucket_by_sequence_length`\r\n* Initial support for `tf.contrib.tensorrt` that enables native TensorRT in TensorFlow\r\n\r\n## Bug Fixes and Other Changes\r\n* Accelerated Linear Algebra (XLA):\r\n  * Add `MaxPoolGradGrad` support for XLA\r\n  * CSE pass from Tensorflow is now disabled in XLA.\r\n* `tf.data`:\r\n  * `tf.data.Dataset`\r\n    * Add support for building C++ Dataset op kernels as external libraries, using the `tf.load_op_library()` mechanism.\r\n    * `Dataset.list_files()` now shuffles its output by default.\r\n    * `Dataset.shuffle(..., seed=tf.constant(0, dtype=tf.int64))` now yields the same sequence of elements as `Dataset.shuffle(..., seed=0)`.\r\n  * Add `num_parallel_reads` argument to `tf.data.TFRecordDataset`.\r\n* `tf.contrib`:\r\n  * `tf.contrib.bayesflow.halton_sequence` now supports randomization.\r\n  * Add support for scalars in `tf.contrib.all_reduce`.\r\n  * Add `effective_sample_size` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `potential_scale_reduction` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `BatchNormalization`, `Kumaraswamy` bijectors.\r\n  * Deprecate `tf.contrib.learn`. Please check contrib/learn/README.md for instructions on how to convert existing code.\r\n  * `tf.contrib.data`\r\n    * Remove deprecated `tf.contrib.data.Dataset`, `tf.contrib.data.Iterator`, `tf.contrib.data.FixedLengthRecordDataset`, `tf.contrib.data.TextLineDataset`, and `tf.contrib.data.TFRecordDataset` classes.\r\n    * Added `bucket_by_sequence_length`, `sliding_window_batch`, and `make_batched_features_dataset`\r\n  * Remove unmaintained `tf.contrib.ndlstm`. You can find it externally at https://github.com/tmbarchive/tfndlstm.\r\n  * Moved most of `tf.contrib.bayesflow` to its own repo: `tfp`\r\n* Other:\r\n  * tf.py_func now reports the full stack trace if an exception occurs.\r\n  * Integrate `TPUClusterResolver` with GKE's integration for Cloud TPUs.\r\n  * Add a library for statistical testing of samplers.\r\n  * Add Helpers to stream data from the GCE VM to a Cloud TPU.\r\n  * Integrate ClusterResolvers with TPUEstimator.\r\n  * Unify metropolis_hastings interface with HMC kernel.\r\n  * Move LIBXSMM convolutions to a separate --define flag so that they are disabled by default.\r\n  * Fix `MomentumOptimizer` lambda.\r\n  * Reduce `tfp.layers` boilerplate via programmable docstrings.\r\n  * Add `auc_with_confidence_intervals`, a method for computing the AUC and confidence interval with linearithmic time complexity.\r\n  * `regression_head` now accepts customized link function, to satisfy the usage that user can define their own link function if the `array_ops.identity` does not meet the requirement.\r\n  * Fix `initialized_value` and `initial_value` behaviors for `ResourceVariables` created from `VariableDef` protos.\r\n  * Add TensorSpec to represent the specification of Tensors.\r\n  * Constant folding pass is now deterministic.\r\n  * Support `float16` `dtype` in `tf.linalg.*`.\r\n  * Add `tf.estimator.export.TensorServingInputReceiver` that allows `tf.estimator.Estimator.export_savedmodel` to pass raw tensors to model functions.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.7 may be the last time we support Cuda versions below 8.0.\r\n  Starting with TensorFlow 1.8 release, 8.0 will be the minimum supported\r\n  version.\r\n* TensorFlow 1.7 may be the last time we support cuDNN versions below 6.0.\r\n  Starting with TensorFlow 1.8 release, 6.0 will be the minimum supported\r\n  version.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abe, Alistair Low, Andy Kernahan, Appledore, Ben, Ben Barsdell, Boris Pfahringer, Brad Wannow, Brett Koonce, Carl Thom\u00e9, cclauss, Chengzhi Chen, Chris Drake, Christopher Yeh, Clayne Robison, Codrut Grosu, Daniel Trebbien, Danny Goodman, David Goodwin, David Norman, Deron Eriksson, Donggeon Lim, Donny Viszneki, DosLin, DylanDmitri, Francisco Guerrero, Fred Reiss, gdh1995, Giuseppe, Glenn Weidner, gracehoney, Guozhong Zhuang, Haichen \"Hc\" Li, Harald Husum, harumitsu.nobuta, Henry Spivey, hsm207, Jekyll Song, Jerome, Jiongyan Zhang, jjsjann123, John Sungjin Park, Johnson145, JoshVarty, Julian Wolff, Jun Wang, June-One, Kamil Sindi, Kb Sriram, Kdavis-Mozilla, Kenji, lazypanda1, Liang-Chi Hsieh, Loo Rong Jie, Mahesh Bhosale, MandarJKulkarni, ManHyuk, Marcus Ong, Marshal Hayes, Martin Pool, matthieudelaro, mdfaijul, mholzel, Michael Zhou, Ming Li, Minmin Sun, Myungjoo Ham, MyungsungKwak, Naman Kamra, Peng Yu, Penghao Cen, Phil, Raghuraman-K, resec, Rohin Mohanadas, Sandeep N Gupta, Scott Tseng, seaotterman, Seo Sanghyeon, Sergei Lebedev, Ted Chang, Tim H, tkunic, Tod, vihanjain, Yan Facai (\u989c\u53d1\u624d), Yin Li, Yong Tang, Yuan (Terry) Tang, Yukun Chen, Yusuke Yamada\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10195374", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10195374/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10195374/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.7.0-rc1", "id": 10195374, "node_id": "MDc6UmVsZWFzZTEwMTk1Mzc0", "tag_name": "v1.7.0-rc1", "target_commitish": "r1.7", "name": "TensorFlow 1.7.0-rc1", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-03-21T03:28:38Z", "published_at": "2018-03-21T17:26:57Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.7.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.7.0-rc1", "body": "# Release 1.7.0\r\n\r\n## Major Features And Improvements\r\n* Eager execution is moving out of contrib, try `tf.enable_eager_execution()`.\r\n* Graph rewrites emulating fixed-point quantization compatible with TensorFlow Lite, supported by new `tf.contrib.quantize` package.\r\n* Easily customize gradient computation with `tf.custom_gradient`.\r\n* [TensorBoard Debugger Plugin](https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/debugger/README.md), the graphical user interface (GUI) of TensorFlow Debugger (tfdbg), is now in alpha.\r\n* Experimental support for reading a sqlite database as a `Dataset` with new `tf.contrib.data.SqlDataset`.\r\n* Distributed Mutex / CriticalSection added to `tf.contrib.framework.CriticalSection`.\r\n* Better text processing with `tf.regex_replace`.\r\n* Easy, efficient sequence input with `tf.contrib.data.bucket_by_sequence_length`\r\n\r\n## Bug Fixes and Other Changes\r\n* Accelerated Linear Algebra (XLA):\r\n  * Add `MaxPoolGradGrad` support for XLA\r\n  * CSE pass from Tensorflow is now disabled in XLA.\r\n* `tf.data`:\r\n  * `tf.data.Dataset`\r\n    * Add support for building C++ Dataset op kernels as external libraries, using the `tf.load_op_library()` mechanism.\r\n    * `Dataset.list_files()` now shuffles its output by default.\r\n    * `Dataset.shuffle(..., seed=tf.constant(0, dtype=tf.int64))` now yields the same sequence of elements as `Dataset.shuffle(..., seed=0)`.\r\n  * Add `num_parallel_reads` argument to `tf.data.TFRecordDataset`.\r\n* `tf.contrib`:\r\n  * `tf.contrib.bayesflow.halton_sequence` now supports randomization.\r\n  * Add support for scalars in `tf.contrib.all_reduce`.\r\n  * Add `effective_sample_size` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `potential_scale_reduction` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `BatchNormalization`, `Kumaraswamy` bijectors.\r\n  * Deprecate `tf.contrib.learn`. Please check contrib/learn/README.md for instructions on how to convert existing code.\r\n  * `tf.contrib.data`\r\n    * Remove deprecated `tf.contrib.data.Dataset`, `tf.contrib.data.Iterator`, `tf.contrib.data.FixedLengthRecordDataset`, `tf.contrib.data.TextLineDataset`, and `tf.contrib.data.TFRecordDataset` classes.\r\n    * Added `bucket_by_sequence_length`, `sliding_window_batch`, and `make_batched_features_dataset`\r\n  * Remove unmaintained `tf.contrib.ndlstm`. You can find it externally at https://github.com/tmbarchive/tfndlstm.\r\n  * Moved most of `tf.contrib.bayesflow` to its own repo: `tfp`\r\n* Other:\r\n  * tf.py_func now reports the full stack trace if an exception occurs.\r\n  * Integrate `TPUClusterResolver` with GKE's integration for Cloud TPUs.\r\n  * Add a library for statistical testing of samplers.\r\n  * Add Helpers to stream data from the GCE VM to a Cloud TPU.\r\n  * Integrate ClusterResolvers with TPUEstimator.\r\n  * Unify metropolis_hastings interface with HMC kernel.\r\n  * Move LIBXSMM convolutions to a separate --define flag so that they are disabled by default.\r\n  * Fix `MomentumOptimizer` lambda.\r\n  * Reduce `tfp.layers` boilerplate via programmable docstrings.\r\n  * Add `auc_with_confidence_intervals`, a method for computing the AUC and confidence interval with linearithmic time complexity.\r\n  * `regression_head` now accepts customized link function, to satisfy the usage that user can define their own link function if the `array_ops.identity` does not meet the requirement.\r\n  * Fix `initialized_value` and `initial_value` behaviors for `ResourceVariables` created from `VariableDef` protos.\r\n  * Add TensorSpec to represent the specification of Tensors.\r\n  * Constant folding pass is now deterministic.\r\n  * Support `float16` `dtype` in `tf.linalg.*`.\r\n  * Add `tf.estimator.export.TensorServingInputReceiver` that allows `tf.estimator.Estimator.export_savedmodel` to pass raw tensors to model functions.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abe, Alistair Low, Andy Kernahan, Appledore, Ben, Ben Barsdell, Boris Pfahringer, Brad Wannow, Brett Koonce, Carl Thom\u00e9, cclauss, Chengzhi Chen, Chris Drake, Christopher Yeh, Clayne Robison, Codrut Grosu, Daniel Trebbien, Danny Goodman, David Goodwin, David Norman, Deron Eriksson, Donggeon Lim, Donny Viszneki, DosLin, DylanDmitri, Francisco Guerrero, Fred Reiss, gdh1995, Giuseppe, Glenn Weidner, gracehoney, Guozhong Zhuang, Haichen \"Hc\" Li, Harald Husum, harumitsu.nobuta, Henry Spivey, hsm207, Jekyll Song, Jerome, Jiongyan Zhang, jjsjann123, John Sungjin Park, Johnson145, JoshVarty, Julian Wolff, Jun Wang, June-One, Kamil Sindi, Kb Sriram, Kdavis-Mozilla, Kenji, lazypanda1, Liang-Chi Hsieh, Loo Rong Jie, Mahesh Bhosale, MandarJKulkarni, ManHyuk, Marcus Ong, Marshal Hayes, Martin Pool, matthieudelaro, mdfaijul, mholzel, Michael Zhou, Ming Li, Minmin Sun, Myungjoo Ham, MyungsungKwak, Naman Kamra, Peng Yu, Penghao Cen, Phil, Raghuraman-K, resec, Rohin Mohanadas, Sandeep N Gupta, Scott Tseng, seaotterman, Seo Sanghyeon, Sergei Lebedev, Ted Chang, terrytangyuan, Tim H, tkunic, Tod, vihanjain, Yan Facai (\u989c\u53d1\u624d), Yin Li, Yong Tang, Yukun Chen, Yusuke Yamada\r\n\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10180557", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10180557/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10180557/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.5.1", "id": 10180557, "node_id": "MDc6UmVsZWFzZTEwMTgwNTU3", "tag_name": "v1.5.1", "target_commitish": "r1.5", "name": "TensorFlow 1.5.1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-03-20T19:51:33Z", "published_at": "2018-03-20T21:35:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.5.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.5.1", "body": "# Release 1.5.1\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes a potential security vulnerability where on-the-fly changes to the dtype of a tensor reference may lead to undefined behavior.\r\n* Linux binaries on pypi are built with AVX. Please use GCS binaries for non-AVX machines."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10052337", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/10052337/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/10052337/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.7.0-rc0", "id": 10052337, "node_id": "MDc6UmVsZWFzZTEwMDUyMzM3", "tag_name": "v1.7.0-rc0", "target_commitish": "r1.7", "name": "TensorFlow 1.7.0-rc0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-03-13T04:02:38Z", "published_at": "2018-03-13T04:03:42Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.7.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.7.0-rc0", "body": "# Release 1.7.0\r\n\r\n## Major Features And Improvements\r\n* Eager mode is moving out of contrib, try `tf.enable_eager_execution()`.\r\n* Graph rewrites emulating fixed-point quantization compatible with TensorFlow Lite, supported by new `tf.contrib.quantize` package.\r\n* Easily customize gradient computation with `tf.custom_gradient`.\r\n* [TensorBoard Debugger Plugin](https://github.com/tensorflow/tensorboard/blob/master/tensorboard/plugins/debugger/README.md), the graphical user interface (GUI) of TensorFlow Debugger (tfdbg), is now in alpha.\r\n* Experimental support for reading a sqlite database as a `Dataset` with new `tf.contrib.data.SqlDataset`.\r\n* Distributed Mutex / CriticalSection added to `tf.contrib.framework.CriticalSection`.\r\n* Better text processing with `tf.regex_replace`.\r\n* Easy, efficient sequence input with `tf.contrib.data.bucket_by_sequence_length`\r\n\r\n## Bug Fixes and Other Changes\r\n* Accelerated Linear Algebra (XLA):\r\n  * Add `MaxPoolGradGrad` support for XLA\r\n  * CSE pass from Tensorflow is now disabled in XLA.\r\n* `tf.data`:\r\n  * `tf.data.Dataset`\r\n    * Add support for building C++ Dataset op kernels as external libraries, using the `tf.load_op_library()` mechanism.\r\n    * `Dataset.list_files()` now shuffles its output by default.\r\n    * `Dataset.shuffle(..., seed=tf.constant(0, dtype=tf.int64))` now yields the same sequence of elements as `Dataset.shuffle(..., seed=0)`.\r\n  * Add `num_parallel_reads` argument to `tf.data.TFRecordDataset`.\r\n* `tf.contrib`:\r\n  * `tf.contrib.bayesflow.halton_sequence` now supports randomization.\r\n  * Add support for scalars in `tf.contrib.all_reduce`.\r\n  * Add `effective_sample_size` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `potential_scale_reduction` to `tf.contrib.bayesflow.mcmc_diagnostics`.\r\n  * Add `BatchNormalization`, `Kumaraswamy` bijectors.\r\n  * Deprecate `tf.contrib.learn`. Please check contrib/learn/README.md for instructions on how to convert existing code.\r\n  * `tf.contrib.data`\r\n    * Remove deprecated `tf.contrib.data.Dataset`, `tf.contrib.data.Iterator`, `tf.contrib.data.FixedLengthRecordDataset`, `tf.contrib.data.TextLineDataset`, and `tf.contrib.data.TFRecordDataset` classes.\r\n    * Added `bucket_by_sequence_length`, `sliding_window_batch`, and `make_batched_features_dataset`\r\n  * Remove unmaintained `tf.contrib.ndlstm`. You can find it externally at https://github.com/tmbarchive/tfndlstm.\r\n  * Moved most of `tf.contrib.bayesflow` to its own repo: `tfp`\r\n* Other:\r\n  * tf.py_func now reports the full stack trace if an exception occurs.\r\n  * Integrate `TPUClusterResolver` with GKE's integration for Cloud TPUs.\r\n  * Add a library for statistical testing of samplers.\r\n  * Add Helpers to stream data from the GCE VM to a Cloud TPU.\r\n  * Integrate ClusterResolvers with TPUEstimator.\r\n  * Unify metropolis_hastings interface with HMC kernel.\r\n  * Move LIBXSMM convolutions to a separate --define flag so that they are disabled by default.\r\n  * Fix `MomentumOptimizer` lambda.\r\n  * Reduce `tfp.layers` boilerplate via programmable docstrings.\r\n  * Add `auc_with_confidence_intervals`, a method for computing the AUC and confidence interval with linearithmic time complexity.\r\n  * `regression_head` now accepts customized link function, to satisfy the usage that user can define their own link function if the `array_ops.identity` does not meet the requirement.\r\n  * Fix `initialized_value` and `initial_value` behaviors for `ResourceVariables` created from `VariableDef` protos.\r\n  * Add TensorSpec to represent the specification of Tensors.\r\n  * Constant folding pass is now deterministic.\r\n  * Support `float16` `dtype` in `tf.linalg.*`.\r\n  * Add `tf.estimator.export.TensorServingInputReceiver` that allows `tf.estimator.Estimator.export_savedmodel` to pass raw tensors to model functions.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abe, Alistair Low, Andy Kernahan, Appledore, Ben, Ben Barsdell, Boris Pfahringer, Brad Wannow, Brett Koonce, Carl Thom\u00e9, cclauss, Chengzhi Chen, Chris Drake, Christopher Yeh, Clayne Robison, Codrut Grosu, Daniel Trebbien, Danny Goodman, David Goodwin, David Norman, Deron Eriksson, Donggeon Lim, Donny Viszneki, DosLin, DylanDmitri, Francisco Guerrero, Fred Reiss, gdh1995, Giuseppe, Glenn Weidner, gracehoney, Guozhong Zhuang, Haichen \"Hc\" Li, Harald Husum, harumitsu.nobuta, Henry Spivey, hsm207, Jekyll Song, Jerome, Jiongyan Zhang, jjsjann123, John Sungjin Park, Johnson145, JoshVarty, Julian Wolff, Jun Wang, June-One, Kamil Sindi, Kb Sriram, Kdavis-Mozilla, Kenji, lazypanda1, Liang-Chi Hsieh, Loo Rong Jie, Mahesh Bhosale, MandarJKulkarni, ManHyuk, Marcus Ong, Marshal Hayes, Martin Pool, matthieudelaro, mdfaijul, mholzel, Michael Zhou, Ming Li, Minmin Sun, Myungjoo Ham, MyungsungKwak, Naman Kamra, Peng Yu, Penghao Cen, Phil, Raghuraman-K, resec, Rohin Mohanadas, Sandeep N Gupta, Scott Tseng, seaotterman, Seo Sanghyeon, Sergei Lebedev, Ted Chang, terrytangyuan, Tim H, tkunic, Tod, vihanjain, Yan Facai (\u989c\u53d1\u624d), Yin Li, Yong Tang, Yukun Chen, Yusuke Yamada"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9880341", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9880341/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9880341/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.6.0", "id": 9880341, "node_id": "MDc6UmVsZWFzZTk4ODAzNDE=", "tag_name": "v1.6.0", "target_commitish": "r1.6", "name": "TensorFlow 1.6.0", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-02-28T18:52:31Z", "published_at": "2018-02-28T19:10:29Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.6.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.6.0", "body": "# Release 1.6.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9.0 and cuDNN 7.\r\n* Prebuilt binaries will use AVX instructions. This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* New Optimizer internal API for non-slot variables. Descendants of AdamOptimizer that access _beta[12]_power will need to be updated.\r\n* `tf.estimator.{FinalExporter,LatestExporter}` now export stripped SavedModels. This improves forward compatibility of the SavedModel.\r\n* FFT support added to XLA CPU/GPU.\r\n* Android TF can now be built with CUDA acceleration on compatible Tegra devices (see [contrib/makefile/README.md](contrib/makefile/README.md) for more information)\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation updates:\r\n  * Added a second version of Getting Started, which is aimed at ML\r\nnewcomers.\r\n  * Clarified documentation on `resize_images.align_corners` parameter.\r\n  * Additional documentation for TPUs.\r\n* Google Cloud Storage (GCS):\r\n  * Add client-side throttle.\r\n  * Add a `FlushCaches()` method to the FileSystem interface, with an implementation for GcsFileSystem.\r\n* Other:\r\n  * Add `tf.contrib.distributions.Kumaraswamy`.\r\n  * `RetryingFileSystem::FlushCaches()` calls the base FileSystem's `FlushCaches()`.\r\n  * Add auto_correlation to distributions.\r\n  * Add `tf.contrib.distributions.Autoregressive`.\r\n  * Add SeparableConv1D layer.\r\n  * Add convolutional Flipout layers.\r\n  * When both inputs of `tf.matmul` are bfloat16, it returns bfloat16, instead of float32.\r\n  * Added `tf.contrib.image.connected_components`.\r\n  * Add `tf.contrib.framework.CriticalSection` that allows atomic variable access.\r\n  * Output variance over trees predictions for classifications tasks.\r\n  * For `pt` and `eval` commands, allow writing tensor values to filesystem as numpy files.\r\n  * gRPC: Propagate truncated errors (instead of returning gRPC internal error).\r\n  * Augment parallel_interleave to support 2 kinds of prefetching.\r\n  * Improved XLA support for C64-related ops log, pow, atan2, tanh.\r\n  * Add probabilistic convolutional layers.\r\n\r\n## API Changes\r\n* Introducing prepare_variance boolean with default setting to False for backward compatibility.\r\n* Move `layers_dense_variational_impl.py` to `layers_dense_variational.py`.\r\n\r\n## Known Bugs\r\n* Using XLA:GPU with CUDA 9 and CUDA 9.1 results in garbage results and/or\r\n  `CUDA_ILLEGAL_ADDRESS` failures.\r\n\r\n  Google discovered in mid-December 2017 that the PTX-to-SASS compiler in CUDA 9\r\n  and CUDA 9.1 sometimes does not properly compute the carry bit when\r\n  decomposing 64-bit address calculations with large offsets (e.g. `load [x +\r\n  large_constant]`) into 32-bit arithmetic in SASS.\r\n\r\n  As a result, these versions of `ptxas` miscompile most XLA programs which use\r\n  more than 4GB of temp memory.  This results in garbage results and/or\r\n  `CUDA_ERROR_ILLEGAL_ADDRESS` failures.\r\n\r\n  A fix in CUDA 9.1.121 is expected in late February 2018.  We do not expect a\r\n  fix for CUDA 9.0.x.  Until the fix is available, the only workaround is to\r\n  [downgrade](https://developer.nvidia.com/cuda-toolkit-archive) to CUDA 8.0.x\r\n  or disable XLA:GPU.\r\n\r\n  TensorFlow will print a warning if you use XLA:GPU with a known-bad version of\r\n  CUDA; see e00ba24c4038e7644da417ddc639169b6ea59122.\r\n* The `tensorboard` command or module may appear to be missing after certain\r\n  upgrade flows. This is due to pip package conflicts as a result of changing\r\n  the TensorBoard package name.  See the [TensorBoard 1.6.0 release notes](\r\n  https://github.com/tensorflow/tensorboard/releases/tag/1.6.0) for a fix.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Ag Ramesh, Aiden Scandella, Akimasa Kimura, Alex Rothberg, Allen Goodman,\r\namilioto, Andrei Costinescu, Andrei Nigmatulin, Anjum Sayed, Anthony Platanios,\r\nAnush Elangovan, Armando Fandango, Ashish Kumar Ram, Ashwini Shukla, Ben, Bhavani Subramanian,\r\nBrett Koonce, Carl Thom\u00e9, cclauss, Cesc, Changming Sun, Christoph Boeddeker, Clayne Robison,\r\nClemens Schulz, Clint (Woonhyuk Baek), codrut3, Cole Gerdemann, Colin Raffel, Daniel Trebbien,\r\nDaniel Ylitalo, Daniel Zhang, Daniyar, Darjan Salaj, Dave Maclachlan, David Norman, Dong--Jian,\r\ndongsamb, dssgsra, Edward H, eladweiss, elilienstein, Eric Lilienstein, error.d, Eunji Jeong, fanlu,\r\nFlorian Courtial, fo40225, Fred, Gregg Helt, Guozhong Zhuang, Hanchen Li, hsm207, hyunyoung2,\r\nImSheridan, Ishant Mrinal Haloi, Jacky Ko, Jay Young, Jean Flaherty, Jerome, JerrikEph, Jesse\r\nKinkead, jfaath, Jian Lin, jinghuangintel, Jiongyan Zhang, Joel Hestness, Joel Shor, Johnny Chan,\r\nJulian Niedermeier, Julian Wolff, JxKing, K-W-W, Karl Lessard, Kasper Marstal, Keiji Ariyama,\r\nKoan-Sin Tan, Loki Der Quaeler, Loo Rong Jie, Luke Schaefer, Lynn Jackson, ManHyuk, Matt Basta,\r\nMatt Smith, Matthew Schulkind, Michael, michaelkhan3, Miguel Piedrafita, Mikalai Drabovich,\r\nMike Knapp, mjwen, mktozk, Mohamed Aly, Mohammad Ashraf Bhuiyan, Myungjoo Ham, Naman Bhalla,\r\nNamrata-Ibm, Nathan Luehr, nathansilberman, Netzeband, Niranjan Hasabnis, Omar Aflak, Ozge\r\nYalcinkaya, Parth P Panchal, patrickzzy, Patryk Chrabaszcz, Paul Van Eck, Pawe\u0142 Kapica, Peng Yu,\r\nPhilip Yang, Pierre Blondeau, Po-Hsien Chu, powderluv, Puyu Wang, Rajendra Arora, Rasmus, Renat\r\nIdrisov, resec, Robin Richtsfeld, Ronald Eddy Jr, Sahil Singh, Sam Matzek, Sami Kama, sandipmgiri,\r\nSantiago Castro, Sayed Hadi Hashemi, Scott Tseng, Sergii Khomenko, Shahid, Shengpeng Liu, Shreyash\r\nSharma, Shrinidhi Kl, Simone Cirillo, simsicon, Stanislav Levental, starsblinking, Stephen Lumenta,\r\nSteven Hickson, Su Tang, Taehoon Lee, Takuya Wakisaka, Ted Chang, Ted Ying, Tijmen Verhulsdonck,\r\nTimofey Kondrashov, vade, vaibhav, Valentin Khrulkov, vchigrin, Victor Costan, Viraj Navkal,\r\nVivek Rane, wagonhelm, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaroslav Bulatov, yegord, Yong Tang,\r\nYoni Tsafir, yordun, Yuan (Terry) Tang, Yuxin Wu, zhengdi, Zhengsheng Wei, \u7530\u4f20\u6b66"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9668257", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9668257/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9668257/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.6.0-rc1", "id": 9668257, "node_id": "MDc6UmVsZWFzZTk2NjgyNTc=", "tag_name": "v1.6.0-rc1", "target_commitish": "master", "name": "TensorFlow 1.6.0-rc1", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-02-13T23:20:07Z", "published_at": "2018-02-14T09:20:00Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.6.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.6.0-rc1", "body": "# Release 1.6.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9.0 and cuDNN 7.\r\n* Prebuilt binaries will use AVX instructions. This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* New Optimizer internal API for non-slot variables. Descendants of AdamOptimizer that access _beta[12]_power will need to be updated.\r\n* `tf.estimator.{FinalExporter,LatestExporter}` now export stripped SavedModels. This improves forward compatibility of the SavedModel.\r\n* FFT support added to XLA CPU/GPU.\r\n* Android TF can now be built with CUDA acceleration on compatible Tegra devices (see [contrib/makefile/README.md](contrib/makefile/README.md) for more information)\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation updates:\r\n  * Added a second version of Getting Started, which is aimed at ML\r\nnewcomers.\r\n  * Clarified documentation on `resize_images.align_corners` parameter.\r\n  * Additional documentation for TPUs.\r\n* Google Cloud Storage (GCS):\r\n  * Add client-side throttle.\r\n  * Add a `FlushCaches()` method to the FileSystem interface, with an implementation for GcsFileSystem.\r\n* Other:\r\n  * Add `tf.contrib.distributions.Kumaraswamy`.\r\n  * `RetryingFileSystem::FlushCaches()` calls the base FileSystem's `FlushCaches()`.\r\n  * Add auto_correlation to distributions.\r\n  * Add `tf.contrib.distributions.Autoregressive`.\r\n  * Add SeparableConv1D layer.\r\n  * Add convolutional Flipout layers.\r\n  * When both inputs of `tf.matmul` are bfloat16, it returns bfloat16, instead of float32.\r\n  * Added `tf.contrib.image.connected_components`.\r\n  * Add `tf.contrib.framework.CriticalSection` that allows atomic variable access.\r\n  * Output variance over trees predictions for classifications tasks.\r\n  * For `pt` and `eval` commands, allow writing tensor values to filesystem as numpy files.\r\n  * gRPC: Propagate truncated errors (instead of returning gRPC internal error).\r\n  * Augment parallel_interleave to support 2 kinds of prefetching.\r\n  * Improved XLA support for C64-related ops log, pow, atan2, tanh.\r\n  * Add probabilistic convolutional layers.\r\n\r\n## API Changes\r\n* Introducing prepare_variance boolean with default setting to False for backward compatibility.\r\n* Move `layers_dense_variational_impl.py` to `layers_dense_variational.py`.\r\n\r\n## Known Bugs\r\n* Using XLA:GPU with CUDA 9 and CUDA 9.1 results in garbage results and/or\r\n  `CUDA_ILLEGAL_ADDRESS` failures.\r\n\r\n  Google discovered in mid-December 2017 that the PTX-to-SASS compiler in CUDA 9\r\n  and CUDA 9.1 sometimes does not properly compute the carry bit when\r\n  decomposing 64-bit address calculations with large offsets (e.g. `load [x +\r\n  large_constant]`) into 32-bit arithmetic in SASS.\r\n\r\n  As a result, these versions of `ptxas` miscompile most XLA programs which use\r\n  more than 4GB of temp memory.  This results in garbage results and/or\r\n  `CUDA_ERROR_ILLEGAL_ADDRESS` failures.\r\n\r\n  A fix in CUDA 9.1.121 is expected in late February 2018.  We do not expect a\r\n  fix for CUDA 9.0.x.  Until the fix is available, the only workaround is to\r\n  [downgrade](https://developer.nvidia.com/cuda-toolkit-archive) to CUDA 8.0.x\r\n  or disable XLA:GPU.\r\n\r\n  TensorFlow will print a warning if you use XLA:GPU with a known-bad version of\r\n  CUDA; see e00ba24c4038e7644da417ddc639169b6ea59122.\r\n* The `tensorboard` command or module may appear to be missing after certain\r\n  upgrade flows. This is due to pip package conflicts as a result of changing\r\n  the TensorBoard package name.  See the [TensorBoard 1.6.0 release notes](\r\n  https://github.com/tensorflow/tensorboard/releases/tag/1.6.0) for a fix.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Ag Ramesh, Aiden Scandella, Akimasa Kimura, Alex Rothberg, Allen Goodman,\r\namilioto, Andrei Costinescu, Andrei Nigmatulin, Anjum Sayed, Anthony Platanios,\r\nAnush Elangovan, Armando Fandango, Ashish Kumar Ram, Ashwini Shukla, Ben, Bhavani Subramanian,\r\nBrett Koonce, Carl Thom\u00e9, cclauss, Cesc, Changming Sun, Christoph Boeddeker, Clayne Robison,\r\nClemens Schulz, Clint (Woonhyuk Baek), codrut3, Cole Gerdemann, Colin Raffel, Daniel Trebbien,\r\nDaniel Ylitalo, Daniel Zhang, Daniyar, Darjan Salaj, Dave Maclachlan, David Norman, Dong--Jian,\r\ndongsamb, dssgsra, Edward H, eladweiss, elilienstein, Eric Lilienstein, error.d, Eunji Jeong, fanlu,\r\nFlorian Courtial, fo40225, Fred, Gregg Helt, Guozhong Zhuang, Hanchen Li, hsm207, hyunyoung2,\r\nImSheridan, Ishant Mrinal Haloi, Jacky Ko, Jay Young, Jean Flaherty, Jerome, JerrikEph, Jesse\r\nKinkead, jfaath, Jian Lin, jinghuangintel, Jiongyan Zhang, Joel Hestness, Joel Shor, Johnny Chan,\r\nJulian Niedermeier, Julian Wolff, JxKing, K-W-W, Karl Lessard, Kasper Marstal, Keiji Ariyama,\r\nKoan-Sin Tan, Loki Der Quaeler, Loo Rong Jie, Luke Schaefer, Lynn Jackson, ManHyuk, Matt Basta,\r\nMatt Smith, Matthew Schulkind, Michael, michaelkhan3, Miguel Piedrafita, Mikalai Drabovich,\r\nMike Knapp, mjwen, mktozk, Mohamed Aly, Mohammad Ashraf Bhuiyan, Myungjoo Ham, Naman Bhalla,\r\nNamrata-Ibm, Nathan Luehr, nathansilberman, Netzeband, Niranjan Hasabnis, Omar Aflak, Ozge\r\nYalcinkaya, Parth P Panchal, patrickzzy, Patryk Chrabaszcz, Paul Van Eck, Pawe\u0142 Kapica, Peng Yu,\r\nPhilip Yang, Pierre Blondeau, Po-Hsien Chu, powderluv, Puyu Wang, Rajendra Arora, Rasmus, Renat\r\nIdrisov, resec, Robin Richtsfeld, Ronald Eddy Jr, Sahil Singh, Sam Matzek, Sami Kama, sandipmgiri,\r\nSantiago Castro, Sayed Hadi Hashemi, Scott Tseng, Sergii Khomenko, Shahid, Shengpeng Liu, Shreyash\r\nSharma, Shrinidhi Kl, Simone Cirillo, simsicon, Stanislav Levental, starsblinking, Stephen Lumenta,\r\nSteven Hickson, Su Tang, Taehoon Lee, Takuya Wakisaka, Ted Chang, Ted Ying, Tijmen Verhulsdonck,\r\nTimofey Kondrashov, vade, vaibhav, Valentin Khrulkov, vchigrin, Victor Costan, Viraj Navkal,\r\nVivek Rane, wagonhelm, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaroslav Bulatov, yegord, Yong Tang,\r\nYoni Tsafir, yordun, Yuan (Terry) Tang, Yuxin Wu, zhengdi, Zhengsheng Wei, \u7530\u4f20\u6b66"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9540001", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9540001/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9540001/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.6.0-rc0", "id": 9540001, "node_id": "MDc6UmVsZWFzZTk1NDAwMDE=", "tag_name": "v1.6.0-rc0", "target_commitish": "r1.6", "name": "TensorFlow 1.6.0-rc0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-02-04T20:28:47Z", "published_at": "2018-02-05T21:13:27Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.6.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.6.0-rc0", "body": "# Release 1.6.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9.0 and cuDNN 7.\r\n* Prebuilt binaries will use AVX instructions. This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* `tf.estimator.{FinalExporter,LatestExporter}` now export stripped SavedModels. This improves forward compatibility of the SavedModel.\r\n* FFT support added to XLA CPU/GPU.\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation updates:\r\n  * Added a second version of Getting Started, which is aimed at ML\r\nnewcomers.\r\n  * Clarified documentation on `resize_images.align_corners` parameter.\r\n  * Additional documentation for TPUs.\r\n* Google Cloud Storage (GCS):\r\n  * Add client-side throttle.\r\n  * Add a `FlushCaches()` method to the FileSystem interface, with an implementation for GcsFileSystem.\r\n* Other:\r\n  * New Optimizer internal API for non-slot variables. Descendants of AdamOptimizer that access _beta[12]_power will need to be updated.\r\n  * Add `tf.contrib.distributions.Kumaraswamy`.\r\n  * `RetryingFileSystem::FlushCaches()` calls the base FileSystem's `FlushCaches()`.\r\n  * Add auto_correlation to distributions.\r\n  * Add `tf.contrib.distributions.Autoregressive`.\r\n  * Add SeparableConv1D layer.\r\n  * Add convolutional Flipout layers.\r\n  * When both inputs of `tf.matmul` are bfloat16, it returns bfloat16, instead of float32.\r\n  * Added `tf.contrib.image.connected_components`.\r\n  * Add `tf.contrib.framework.CriticalSection` that allows atomic variable access.\r\n  * Output variance over trees predictions for classifications tasks.\r\n  * For `pt` and `eval` commands, allow writing tensor values to filesystem as numpy files.\r\n  * gRPC: Propagate truncated errors (instead of returning gRPC internal error).\r\n  * Augment parallel_interleave to support 2 kinds of prefetching.\r\n  * Improved XLA support for C64-related ops log, pow, atan2, tanh.\r\n  * Add probabilistic convolutional layers.\r\n\r\n## API Changes\r\n* Introducing prepare_variance boolean with default setting to False for backward compatibility.\r\n* Move `layers_dense_variational_impl.py` to `layers_dense_variational.py`.\r\n\r\n## Known Bugs\r\n* Using XLA:GPU with CUDA 9 and CUDA 9.1 results in garbage results and/or\r\n  `CUDA_ILLEGAL_ADDRESS` failures.\r\n\r\n  Google discovered in mid-December 2017 that the PTX-to-SASS compiler in CUDA 9\r\n  and CUDA 9.1 sometimes does not properly compute the carry bit when\r\n  decomposing 64-bit address calculations with large offsets (e.g. `load [x +\r\n  large_constant]`) into 32-bit arithmetic in SASS.\r\n\r\n  As a result, these versions of `ptxas` miscompile most XLA programs which use\r\n  more than 4GB of temp memory.  This results in garbage results and/or\r\n  `CUDA_ERROR_ILLEGAL_ADDRESS` failures.\r\n\r\n  A fix in CUDA 9.1.121 is expected in late February 2018.  We do not expect a\r\n  fix for CUDA 9.0.x.  Until the fix is available, the only workaround is to\r\n  [downgrade](https://developer.nvidia.com/cuda-toolkit-archive) to CUDA 8.0.x\r\n  or disable XLA:GPU.\r\n\r\n  TensorFlow will print a warning if you use XLA:GPU with a known-bad version of\r\n  CUDA; see e00ba24c4038e7644da417ddc639169b6ea59122.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Ag Ramesh, Aiden Scandella, Akimasa Kimura, Alex Rothberg, Allen Goodman,\r\namilioto, Andrei Costinescu, Andrei Nigmatulin, Anjum Sayed, Anthony Platanios,\r\nAnush Elangovan, Armando Fandango, Ashish Kumar Ram, Ashwini Shukla, Ben, Bhavani Subramanian,\r\nBrett Koonce, Carl Thom\u00e9, cclauss, Cesc, Changming Sun, Christoph Boeddeker, Clayne Robison,\r\nClemens Schulz, Clint (Woonhyuk Baek), codrut3, Cole Gerdemann, Colin Raffel, Daniel Trebbien,\r\nDaniel Ylitalo, Daniel Zhang, Daniyar, Darjan Salaj, Dave Maclachlan, David Norman, Dong--Jian,\r\ndongsamb, dssgsra, Edward H, eladweiss, elilienstein, Eric Lilienstein, error.d, Eunji Jeong, fanlu,\r\nFlorian Courtial, fo40225, Fred, Gregg Helt, Guozhong Zhuang, Hanchen Li, hsm207, hyunyoung2,\r\nImSheridan, Ishant Mrinal Haloi, Jacky Ko, Jay Young, Jean Flaherty, Jerome, JerrikEph, Jesse\r\nKinkead, jfaath, Jian Lin, jinghuangintel, Jiongyan Zhang, Joel Hestness, Joel Shor, Johnny Chan,\r\nJulian Niedermeier, Julian Wolff, JxKing, K-W-W, Karl Lessard, Kasper Marstal, Keiji Ariyama,\r\nKoan-Sin Tan, Loki Der Quaeler, Loo Rong Jie, Luke Schaefer, Lynn Jackson, ManHyuk, Matt Basta,\r\nMatt Smith, Matthew Schulkind, Michael, michaelkhan3, Miguel Piedrafita, Mikalai Drabovich,\r\nMike Knapp, mjwen, mktozk, Mohamed Aly, Mohammad Ashraf Bhuiyan, Myungjoo Ham, Naman Bhalla,\r\nNamrata-Ibm, Nathan Luehr, nathansilberman, Netzeband, Niranjan Hasabnis, Omar Aflak, Ozge\r\nYalcinkaya, Parth P Panchal, patrickzzy, Patryk Chrabaszcz, Paul Van Eck, Pawe\u0142 Kapica, Peng Yu,\r\nPhilip Yang, Pierre Blondeau, Po-Hsien Chu, powderluv, Puyu Wang, Rajendra Arora, Rasmus, Renat\r\nIdrisov, resec, Robin Richtsfeld, Ronald Eddy Jr, Sahil Singh, Sam Matzek, Sami Kama, sandipmgiri,\r\nSantiago Castro, Sayed Hadi Hashemi, Scott Tseng, Sergii Khomenko, Shahid, Shengpeng Liu, Shreyash\r\nSharma, Shrinidhi Kl, Simone Cirillo, simsicon, Stanislav Levental, starsblinking, Stephen Lumenta,\r\nSteven Hickson, Su Tang, Taehoon Lee, Takuya Wakisaka, Ted Chang, Ted Ying, Tijmen Verhulsdonck,\r\nTimofey Kondrashov, vade, vaibhav, Valentin Khrulkov, vchigrin, Victor Costan, Viraj Navkal,\r\nVivek Rane, wagonhelm, Yan Facai (\u989c\u53d1\u624d), Yanbo Liang, Yaroslav Bulatov, yegord, Yong Tang,\r\nYoni Tsafir, yordun, Yuan (Terry) Tang, Yuxin Wu, zhengdi, Zhengsheng Wei, \u7530\u4f20\u6b66"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9395502", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9395502/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9395502/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.5.0", "id": 9395502, "node_id": "MDc6UmVsZWFzZTkzOTU1MDI=", "tag_name": "v1.5.0", "target_commitish": "r1.5", "name": "TensorFlow 1.5.0", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2018-01-25T22:22:10Z", "published_at": "2018-01-26T08:30:37Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.5.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.5.0", "body": "# Release 1.5.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9 and cuDNN 7.\r\n* Starting from 1.6 release, our prebuilt binaries will use AVX instructions.\r\n  This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* [Eager execution](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/eager)\r\n  preview version is now available.\r\n* [TensorFlow Lite](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/lite)\r\n  dev preview is now available.\r\n* CUDA 9 and cuDNN 7 support.\r\n* Accelerated Linear Algebra (XLA):\r\n  * Add `complex64` support to XLA compiler.\r\n  * `bfloat` support is now added to XLA infrastructure.\r\n  * Make `ClusterSpec` propagation work with XLA devices.\r\n  * Use a determinisitic executor to generate XLA graph.\r\n* `tf.contrib`:\r\n  * `tf.contrib.distributions`:\r\n    * Add `tf.contrib.distributions.Autoregressive`.\r\n    * Make `tf.contrib.distributions` QuadratureCompound classes support batch\r\n    * Infer `tf.contrib.distributions.RelaxedOneHotCategorical` `dtype` from arguments.\r\n    * Make `tf.contrib.distributions` quadrature family parameterized by\r\n      `quadrature_grid_and_prob` vs `quadrature_degree`.\r\n    * `auto_correlation` added to `tf.contrib.distributions`\r\n  * Add `tf.contrib.bayesflow.layers`, a collection of probabilistic (neural) layers.\r\n  * Add `tf.contrib.bayesflow.halton_sequence`.\r\n  * Add `tf.contrib.data.make_saveable_from_iterator.`\r\n  * Add `tf.contrib.data.shuffle_and_repeat`.\r\n  * Add new custom transformation: `tf.contrib.data.scan()`.\r\n  * `tf.contrib.distributions.bijectors`:\r\n    * Add `tf.contrib.distributions.bijectors.MaskedAutoregressiveFlow`.\r\n    * Add `tf.contrib.distributions.bijectors.Permute`.\r\n    * Add `tf.contrib.distributions.bijectors.Gumbel`.\r\n    * Add `tf.contrib.distributions.bijectors.Reshape`.\r\n    * Support shape inference (i.e., shapes containing -1) in the Reshape bijector.\r\n* Add `streaming_precision_recall_at_equal_thresholds,` a method for computing\r\n  streaming precision and recall with `O(num_thresholds + size of predictions)`\r\n  time and space complexity.\r\n* Change `RunConfig` default behavior to not set a random seed, making random\r\n  behavior independently random on distributed workers. We expect this to\r\n  generally improve training performance. Models that do rely on determinism\r\n  should set a random seed explicitly.\r\n* Replaced the implementation of `tf.flags` with `absl.flags`.\r\n* Add support for `CUBLAS_TENSOR_OP_MATH` in fp16 GEMM\r\n* Add support for CUDA on NVIDIA Tegra devices\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation updates:\r\n  * Clarified that you can only install TensorFlow on 64-bit machines.\r\n  * Added a short doc explaining how `Estimator`s save checkpoints.\r\n  * Add documentation for ops supported by the `tf2xla` bridge.\r\n  * Fix minor typos in the doc of `SpaceToDepth` and `DepthToSpace`.\r\n  * Updated documentation comments in `mfcc_mel_filterbank.h` and `mfcc.h` to\r\n    clarify that the input domain is squared magnitude spectra and the weighting\r\n    is done on linear magnitude spectra (sqrt of inputs).\r\n  * Change `tf.contrib.distributions` docstring examples to use `tfd` alias\r\n    rather than `ds`, `bs`.\r\n  * Fix docstring typos in `tf.distributions.bijectors.Bijector`.\r\n  * `tf.assert_equal` no longer raises `ValueError.` It now raises\r\n    `InvalidArgumentError,` as documented.\r\n  * Update Getting Started docs and API intro.\r\n* Google Cloud Storage (GCS):\r\n  * Add userspace DNS caching for the GCS client.\r\n  * Customize request timeouts for the GCS filesystem.\r\n  * Improve GCS filesystem caching.\r\n* Bug Fixes:\r\n  * Fix bug where partitioned integer variables got their wrong shapes. Before\r\n  * Fix correctness bug in CPU and GPU implementations of Adadelta.\r\n  * Fix a bug in `import_meta_graph`'s handling of partitioned variables when\r\n    importing into a scope. WARNING: This may break loading checkpoints of\r\n    graphs with partitioned variables saved after using `import_meta_graph` with\r\n    a non-empty `import_scope` argument.\r\n  * Fix bug in offline debugger which prevented viewing events.\r\n  * Added the `WorkerService.DeleteWorkerSession` method to the gRPC interface,\r\n    to fix a memory leak. Ensure that your master and worker servers are running\r\n    the same version of TensorFlow to avoid compatibility issues.\r\n  * Fix bug in peephole implementation of BlockLSTM cell.\r\n  * Fix bug by casting dtype of `log_det_jacobian` to match `log_prob` in\r\n    `TransformedDistribution`.\r\n  * Fix a bug in `import_meta_graph`'s handling of partitioned variables when\r\n  * Ensure `tf.distributions.Multinomial` doesn't underflow in `log_prob`.\r\n    Before this change, all partitions of an integer variable were initialized\r\n    with the shape of the unpartitioned variable; after this change they are\r\n    initialized correctly.\r\n* Other:\r\n  * Add necessary shape util support for bfloat16.\r\n  * Add a way to run ops using a step function to MonitoredSession.\r\n  * Add `DenseFlipout` probabilistic layer.\r\n  * A new flag `ignore_live_threads` is available on train. If set to `True`, it\r\n    will ignore threads that remain running when tearing down infrastructure\r\n    after successfully completing training, instead of throwing a RuntimeError.\r\n  * Restandardize `DenseVariational` as simpler template for other probabilistic\r\n    layers.\r\n  * `tf.data` now supports `tf.SparseTensor` components in dataset elements.\r\n  * It is now possible to iterate over `Tensor`s.\r\n  * Allow `SparseSegmentReduction` ops to have missing segment IDs.\r\n  * Modify custom export strategy to account for multidimensional sparse float\r\n    splits.\r\n  * `Conv2D`, `Conv2DBackpropInput`, `Conv2DBackpropFilter` now supports arbitrary\r\n    dilations with GPU and cuDNNv6 support.\r\n  * `Estimator` now supports `Dataset`: `input_fn` can return a `Dataset`\r\n    instead of `Tensor`s.\r\n  * Add `RevBlock`, a memory-efficient implementation of reversible residual layers.\r\n  * Reduce BFCAllocator internal fragmentation.\r\n  * Add `cross_entropy` and `kl_divergence` to `tf.distributions.Distribution`.\r\n  * Add `tf.nn.softmax_cross_entropy_with_logits_v2` which enables backprop\r\n    w.r.t. the labels.\r\n  * GPU back-end now uses `ptxas` to compile generated PTX.\r\n  * `BufferAssignment`'s protocol buffer dump is now deterministic.\r\n  * Change embedding op to use parallel version of `DynamicStitch`.\r\n  * Add support for sparse multidimensional feature columns.\r\n  * Speed up the case for sparse float columns that have only 1 value.\r\n  * Allow sparse float splits to support multivalent feature columns.\r\n  * Add `quantile` to `tf.distributions.TransformedDistribution`.\r\n  * Add `NCHW_VECT_C` support for `tf.depth_to_space` on GPU.\r\n  * Add `NCHW_VECT_C` support for `tf.space_to_depth` on GPU.\r\n\r\n## API Changes\r\n* Rename `SqueezeDims` attribute to `Axis` in C++ API for Squeeze op.\r\n* `Stream::BlockHostUntilDone` now returns Status rather than bool.\r\n* Minor refactor: move stats files from `stochastic` to `common` and remove\r\n  `stochastic`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAdam Zahran, Ag Ramesh, Alan Lee, Alan Yee, Alex Sergeev, Alexander, Amir H. Jadidinejad,\r\nAmy, Anastasios Doumoulakis, Andrei Costinescu, Andrei Nigmatulin, Anthony Platanios,\r\nAnush Elangovan, arixlin, Armen Donigian, Art\u00ebM Sobolev, Atlas7, Ben Barsdell, Bill Prin,\r\nBo Wang, Brett Koonce, Cameron Thomas, Carl Thom\u00e9, Cem Eteke, cglewis, Changming Sun,\r\nCharles Shenton, Chi-Hung, Chris Donahue, Chris Filo Gorgolewski, Chris Hoyean Song,\r\nChris Tava, Christian Grail, Christoph Boeddeker, cinqS, Clayne Robison, codrut3, concerttttt,\r\nCQY, Dan Becker, Dan Jarvis, Daniel Zhang, David Norman, dmaclach, Dmitry Trifonov,\r\nDonggeon Lim, dongpilYu, Dr. Kashif Rasul, Edd Wilder-James, Eric Lv, fcharras, Felix Abecassis,\r\nFirefoxMetzger, formath, FredZhang, Gaojin Cao, Gary Deer, Guenther Schmuelling, Hanchen Li,\r\nHanmin Qin, hannesa2, hyunyoung2, Ilya Edrenkin, Jackson Kontny, Jan, Javier Luraschi,\r\nJay Young, Jayaram Bobba, Jeff, Jeff Carpenter, Jeremy Sharpe, Jeroen B\u00e9Dorf, Jimmy Jia,\r\nJinze Bai, Jiongyan Zhang, Joe Castagneri, Johan Ju, Josh Varty, Julian Niedermeier,\r\nJxKing, Karl Lessard, Kb Sriram, Keven Wang, Koan-Sin Tan, Kyle Mills, lanhin, LevineHuang,\r\nLoki Der Quaeler, Loo Rong Jie, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, Mahdi Abavisani, Mahmoud Abuzaina,\r\nManHyuk, Marek \u0160Uppa, MathSquared, Mats Linander, Matt Wytock, Matthew Daley, Maximilian Bachl,\r\nmdymczyk, melvyniandrag, Michael Case, Mike Traynor, miqlas, Namrata-Ibm, Nathan Luehr,\r\nNathan Van Doorn, Noa Ezra, Nolan Liu, Oleg Zabluda, opensourcemattress, Ouwen Huang,\r\nPaul Van Eck, peisong, Peng Yu, PinkySan, pks, powderluv, Qiao Hai-Jun, Qiao Longfei,\r\nRajendra Arora, Ralph Tang, resec, Robin Richtsfeld, Rohan Varma, Ryohei Kuroki, SaintNazaire,\r\nSamuel He, Sandeep Dcunha, sandipmgiri, Sang Han, scott, Scott Mudge, Se-Won Kim, Simon Perkins,\r\nSimone Cirillo, Steffen Schmitz, Suvojit Manna, Sylvus, Taehoon Lee, Ted Chang, Thomas Deegan,\r\nTill Hoffmann, Tim, Toni Kunic, Toon Verstraelen, Tristan Rice, Urs K\u00f6Ster, Utkarsh Upadhyay,\r\nVish (Ishaya) Abrams, Winnie Tsang, Yan Chen, Yan Facai (\u989c\u53d1\u624d), Yi Yang, Yong Tang,\r\nYoussef Hesham, Yuan (Terry) Tang, Zhengsheng Wei, zxcqwe4906, \u5f20\u5fd7\u8c6a, \u7530\u4f20\u6b66 \r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9221130", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9221130/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9221130/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.5.0-rc1", "id": 9221130, "node_id": "MDc6UmVsZWFzZTkyMjExMzA=", "tag_name": "v1.5.0-rc1", "target_commitish": "r1.5", "name": "TensorFlow 1.5.0-rc1", "draft": false, "author": {"login": "angerson", "id": 32465472, "node_id": "MDQ6VXNlcjMyNDY1NDcy", "avatar_url": "https://avatars2.githubusercontent.com/u/32465472?v=4", "gravatar_id": "", "url": "https://api.github.com/users/angerson", "html_url": "https://github.com/angerson", "followers_url": "https://api.github.com/users/angerson/followers", "following_url": "https://api.github.com/users/angerson/following{/other_user}", "gists_url": "https://api.github.com/users/angerson/gists{/gist_id}", "starred_url": "https://api.github.com/users/angerson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/angerson/subscriptions", "organizations_url": "https://api.github.com/users/angerson/orgs", "repos_url": "https://api.github.com/users/angerson/repos", "events_url": "https://api.github.com/users/angerson/events{/privacy}", "received_events_url": "https://api.github.com/users/angerson/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-01-13T00:29:30Z", "published_at": "2018-01-13T00:58:43Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.5.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.5.0-rc1", "body": "# Release 1.5.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9 and cuDNN 7.\r\n* Our Linux binaries are built using ubuntu 16 containers, potentially introducing glibc incompatibility issues with ubuntu 14.\r\n* Starting from 1.6 release, our prebuilt binaries will use AVX instructions.  This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* [Eager execution](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/eager) preview version is now available.\r\n* [TensorFlow Lite](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/lite) dev preview is now available.\r\n* CUDA 9 and cuDNN 7 support.\r\n* Accelerated Linear Algebra (XLA):\r\n  * Add `complex64` support to XLA compiler.\r\n  * `bfloat` support is now added to XLA infrastructure.\r\n  * Make `ClusterSpec` propagation work with XLA devices.\r\n  * Use a determinisitic executor to generate XLA graph.\r\n* `tf.contrib`:\r\n  * `tf.contrib.distributions`:\r\n    * Add `tf.contrib.distributions.Autoregressive`.\r\n    * Make `tf.contrib.distributions` QuadratureCompound classes support batch\r\n    * Infer `tf.contrib.distributions.RelaxedOneHotCategorical` `dtype` from arguments.\r\n    * Make `tf.contrib.distributions` quadrature family parameterized by\r\n      `quadrature_grid_and_prob` vs `quadrature_degree`.\r\n    * `auto_correlation` added to `tf.contrib.distributions`\r\n  * Add `tf.contrib.bayesflow.layers`, a collection of probabilistic (neural) layers.\r\n  * Add `tf.contrib.bayesflow.halton_sequence`.\r\n  * Add `tf.contrib.data.make_saveable_from_iterator.`\r\n  * Add `tf.contrib.data.shuffle_and_repeat`.\r\n  * Add new custom transformation: `tf.contrib.data.scan()`.\r\n  * `tf.contrib.distributions.bijectors`:\r\n    * Add `tf.contrib.distributions.bijectors.MaskedAutoregressiveFlow`.\r\n    * Add `tf.contrib.distributions.bijectors.Permute`.\r\n    * Add `tf.contrib.distributions.bijectors.Gumbel`.\r\n    * Add `tf.contrib.distributions.bijectors.Reshape`.\r\n    * Support shape inference (i.e., shapes containing -1) in the Reshape bijector.\r\n* Add `streaming_precision_recall_at_equal_thresholds,` a method for computing streaming precision and recall with `O(num_thresholds + size of predictions)` time and space complexity.\r\n* Change `RunConfig` default behavior to not set a random seed, making random behavior independently random on distributed workers. We expect this to generally improve training performance. Models that do rely on determinism should set a random seed explicitly.\r\n* Replaced the implementation of `tf.flags` with `absl.flags`.\r\n* Add support for `CUBLAS_TENSOR_OP_MATH` in fp16 GEMM\r\n* Add support for CUDA on NVIDIA Tegra devices\r\n\r\n## Bug Fixes and Other Changes\r\n* Documentation updates:\r\n  * Clarified that you can only install TensorFlow on 64-bit machines.\r\n  * Added a short doc explaining how `Estimator`s save checkpoints.\r\n  * Add documentation for ops supported by the `tf2xla` bridge.\r\n  * Fix minor typos in the doc of `SpaceToDepth` and `DepthToSpace`.\r\n  * Updated documentation comments in `mfcc_mel_filterbank.h` and `mfcc.h` to clarify that the input domain is squared magnitude spectra and the weighting is done on linear magnitude spectra (sqrt of inputs).\r\n  * Change `tf.contrib.distributions` docstring examples to use `tfd` alias rather than `ds`, `bs`.\r\n  * Fix docstring typos in `tf.distributions.bijectors.Bijector`.\r\n  * `tf.assert_equal` no longer raises `ValueError.` It now raises `InvalidArgumentError,` as documented.\r\n  * Update Getting Started docs and API intro.\r\n* Google Cloud Storage (GCS):\r\n  * Add userspace DNS caching for the GCS client.\r\n  * Customize request timeouts for the GCS filesystem.\r\n  * Improve GCS filesystem caching.\r\n* Bug Fixes:\r\n  * Fix bug where partitioned integer variables got their wrong shapes. Before\r\n  * Fix correctness bug in CPU and GPU implementations of Adadelta.\r\n  * Fix a bug in `import_meta_graph`'s handling of partitioned variables when importing into a scope. WARNING: This may break loading checkpoints of graphs with partitioned variables saved after using `import_meta_graph` with a non-empty `import_scope` argument.\r\n  * Fix bug in offline debugger which prevented viewing events.\r\n  * Added the `WorkerService.DeleteWorkerSession` method to the gRPC interface, to fix a memory leak. Ensure that your master and worker servers are running the same version of TensorFlow to avoid compatibility issues.\r\n  * Fix bug in peephole implementation of BlockLSTM cell.\r\n  * Fix bug by casting dtype of `log_det_jacobian` to match `log_prob` in `TransformedDistribution`.\r\n  * Fix a bug in `import_meta_graph`'s handling of partitioned variables when\r\n  * Ensure `tf.distributions.Multinomial` doesn't underflow in `log_prob`.  Before this change, all partitions of an integer variable were initialized with the shape of the unpartitioned variable; after this change they are initialized correctly.\r\n* Other:\r\n  * Add necessary shape util support for bfloat16.\r\n  * Add a way to run ops using a step function to MonitoredSession.\r\n  * Add `DenseFlipout` probabilistic layer.\r\n  * A new flag `ignore_live_threads` is available on train. If set to `True`, it will ignore threads that remain running when tearing down infrastructure after successfully completing training, instead of throwing a RuntimeError.\r\n  * Restandardize `DenseVariational` as simpler template for other probabilistic layers.\r\n  * `tf.data` now supports `tf.SparseTensor` components in dataset elements.\r\n  * It is now possible to iterate over `Tensor`s.\r\n  * Allow `SparseSegmentReduction` ops to have missing segment IDs.\r\n  * Modify custom export strategy to account for multidimensional sparse float splits.\r\n  * `Conv2D`, `Conv2DBackpropInput`, `Conv2DBackpropFilter` now supports arbitrary dilations with GPU and cuDNNv6 support.\r\n  * `Estimator` now supports `Dataset`: `input_fn` can return a `Dataset` instead of `Tensor`s.\r\n  * Add `RevBlock`, a memory-efficient implementation of reversible residual layers.\r\n  * Reduce BFCAllocator internal fragmentation.\r\n  * Add `cross_entropy` and `kl_divergence` to `tf.distributions.Distribution`.\r\n  * Add `tf.nn.softmax_cross_entropy_with_logits_v2` which enables backprop w.r.t. the labels.\r\n  * GPU back-end now uses `ptxas` to compile generated PTX.\r\n  * `BufferAssignment`'s protocol buffer dump is now deterministic.\r\n  * Change embedding op to use parallel version of `DynamicStitch`.\r\n  * Add support for sparse multidimensional feature columns.\r\n  * Speed up the case for sparse float columns that have only 1 value.\r\n  * Allow sparse float splits to support multivalent feature columns.\r\n  * Add `quantile` to `tf.distributions.TransformedDistribution`.\r\n  * Add `NCHW_VECT_C` support for `tf.depth_to_space` on GPU.\r\n  * Add `NCHW_VECT_C` support for `tf.space_to_depth` on GPU.\r\n\r\n## API Changes\r\n* Rename `SqueezeDims` attribute to `Axis` in C++ API for Squeeze op.\r\n* `Stream::BlockHostUntilDone` now returns Status rather than bool.\r\n* Minor refactor: move stats files from `stochastic` to `common` and remove\r\n  `stochastic`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nAdam Zahran, Ag Ramesh, Alan Lee, Alan Yee, Alex Sergeev, Alexander, Amir H. Jadidinejad,\r\nAmy, Anastasios Doumoulakis, Andrei Costinescu, Andrei Nigmatulin, Anthony Platanios,\r\nAnush Elangovan, arixlin, Armen Donigian, Art\u00ebM Sobolev, Atlas7, Ben Barsdell, Bill Prin,\r\nBo Wang, Brett Koonce, Cameron Thomas, Carl Thom\u00e9, Cem Eteke, cglewis, Changming Sun,\r\nCharles Shenton, Chi-Hung, Chris Donahue, Chris Filo Gorgolewski, Chris Hoyean Song,\r\nChris Tava, Christian Grail, Christoph Boeddeker, cinqS, Clayne Robison, codrut3, concerttttt,\r\nCQY, Dan Becker, Dan Jarvis, Daniel Zhang, David Norman, dmaclach, Dmitry Trifonov,\r\nDonggeon Lim, dongpilYu, Dr. Kashif Rasul, Edd Wilder-James, Eric Lv, fcharras, Felix Abecassis,\r\nFirefoxMetzger, formath, FredZhang, Gaojin Cao, Gary Deer, Guenther Schmuelling, Hanchen Li,\r\nHanmin Qin, hannesa2, hyunyoung2, Ilya Edrenkin, Jackson Kontny, Jan, Javier Luraschi,\r\nJay Young, Jayaram Bobba, Jeff, Jeff Carpenter, Jeremy Sharpe, Jeroen B\u00e9Dorf, Jimmy Jia,\r\nJinze Bai, Jiongyan Zhang, Joe Castagneri, Johan Ju, Josh Varty, Julian Niedermeier,\r\nJxKing, Karl Lessard, Kb Sriram, Keven Wang, Koan-Sin Tan, Kyle Mills, lanhin, LevineHuang,\r\nLoki Der Quaeler, Loo Rong Jie, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, Mahdi Abavisani, Mahmoud Abuzaina,\r\nManHyuk, Marek \u0160Uppa, MathSquared, Mats Linander, Matt Wytock, Matthew Daley, Maximilian Bachl,\r\nmdymczyk, melvyniandrag, Michael Case, Mike Traynor, miqlas, Namrata-Ibm, Nathan Luehr,\r\nNathan Van Doorn, Noa Ezra, Nolan Liu, Oleg Zabluda, opensourcemattress, Ouwen Huang,\r\nPaul Van Eck, peisong, Peng Yu, PinkySan, pks, powderluv, Qiao Hai-Jun, Qiao Longfei,\r\nRajendra Arora, Ralph Tang, resec, Robin Richtsfeld, Rohan Varma, Ryohei Kuroki, SaintNazaire,\r\nSamuel He, Sandeep Dcunha, sandipmgiri, Sang Han, scott, Scott Mudge, Se-Won Kim, Simon Perkins,\r\nSimone Cirillo, Steffen Schmitz, Suvojit Manna, Sylvus, Taehoon Lee, Ted Chang, Thomas Deegan,\r\nTill Hoffmann, Tim, Toni Kunic, Toon Verstraelen, Tristan Rice, Urs K\u00f6Ster, Utkarsh Upadhyay,\r\nVish (Ishaya) Abrams, Winnie Tsang, Yan Chen, Yan Facai (\u989c\u53d1\u624d), Yi Yang, Yong Tang,\r\nYoussef Hesham, Yuan (Terry) Tang, Zhengsheng Wei, zxcqwe4906, \u5f20\u5fd7\u8c6a, \u7530\u4f20\u6b66 \r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9100502", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/9100502/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/9100502/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.5.0-rc0", "id": 9100502, "node_id": "MDc6UmVsZWFzZTkxMDA1MDI=", "tag_name": "v1.5.0-rc0", "target_commitish": "r1.5", "name": "TensorFlow 1.5.0-rc0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2018-01-03T00:00:43Z", "published_at": "2018-01-04T01:36:37Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.5.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.5.0-rc0", "body": "# Release 1.5.0\r\n\r\n## Breaking Changes\r\n* Prebuilt binaries are now built against CUDA 9 and cuDNN 7.\r\n* Our Linux binaries are built using ubuntu 16 containers, potentially\r\n  introducing glibc incompatibility issues with ubuntu 14.\r\n* Starting from 1.6 release, our prebuilt binaries will use AVX instructions.\r\n  This may break TF on older CPUs.\r\n\r\n## Major Features And Improvements\r\n* [Eager execution](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/eager)\r\n  preview version is now available.\r\n* [TensorFlow Lite](https://github.com/tensorflow/tensorflow/tree/r1.5/tensorflow/contrib/lite)\r\n  dev preview is now available.\r\n* CUDA 9 and cuDNN 7 support.\r\n\r\n## Bug Fixes and Other Changes\r\n* `auto_correlation` added to `tf.contrib.distributions`.\r\n* Add `DenseFlipout` probabilistic layer.\r\n* Restandardize `DenseVariational` as simpler template for other probabilistic layers.\r\n* Make `tf.contrib.distributions` QuadratureCompound classes support batch.\r\n* `Stream::BlockHostUntilDone` now returns Status rather than bool.\r\n* Customize request timeouts for the GCS filesystem.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abdullah Alrasheed, abenmao, Adam Salvail, Aditya Dhulipala, Ag Ramesh,\r\nAkimasa Kimura, Alan Du, Alan Yee, Alexander, Amit Kushwaha, Amy, Andrei Costinescu,\r\nAndrei Nigmatulin, Andrew Erlichson, Andrew Myers, Andrew Stepanov, Androbin, AngryPowman,\r\nAnish Shah, Anton Daitche, Artsiom Chapialiou, asdf2014, Aseem Raj Baranwal, Ash Hall,\r\nBart Kiers, Batchu Venkat Vishal, ben, Ben Barsdell, Bill Piel, Carl Thom\u00e9, Catalin Voss,\r\nChangming Sun, Chengzhi Chen, Chi Zeng, Chris Antaki, Chris Donahue, Chris Oelmueller,\r\nChris Tava, Clayne Robison, Codrut, Courtial Florian, Dalmo Cirne, Dan J, Darren Garvey,\r\nDavid Kristoffersson, David Norman, David R\u00f6Thlisberger, DavidNorman, Dhruv, DimanNe,\r\nDorokhov, Duncan Mac-Vicar P, EdwardDixon, EMCP, error.d, FAIJUL, Fan Xia,\r\nFrancois Xavier, Fred Reiss, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang,\r\nGuenther Schmuelling, Guo Yejun (\u90ed\u53f6\u519b), Hans Gaiser, HectorSVC, Hyungsuk Yoon,\r\nJames Pruegsanusak, Jay Young, Jean Wanka, Jeff Carpenter, Jeremy Rutman, Jeroen B\u00e9Dorf,\r\nJett Jones, Jimmy Jia, jinghuangintel, jinze1994, JKurland, Joel Hestness, joetoth,\r\nJohn B Nelson, John Impallomeni, John Lawson, Jonas, Jonathan Dekhtiar, joshkyh, Jun Luan,\r\nJun Mei, Kai Sasaki, Karl Lessard, karl@kubx.ca, Kb Sriram, Kenichi Ueno, Kevin Slagle,\r\nKongsea, Lakshay Garg, lhlmgr, Lin Min, liu.guangcong, Loki Der Quaeler, Louie Helm,\r\nlucasmoura, Luke Iwanski, Lyndon White, Mahmoud Abuzaina, Marcel Puyat, Mark Aaron Shirley,\r\nMichele Colombo, MtDersvan, Namrata-Ibm, Nathan Luehr, Naurril, Nayana Thorat, Nicolas Lopez,\r\nNiranjan Hasabnis, Nolan Liu, Nouce, Oliver Hennigh, osdamv, Patrik Erdes,\r\nPatryk Chrabaszcz, Pavel Christof, Penghao Cen, postBG, Qingqing Cao, Qingying Chen, qjivy,\r\nRaphael, Rasmi, raymondxyang, Renze Yu, resec, Roffel, Ruben Vereecken, Ryohei Kuroki,\r\nsandipmgiri, Santiago Castro, Scott Kirkland, Sean Vig, Sebastian Raschka, Sebastian Weiss,\r\nSergey Kolesnikov, Sergii Khomenko, Shahid, Shivam Kotwalia, Stuart Berg, Sumit Gouthaman,\r\nsuperzerg, Sven Mayer, tetris, Ti Zhou, Tiago Freitas Pereira, Tian Jin, Tomoaki Oiki,\r\nVaibhav Sood, vfdev, Vivek Rane, Vladimir Moskva, wangqr, Weber Xie, Will Frey,\r\nYan Facai (\u989c\u53d1\u624d), yanivbl6, Yaroslav Bulatov, Yixing Lao, Yong Tang, youkaichao,\r\nYuan (Terry) Tang, Yue Zhang, Yuxin Wu, Ziming Dong, ZxYuan, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8824013", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8824013/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/8824013/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.4.1", "id": 8824013, "node_id": "MDc6UmVsZWFzZTg4MjQwMTM=", "tag_name": "v1.4.1", "target_commitish": "r1.4", "name": "TensorFlow 1.4.1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-12-08T04:12:18Z", "published_at": "2017-12-08T21:59:11Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.4.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.4.1", "body": "# Release 1.4.1\r\n\r\n## Bug Fixes and Other Changes\r\n* `LinearClassifier` fix for CloudML Engine.\r\n* NOTE: There is no Windows binary for 1.4.1. The only difference to 1.4.0 is the CloudML Engine fix, and since CloudML Engine only supports Linux, Windows is unaffected."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8363957", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8363957/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/8363957/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.4.0", "id": 8363957, "node_id": "MDc6UmVsZWFzZTgzNjM5NTc=", "tag_name": "v1.4.0", "target_commitish": "r1.4", "name": "TensorFlow 1.4.0", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-11-01T20:21:13Z", "published_at": "2017-11-02T18:29:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.4.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.4.0", "body": "# Release 1.4.0\r\n\r\n## Major Features And Improvements\r\n* `tf.keras` is now part of the core TensorFlow API.\r\n* [`tf.data`](http://tensorflow.org/programmers_guide/datasets) is now part of\r\n  the core TensorFlow API.\r\n  * The API is now subject to backwards compatibility guarantees.\r\n  * For a guide to migrating from the `tf.contrib.data` API, see the\r\n    [README](https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/contrib/data/README.md).\r\n  * Major new features include `Dataset.from_generator()` (for building an input\r\n    pipeline from a Python generator), and the `Dataset.apply()` method for\r\n    applying custom transformation functions.\r\n  * Several custom transformation functions have been added, including\r\n    `tf.contrib.data.batch_and_drop_remainder()` and\r\n    `tf.contrib.data.sloppy_interleave()`.\r\n* Add `train_and_evaluate` for simple distributed `Estimator` training.\r\n* Add `tf.spectral.dct` for computing the DCT-II.\r\n* Add Mel-Frequency Cepstral Coefficient support to `tf.contrib.signal`\r\n  (with GPU and gradient support).\r\n* Add a self-check on `import tensorflow` for Windows DLL issues.\r\n* Add NCHW support to `tf.depth_to_space` on GPU.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Add `eval` command to allow evaluation of arbitrary Python/numpy expressions\r\n    in tfdbg command-line interface. See\r\n    [Debugging TensorFlow Programs](https://www.tensorflow.org/programmers_guide/debugger)\r\n    for more details.\r\n  * Usability improvement: The frequently used tensor filter `has_inf_or_nan` is\r\n    now added to `Session` wrappers and hooks by default. So there is no need\r\n    for clients to call `.add_tensor_filter(tf_debug.has_inf_or_nan)` anymore.\r\n* SinhArcsinh (scalar) distribution added to `contrib.distributions`.\r\n* Make `GANEstimator` opensource.\r\n* `Estimator.export_savedmodel()` now includes all valid serving signatures\r\n  that can be constructed from the Serving Input Receiver and all available\r\n  ExportOutputs. For instance, a classifier may provide regression- and\r\n  prediction-flavored outputs, in addition to the classification-flavored one.\r\n  Building signatures from these allows TF Serving to honor requests using the\r\n  different APIs (Classify, Regress, and Predict). Furthermore,\r\n  `serving_input_receiver_fn()` may now specify alternative subsets of nodes\r\n  that may act as inputs. This allows, for instance, producing a prediction\r\n  signature for a classifier that accepts raw `Tensors` instead of a serialized\r\n  `tf.Example`.\r\n* Add `tf.contrib.bayesflow.hmc`.\r\n* Add `tf.contrib.distributions.MixtureSameFamily`.\r\n* Make `Dataset.shuffle()` always reshuffles after each iteration by default.\r\n* Add `tf.contrib.bayesflow.metropolis_hastings`.\r\n* Add `log_rate` parameter to `tf.contrib.distributions.Poisson`.\r\n* Extend `tf.contrib.distributions.bijector` API to handle some non-injective\r\n  transforms.\r\n* Java:\r\n  * Generics (e.g., `Tensor<Integer>`) for improved type-safety\r\n    (courtesy @andrewcmyers).\r\n  * Support for multi-dimensional string tensors.\r\n  * Support loading of custom operations (e.g. many in `tf.contrib`) on Linux\r\n    and OS X\r\n* All our prebuilt binaries have been built with CUDA 8 and cuDNN 6.\r\n  We anticipate releasing TensorFlow 1.5 with CUDA 9 and cuDNN 7.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.nn.rnn_cell.DropoutWrapper` is now more careful about dropping out LSTM\r\n  states.  Specifically, it no longer ever drops the `c` (memory) state of an\r\n  `LSTMStateTuple`.  The new behavior leads to proper dropout behavior\r\n  for LSTMs and stacked LSTMs.  This bug fix follows recommendations from\r\n  published literature, but is a behavioral change.  State dropout behavior\r\n  may be customized via the new `dropout_state_filter_visitor` argument.\r\n* Removed `tf.contrib.training.python_input`.  The same behavior, in a more\r\n  flexible and reproducible package, is available via the new\r\n  `tf.contrib.data.Dataset.from_generator` method!\r\n* Fix `tf.contrib.distributions.Affine` incorrectly computing log-det-jacobian.\r\n* Fix `tf.random_gamma` incorrectly handling non-batch, scalar draws.\r\n* Resolved a race condition in TensorForest TreePredictionsV4Op.\r\n* Google Cloud Storage file system, Amazon S3 file system, and Hadoop file\r\n  system support are now default build options.\r\n* Custom op libraries must link against libtensorflow_framework.so\r\n  (installed at `tf.sysconfig.get_lib()`).\r\n* Change `RunConfig` default behavior to not set a random seed, making random\r\n  behavior independently random on distributed workers. We expect this to\r\n  generally improve training performance. Models that do rely on determinism\r\n  should set a random seed explicitly.\r\n\r\n## Breaking Changes to the API\r\n* The signature of the `tf.contrib.data.rejection_resample()` function has been\r\n  changed. It now returns a function that can be used as an argument to\r\n  `Dataset.apply()`.\r\n* Remove `tf.contrib.data.Iterator.from_dataset()` method. Use\r\n  `Dataset.make_initializable_iterator()` instead.\r\n* Remove seldom used and unnecessary `tf.contrib.data.Iterator.dispose_op()`.\r\n* Reorder some TFGAN loss functions in a non-backwards compatible way.\r\n\r\n## Known Issues\r\n* In Python 3, `Dataset.from_generator()` does not support Unicode strings.\r\n  You must convert any strings to bytes objects before yielding them from\r\n  the generator.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abdullah Alrasheed, abenmao, Adam Salvail, Aditya Dhulipala, Ag Ramesh,\r\nAkimasa Kimura, Alan Du, Alan Yee, Alexander, Amit Kushwaha, Amy, Andrei Costinescu,\r\nAndrei Nigmatulin, Andrew Erlichson, Andrew Myers, Andrew Stepanov, Androbin, AngryPowman,\r\nAnish Shah, Anton Daitche, Artsiom Chapialiou, asdf2014, Aseem Raj Baranwal, Ash Hall,\r\nBart Kiers, Batchu Venkat Vishal, ben, Ben Barsdell, Bill Piel, Carl Thom\u00e9, Catalin Voss,\r\nChangming Sun, Chengzhi Chen, Chi Zeng, Chris Antaki, Chris Donahue, Chris Oelmueller,\r\nChris Tava, Clayne Robison, Codrut, Courtial Florian, Dalmo Cirne, Dan J, Darren Garvey,\r\nDavid Kristoffersson, David Norman, David R\u00f6Thlisberger, DavidNorman, Dhruv, DimanNe,\r\nDorokhov, Duncan Mac-Vicar P, EdwardDixon, EMCP, error.d, FAIJUL, Fan Xia,\r\nFrancois Xavier, Fred Reiss, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang,\r\nGuenther Schmuelling, Guo Yejun (\u90ed\u53f6\u519b), Hans Gaiser, HectorSVC, Hyungsuk Yoon,\r\nJames Pruegsanusak, Jay Young, Jean Wanka, Jeff Carpenter, Jeremy Rutman, Jeroen B\u00e9Dorf,\r\nJett Jones, Jimmy Jia, jinghuangintel, jinze1994, JKurland, Joel Hestness, joetoth,\r\nJohn B Nelson, John Impallomeni, John Lawson, Jonas, Jonathan Dekhtiar, joshkyh, Jun Luan,\r\nJun Mei, Kai Sasaki, Karl Lessard, karl@kubx.ca, Kb Sriram, Kenichi Ueno, Kevin Slagle,\r\nKongsea, Lakshay Garg, lhlmgr, Lin Min, liu.guangcong, Loki Der Quaeler, Louie Helm,\r\nlucasmoura, Luke Iwanski, Lyndon White, Mahmoud Abuzaina, Marcel Puyat, Mark Aaron Shirley,\r\nMichele Colombo, MtDersvan, Namrata-Ibm, Nathan Luehr, Naurril, Nayana Thorat, Nicolas Lopez,\r\nNiranjan Hasabnis, Nolan Liu, Nouce, Oliver Hennigh, osdamv, Patrik Erdes,\r\nPatryk Chrabaszcz, Pavel Christof, Penghao Cen, postBG, Qingqing Cao, Qingying Chen, qjivy,\r\nRaphael, Rasmi, raymondxyang, Renze Yu, resec, Roffel, Ruben Vereecken, Ryohei Kuroki,\r\nsandipmgiri, Santiago Castro, Scott Kirkland, Sean Vig, Sebastian Raschka, Sebastian Weiss,\r\nSergey Kolesnikov, Sergii Khomenko, Shahid, Shivam Kotwalia, Stuart Berg, Sumit Gouthaman,\r\nsuperzerg, Sven Mayer, tetris, Ti Zhou, Tiago Freitas Pereira, Tian Jin, Tomoaki Oiki,\r\nVaibhav Sood, vfdev, Vivek Rane, Vladimir Moskva, wangqr, Weber Xie, Will Frey,\r\nYan Facai (\u989c\u53d1\u624d), yanivbl6, Yaroslav Bulatov, Yixing Lao, Yong Tang, youkaichao,\r\nYuan (Terry) Tang, Yue Zhang, Yuxin Wu, Ziming Dong, ZxYuan, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8227695", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8227695/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/8227695/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.4.0-rc1", "id": 8227695, "node_id": "MDc6UmVsZWFzZTgyMjc2OTU=", "tag_name": "v1.4.0-rc1", "target_commitish": "r1.4", "name": "TensorFlow 1.4.0-rc1", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-10-20T23:10:16Z", "published_at": "2017-10-23T20:46:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.4.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.4.0-rc1", "body": "# Release 1.4.0\r\n\r\n## Major Features And Improvements\r\n* `tf.keras` is now part of the core TensorFlow API.\r\n* `tf.data` is now part of the core TensorFlow API.\r\n  * The API is now subject to backwards compatibility guarantees.\r\n  * For a guide to migrating from the `tf.contrib.data` API, see the\r\n    [README](https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/contrib/data/README.md).\r\n  * Major new features include `Dataset.from_generator()` (for building an input\r\n    pipeline from a Python generator), and the `Dataset.apply()` method for\r\n    applying custom transformation functions.\r\n  * Several custom transformation functions have been added, including\r\n    `tf.contrib.data.batch_and_drop_remainder()` and\r\n    `tf.contrib.data.sloppy_interleave()`.\r\n* Add `train_and_evaluate` for simple distributed `Estimator` training.\r\n* Add `tf.spectral.dct` for computing the DCT-II.\r\n* Add Mel-Frequency Cepstral Coefficient support to `tf.contrib.signal`\r\n  (with GPU and gradient support).\r\n* Add a self-check on `import tensorflow` for Windows DLL issues.\r\n* Add NCHW support to `tf.depth_to_space` on GPU.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Add `eval` command to allow evaluation of arbitrary Python/numpy expressions\r\n    in tfdbg command-line interface. See\r\n    [Debugging TensorFlow Programs](https://www.tensorflow.org/programmers_guide/debugger)\r\n    for more details.\r\n  * Usability improvement: The frequently used tensor filter `has_inf_or_nan` is\r\n    now added to `Session` wrappers and hooks by default. So there is no need\r\n    for clients to call `.add_tensor_filter(tf_debug.has_inf_or_nan)` anymore.\r\n* SinhArcsinh (scalar) distribution added to `contrib.distributions`.\r\n* Make `GANEstimator` opensource.\r\n* `Estimator.export_savedmodel()` now includes all valid serving signatures\r\n  that can be constructed from the Serving Input Receiver and all available\r\n  ExportOutputs. For instance, a classifier may provide regression- and\r\n  prediction-flavored outputs, in addition to the classification-flavored one.\r\n  Building signatures from these allows TF Serving to honor requests using the\r\n  different APIs (Classify, Regress, and Predict). Furthermore,\r\n  `serving_input_receiver_fn()` may now specify alternative subsets of nodes\r\n  that may act as inputs. This allows, for instance, producing a prediction\r\n  signature for a classifier that accepts raw `Tensors` instead of a serialized\r\n  `tf.Example`.\r\n* Add `tf.contrib.bayesflow.hmc`.\r\n* Add `tf.contrib.distributions.MixtureSameFamily`.\r\n* Make `Dataset.shuffle()` always reshuffles after each iteration by default.\r\n* Add `tf.contrib.bayesflow.metropolis_hastings`.\r\n* Add `log_rate` parameter to `tf.contrib.distributions.Poisson`.\r\n* Extend `tf.contrib.distributions.bijector` API to handle some non-injective\r\n  transforms.\r\n* Java:\r\n  * Generics (e.g., `Tensor<Integer>`) for improved type-safety\r\n    (courtesy @andrewcmyers).\r\n  * Support for multi-dimensional string tensors.\r\n  * Support loading of custom operations (e.g. many in `tf.contrib`) on Linux\r\n    and OS X\r\n* All our prebuilt binaries have been built with CUDA 8 and cuDNN 6.\r\n  We anticipate releasing TensorFlow 1.5 with CUDA 9 and cuDNN 7.\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.nn.rnn_cell.DropoutWrapper` is now more careful about dropping out LSTM\r\n  states.  Specifically, it no longer ever drops the `c` (memory) state of an\r\n  `LSTMStateTuple`.  The new behavior leads to proper dropout behavior\r\n  for LSTMs and stacked LSTMs.  This bug fix follows recommendations from\r\n  published literature, but is a behavioral change.  State dropout behavior\r\n  may be customized via the new `dropout_state_filter_visitor` argument.\r\n* Removed `tf.contrib.training.python_input`.  The same behavior, in a more\r\n  flexible and reproducible package, is available via the new\r\n  `tf.contrib.data.Dataset.from_generator` method!\r\n* Fix `tf.contrib.distributions.Affine` incorrectly computing log-det-jacobian.\r\n* Fix `tf.random_gamma` incorrectly handling non-batch, scalar draws.\r\n* Resolved a race condition in TensorForest TreePredictionsV4Op.\r\n* Google Cloud Storage file system, Amazon S3 file system, and Hadoop file\r\n  system support are now default build options.\r\n* Custom op libraries must link against libtensorflow_framework.so\r\n  (installed at `tf.sysconfig.get_lib()`).\r\n* Change `RunConfig` default behavior to not set a random seed, making random\r\n  behavior independently random on distributed workers. We expect this to\r\n  generally improve training performance. Models that do rely on determinism\r\n  should set a random seed explicitly.\r\n\r\n## Breaking Changes to the API\r\n* The signature of the `tf.contrib.data.rejection_resample()` function has been\r\n  changed. It now returns a function that can be used as an argument to\r\n  `Dataset.apply()`.\r\n* Remove `tf.contrib.data.Iterator.from_dataset()` method. Use\r\n  `Dataset.make_initializable_iterator()` instead.\r\n* Remove seldom used and unnecessary `tf.contrib.data.Iterator.dispose_op()`.\r\n* Reorder some TFGAN loss functions in a non-backwards compatible way.\r\n\r\n## Known Issues\r\n* In Python 3, `Dataset.from_generator()` does not support Unicode strings.\r\n  You must convert any strings to bytes objects before yielding them from\r\n  the generator.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abdullah Alrasheed, abenmao, Adam Salvail, Aditya Dhulipala, Ag Ramesh,\r\nAkimasa Kimura, Alan Du, Alan Yee, Alexander, Amit Kushwaha, Amy, Andrei Costinescu,\r\nAndrei Nigmatulin, Andrew Erlichson, Andrew Myers, Andrew Stepanov, Androbin, AngryPowman,\r\nAnish Shah, Anton Daitche, Artsiom Chapialiou, asdf2014, Aseem Raj Baranwal, Ash Hall,\r\nBart Kiers, Batchu Venkat Vishal, ben, Ben Barsdell, Bill Piel, Carl Thom\u00e9, Catalin Voss,\r\nChangming Sun, Chengzhi Chen, Chi Zeng, Chris Antaki, Chris Donahue, Chris Oelmueller,\r\nChris Tava, Clayne Robison, Codrut, Courtial Florian, Dalmo Cirne, Dan J, Darren Garvey,\r\nDavid Kristoffersson, David Norman, David R\u00f6Thlisberger, DavidNorman, Dhruv, DimanNe,\r\nDorokhov, Duncan Mac-Vicar P, EdwardDixon, EMCP, error.d, FAIJUL, Fan Xia,\r\nFrancois Xavier, Fred Reiss, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang,\r\nGuenther Schmuelling, Guo Yejun (\u90ed\u53f6\u519b), Hans Gaiser, HectorSVC, Hyungsuk Yoon,\r\nJames Pruegsanusak, Jay Young, Jean Wanka, Jeff Carpenter, Jeremy Rutman, Jeroen B\u00e9Dorf,\r\nJett Jones, Jimmy Jia, jinghuangintel, jinze1994, JKurland, Joel Hestness, joetoth,\r\nJohn B Nelson, John Impallomeni, John Lawson, Jonas, Jonathan Dekhtiar, joshkyh, Jun Luan,\r\nJun Mei, Kai Sasaki, Karl Lessard, karl@kubx.ca, Kb Sriram, Kenichi Ueno, Kevin Slagle,\r\nKongsea, Lakshay Garg, lhlmgr, Lin Min, liu.guangcong, Loki Der Quaeler, Louie Helm,\r\nlucasmoura, Luke Iwanski, Lyndon White, Mahmoud Abuzaina, Marcel Puyat, Mark Aaron Shirley,\r\nMichele Colombo, MtDersvan, Namrata-Ibm, Nathan Luehr, Naurril, Nayana Thorat, Nicolas Lopez,\r\nNiranjan Hasabnis, Nolan Liu, Nouce, Oliver Hennigh, osdamv, Patrik Erdes,\r\nPatryk Chrabaszcz, Pavel Christof, Penghao Cen, postBG, Qingqing Cao, Qingying Chen, qjivy,\r\nRaphael, Rasmi, raymondxyang, Renze Yu, resec, Roffel, Ruben Vereecken, Ryohei Kuroki,\r\nsandipmgiri, Santiago Castro, Scott Kirkland, Sean Vig, Sebastian Raschka, Sebastian Weiss,\r\nSergey Kolesnikov, Sergii Khomenko, Shahid, Shivam Kotwalia, Stuart Berg, Sumit Gouthaman,\r\nsuperzerg, Sven Mayer, tetris, Ti Zhou, Tiago Freitas Pereira, Tian Jin, Tomoaki Oiki,\r\nVaibhav Sood, vfdev, Vivek Rane, Vladimir Moskva, wangqr, Weber Xie, Will Frey,\r\nYan Facai (\u989c\u53d1\u624d), yanivbl6, Yaroslav Bulatov, Yixing Lao, Yong Tang, youkaichao,\r\nYuan (Terry) Tang, Yue Zhang, Yuxin Wu, Ziming Dong, ZxYuan, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8084789", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/8084789/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/8084789/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.4.0-rc0", "id": 8084789, "node_id": "MDc6UmVsZWFzZTgwODQ3ODk=", "tag_name": "v1.4.0-rc0", "target_commitish": "r1.4", "name": "TensorFlow 1.4.0-rc0", "draft": false, "author": {"login": "case540", "id": 1299636, "node_id": "MDQ6VXNlcjEyOTk2MzY=", "avatar_url": "https://avatars2.githubusercontent.com/u/1299636?v=4", "gravatar_id": "", "url": "https://api.github.com/users/case540", "html_url": "https://github.com/case540", "followers_url": "https://api.github.com/users/case540/followers", "following_url": "https://api.github.com/users/case540/following{/other_user}", "gists_url": "https://api.github.com/users/case540/gists{/gist_id}", "starred_url": "https://api.github.com/users/case540/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/case540/subscriptions", "organizations_url": "https://api.github.com/users/case540/orgs", "repos_url": "https://api.github.com/users/case540/repos", "events_url": "https://api.github.com/users/case540/events{/privacy}", "received_events_url": "https://api.github.com/users/case540/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-10-10T23:45:41Z", "published_at": "2017-10-11T19:16:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.4.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.4.0-rc0", "body": "# Release 1.4.0\r\n\r\n## Major Features And Improvements\r\n* `tf.data` is now part of the core TensorFlow API.\r\n  * The API is now subject to backwards compatibility guarantees.\r\n  * For a guide to migrating from the `tf.contrib.data` API, see the\r\n    [README](https://github.com/tensorflow/tensorflow/blob/r1.4/tensorflow/contrib/data/README.md).\r\n  * Major new features include `Dataset.from_generator()` (for building an input\r\n    pipeline from a Python generator), and the `Dataset.apply()` method for\r\n    applying custom transformation functions.\r\n  * Several custom transformation functions have been added, including\r\n    `tf.contrib.data.batch_and_drop_remainder()` and\r\n    `tf.contrib.data.sloppy_interleave()`.\r\n* Add `train_and_evaluate` for simple distributed `Estimator` training.\r\n* Add `tf.spectral.dct` for computing the DCT-II.\r\n* Add Mel-Frequency Cepstral Coefficient support to `tf.contrib.signal`\r\n  (with GPU and gradient support).\r\n* Add a self-check on `import tensorflow` for Windows DLL issues.\r\n* Add NCHW support to `tf.depth_to_space` on GPU.\r\n* SinhArcsinh (scalar) distribution added to `contrib.distributions`.\r\n* Make `GANEstimator` opensource.\r\n* `Estimator.export_savedmodel()` now includes all valid serving signatures\r\n  that can be constructed from the Serving Input Receiver and all available\r\n  ExportOutputs. For instance, a classifier may provide regression- and\r\n  prediction-flavored outputs, in addition to the classification-flavored one.\r\n  Building signatures from these allows TF Serving to honor requests using the\r\n  different APIs (Classify, Regress, and Predict). Furthermore,\r\n  `serving_input_receiver_fn()` may now specify alternative subsets of nodes\r\n  that may act as inputs. This allows, for instance, producing a prediction\r\n  signature for a classifier that accepts raw `Tensors` instead of a serialized\r\n  `tf.Example`.\r\n* Add `tf.contrib.bayesflow.hmc`.\r\n* Add `tf.contrib.distributions.MixtureSameFamily`.\r\n* Make `Dataset.shuffle()` always reshuffles after each iteration by default.\r\n* Add `tf.contrib.bayesflow.metropolis_hastings`.\r\n* Add `log_rate` parameter to `tf.contrib.distributions.Poisson`.\r\n* Extend `tf.contrib.distributions.bijector` API to handle some non-injective\r\n  transforms.\r\n* Java:\r\n  * Generics (e.g., `Tensor<Integer>`) for improved type-safety\r\n    (courtesy @andrewcmyers).\r\n  * Support for multi-dimensional string tensors.\r\n  * Support loading of custom operations (e.g. many in `tf.contrib`) on Linux\r\n    and OS X\r\n\r\n## Bug Fixes and Other Changes\r\n* `tf.nn.rnn_cell.DropoutWrapper` is now more careful about dropping out LSTM\r\n  states.  Specifically, it no longer ever drops the `c` (memory) state of an\r\n  `LSTMStateTuple`.  The new behavior leads to proper dropout behavior\r\n  for LSTMs and stacked LSTMs.  This bug fix follows recommendations from\r\n  published literature, but is a behavioral change.  State dropout behavior\r\n  may be customized via the new `dropout_state_filter_visitor` argument.\r\n* Removed `tf.contrib.training.python_input`.  The same behavior, in a more\r\n  flexible and reproducible package, is available via the new\r\n  `tf.contrib.data.Dataset.from_generator` method!\r\n* Fix `tf.contrib.distributions.Affine` incorrectly computing log-det-jacobian.\r\n* Fix `tf.random_gamma` incorrectly handling non-batch, scalar draws.\r\n* Resolved a race condition in TensorForest TreePredictionsV4Op.\r\n* Google Cloud Storage file system and Hadoop file system support are now\r\n  default build options.\r\n\r\n## Breaking Changes to the API\r\n* The signature of the `tf.contrib.data.rejection_resample()` function has been\r\n  changed. It now returns a function that can be used as an argument to\r\n  `Dataset.apply()`.\r\n* Remove `tf.contrib.data.Iterator.from_dataset()` method. Use\r\n  `Dataset.make_initializable_iterator()` instead.\r\n* Remove seldom used and unnecessary `tf.contrib.data.Iterator.dispose_op()`.\r\n* Reorder some TFGAN loss functions in a non-backwards compatible way.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4d55397500, Abdullah Alrasheed, abenmao, Adam Salvail, Aditya Dhulipala, Ag Ramesh,\r\nAkimasa Kimura, Alan Du, Alan Yee, Alexander, Amit Kushwaha, Amy, Andrei Costinescu,\r\nAndrei Nigmatulin, Andrew Erlichson, Andrew Myers, Andrew Stepanov, Androbin, AngryPowman,\r\nAnish Shah, Anton Daitche, Artsiom Chapialiou, asdf2014, Aseem Raj Baranwal, Ash Hall,\r\nBart Kiers, Batchu Venkat Vishal, ben, Ben Barsdell, Bill Piel, Carl Thom\u00e9, Catalin Voss,\r\nChangming Sun, Chengzhi Chen, Chi Zeng, Chris Antaki, Chris Donahue, Chris Oelmueller,\r\nChris Tava, Clayne Robison, Codrut, Courtial Florian, Dalmo Cirne, Dan J, Darren Garvey,\r\nDavid Kristoffersson, David Norman, David R\u00f6Thlisberger, DavidNorman, Dhruv, DimanNe,\r\nDorokhov, Duncan Mac-Vicar P, EdwardDixon, EMCP, error.d, FAIJUL, Fan Xia,\r\nFrancois Xavier, Fred Reiss, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang,\r\nGuenther Schmuelling, Guo Yejun (\u90ed\u53f6\u519b), Hans Gaiser, HectorSVC, Hyungsuk Yoon,\r\nJames Pruegsanusak, Jay Young, Jean Wanka, Jeff Carpenter, Jeremy Rutman, Jeroen B\u00e9Dorf,\r\nJett Jones, Jimmy Jia, jinghuangintel, jinze1994, JKurland, Joel Hestness, joetoth,\r\nJohn B Nelson, John Impallomeni, John Lawson, Jonas, Jonathan Dekhtiar, joshkyh, Jun Luan,\r\nJun Mei, Kai Sasaki, Karl Lessard, karl@kubx.ca, Kb Sriram, Kenichi Ueno, Kevin Slagle,\r\nKongsea, Lakshay Garg, lhlmgr, Lin Min, liu.guangcong, Loki Der Quaeler, Louie Helm,\r\nlucasmoura, Luke Iwanski, Lyndon White, Mahmoud Abuzaina, Marcel Puyat, Mark Aaron Shirley,\r\nMichele Colombo, MtDersvan, Namrata-Ibm, Nathan Luehr, Naurril, Nayana Thorat, Nicolas Lopez,\r\nNiranjan Hasabnis, Nolan Liu, Nouce, Oliver Hennigh, osdamv, Patrik Erdes,\r\nPatryk Chrabaszcz, Pavel Christof, Penghao Cen, postBG, Qingqing Cao, Qingying Chen, qjivy,\r\nRaphael, Rasmi, raymondxyang, Renze Yu, resec, Roffel, Ruben Vereecken, Ryohei Kuroki,\r\nsandipmgiri, Santiago Castro, Scott Kirkland, Sean Vig, Sebastian Raschka, Sebastian Weiss,\r\nSergey Kolesnikov, Sergii Khomenko, Shahid, Shivam Kotwalia, Stuart Berg, Sumit Gouthaman,\r\nsuperzerg, Sven Mayer, tetris, Ti Zhou, Tiago Freitas Pereira, Tian Jin, Tomoaki Oiki,\r\nVaibhav Sood, vfdev, Vivek Rane, Vladimir Moskva, wangqr, Weber Xie, Will Frey,\r\nYan Facai (\u989c\u53d1\u624d), yanivbl6, Yaroslav Bulatov, Yixing Lao, Yong Tang, youkaichao,\r\nYuan (Terry) Tang, Yue Zhang, Yuxin Wu, Ziming Dong, ZxYuan, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7886370", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7886370/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/7886370/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.3.1", "id": 7886370, "node_id": "MDc6UmVsZWFzZTc4ODYzNzA=", "tag_name": "v1.3.1", "target_commitish": "r1.3", "name": "TensorFlow 1.3.1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-09-26T17:54:56Z", "published_at": "2017-09-26T17:55:11Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.3.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.3.1", "body": "# Release 1.3.1\r\n\r\nNOTE: TensorFlow 1.3.1 is a GitHub only release. The latest exported binaries are still version 1.3.0.\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixing the hash mismatch errors when building from source.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7418091", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7418091/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/7418091/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.3.0", "id": 7418091, "node_id": "MDc6UmVsZWFzZTc0MTgwOTE=", "tag_name": "v1.3.0", "target_commitish": "r1.3", "name": "TensorFlow 1.3.0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-08-17T01:20:31Z", "published_at": "2017-08-17T01:30:34Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.3.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.3.0", "body": "# Release 1.3.0\r\n\r\nSee also [TensorBoard 0.1.4](https://github.com/tensorflow/tensorboard/releases/tag/0.1.4) release notes.\r\n\r\n## Major Features and Improvements\r\n* Added canned estimators to Tensorflow library. List of added estimators:\r\n  * `DNNClassifier`\r\n  * `DNNRegressor`\r\n  * `LinearClassifier`\r\n  * `LinearRegressor`\r\n  * `DNNLinearCombinedClassifier`\r\n  * `DNNLinearCombinedRegressor`.\r\n* All our prebuilt binaries have been built with cuDNN 6. We anticipate releasing TensorFlow 1.4 with cuDNN 7.\r\n* `import tensorflow` now goes much faster.\r\n* Adds a file cache to the GCS filesystem with configurable max staleness for file contents. This permits caching of file contents across close/open boundaries.\r\n* Added an axis parameter to `tf.gather`.\r\n* Added a `constant_values` keyword argument to `tf.pad`.\r\n* Adds `Dataset.interleave` transformation.\r\n* Add `ConcatenateDataset` to concatenate two datasets.\r\n* Added Mobilenet support to TensorFlow for Poets training script.\r\n* Adds a block cache to the GCS filesystem with configurable block size and count.\r\n* SinhArcSinh bijector added.\r\n* Added `Dataset.list_files` API.\r\n* Introduces new operations and Python bindings for the Cloud TPU.\r\n* Adding TensorFlow-iOS CocoaPod for symmetry with tensorflow-android.\r\n* Introduces base implementations of ClusterResolvers.\r\n* Unify memory representations of TensorShape and PartialTensorShape. As a consequence, tensors now have a maximum of 254 dimensions, not 255.\r\n* Changed references to LIBXSMM to use version 1.8.1.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Display summaries of numeric tensor values with the `-s` flag to command `print_tensor` or `pt`.\r\n  * Display feed values with the `print_feed` or `pf` command and clickable links in the curses UI.\r\n  * Runtime profiler at the op level and the Python source line level with the `run -p` command.\r\n* Initial release of the statistical distribution library `tf.distributions`.\r\n* GPU kernels and speed improvements for for unary `tf.where` and `tf.nn.top_k`.\r\n* Monotonic Attention wrappers added to `tf.contrib.seq2seq`.\r\n* Added `tf.contrib.signal`, a library for signal processing primitives.\r\n* Added `tf.contrib.resampler`, containing CPU and GPU ops for differentiable resampling of images.\r\n\r\n## Breaking Changes to the API\r\n* `tf.RewriterConfig` was removed from the Python API after being available in 1.2 release candidates (it was never in an actual release). Graph rewriting is still available, just not as `tf.RewriterConfig`. Instead add an explicit import.\r\n* Breaking change to `tf.contrib.data.Dataset` APIs that expect a nested structure. Lists are now converted to `tf.Tensor` implicitly. You may need to change uses of lists to tuples in existing code. In addition, dicts are now supported as a nested structure.\r\n\r\n## Changes to contrib APIs\r\n* Adds tf.contrib.nn.rank_sampled_softmax_loss, a sampled-softmax variant that can improve rank loss.\r\n* `tf.contrib.metrics`.{streaming_covariance,streaming_pearson_correlation} modified to return nan when they have seen less or equal to 1 unit of weight.\r\n* Adds time series models to contrib. See contrib/timeseries/README.md for details.\r\n* Adds FULLY_CONNECTED Op to tensorflow/contrib/lite/schema.fbs\r\n\r\n## Known Issues\r\n* Tensorflow_gpu compilation fails with Bazel 0.5.3.\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes `strides` and `begin` dtype mismatch when slicing using int64 Tensor index in python.\r\n* Improved convolution padding documentation.\r\n* Add a tag constant, gpu, to present graph with GPU support.\r\n* `saved_model.utils` now support SparseTensors transparently.\r\n* A more efficient implementation of non-max suppression.\r\n* Add support for the shrinkage-type L2 to FtrlOptimizer in addition to the online L2 it already supports.\r\n* Fix negative variance in moments calculation.\r\n* Expand UniqueOp Benchmark Tests to cover more collision cases.\r\n* Improves stability of GCS filesystem on Mac.\r\n* Add time estimation to HloCostAnalysis.\r\n* Fixed the bug in Estimator that params in constructor was not a deepcopy of the user provided one. This bugs inadvertently enabled user to mutate the params after the creation of Estimator, leading to potentially undefined behavior.\r\n* Added None check for save_path in `saver.restore`.\r\n* Register devices under their legacy names in device_mgr to ease the transition to clusterspec-propagated configurations.\r\n* VectorExponential added to distributions.\r\n* Add a bitwise module with bitwise_and, bitwise_or, bitwise_xor, and invert functions.\r\n* Add fixed-grid ODE integration routines.\r\n* Allow passing bounds to ScipyOptimizerInterface.\r\n* Correctness fixes for fft_length parameter to `tf.spectral.rfft` & `tf.spectral.irfft`.\r\n* Exported model signatures using the 'predict' method will no longer have their input and output keys silently ignored and rewritten to 'inputs' and 'outputs'. If a model was exported with different names before 1.2, and is now served with tensorflow/serving, it will accept requests using 'inputs' and 'outputs'. Starting at 1.2, such a model will accept the keys specified during export. Therefore, inference requests using 'inputs' and 'outputs' may start to fail. To fix this, either update any inference clients to send requests with the actual input and output keys used by the trainer code, or conversely, update the trainer code to name the input and output Tensors 'inputs' and 'outputs', respectively. Signatures using the 'classify' and 'regress' methods are not affected by this change; they will continue to standardize their input and output keys as before.\r\n* Add in-memory caching to the Dataset API.\r\n* Set default end_of_sequence variable in datasets iterators to false.\r\n* [Performance] Increase performance of `tf.layers.con2d` when setting use_bias=True by 2x by using nn.bias_add.\r\n* Update iOS examples to use CocoaPods, and moved to tensorflow/examples/ios.\r\n* Adds a family= attribute in `tf.summary` ops to allow controlling the tab name used in Tensorboard for organizing summaries.\r\n* When GPU is configured, do not require --config=cuda, instead, automatically build for GPU if this is requested in the configure script.\r\n* Fix incorrect sampling of small probabilities in CPU/GPU multinomial.\r\n* Add a list_devices() API on sessions to list devices within a cluster. Additionally, this change augment the ListDevices master API to support specifying a session.\r\n* Allow uses of over-parameterized separable convolution.\r\n* TensorForest multi-regression bug fix.\r\n* Framework now supports armv7, cocoapods.org now displays correct page.\r\n* Script to create iOS framework for CocoaPods.\r\n* Android releases of TensorFlow are now pushed to jcenter for easier integration into apps. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md for more details.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Fixed a bug that prevented tfdbg from functioning with multi-GPU setups.\r\n  * Fixed a bug that prevented tfdbg from working with `tf.Session.make_callable`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Adriano Carmezim, Adri\u00e0 Arrufat, Alan Yee, Alex Lattas, Alex Rothberg,\r\nAlexandr Baranezky, Ali Siddiqui, Andreas Solleder, Andrei Costinescu, Andrew Hundt,\r\nAndrobin, Andy Kernahan, Anish Shah, Anthony Platanios, Arvinds-Ds, b1rd, Baptiste\r\nArnaud, Ben Mabey, Benedikt Linse, Beomsu Kim, Bo Wang, Boyuan Deng, Brett Koonce,\r\nBruno Rosa, Carl Thom\u00e9, Changming Sun, Chase Roberts, Chirag Bhatia, Chris Antaki,\r\nChris Hoyean Song, Chris Tava, Christos Nikolaou, Croath Liu, cxx, Czxck001, Daniel\r\nYlitalo, Danny Goodman, Darren Garvey, David Brailovsky, David Norman, DavidNorman,\r\ndavidpham87, ddurham2, Dhruv, DimanNe, Drew Hintz, Dustin Tran, Earthson Lu, ethiraj,\r\nFabian Winnen, Fei Sun, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang, Gautam,\r\nGuenther Schmuelling, Gyu-Ho Lee, Hauke Brammer, horance, Humanity123, J Alammar,\r\nJayeol Chun, Jeroen B\u00e9Dorf, Jianfei Wang, jiefangxuanyan, Jing Jun Yin, Joan Puigcerver,\r\nJoel Hestness, Johannes Mayer, John Lawson, Johnson145, Jon Malmaud, Jonathan Alvarez-Gutierrez,\r\nJuang, Yi-Lin, Julian Viereck, Kaarthik Sivashanmugam, Karl Lessard, karl@kubx.ca, Kevin\r\nCarbone, Kevin Van Der Burgt, Kongsea, ksellesk, lanhin, Lef Ioannidis, Liangliang He,\r\nLouis Tiao, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, magixsno, Mahmoud Abuzaina, Marcel Hlopko, Mark\r\nNeumann, Maxwell Paul Brickner, mdfaijul, Micha\u00ebL Defferrard, Micha\u0142 Jastrz\u0119Bski, Michele\r\nColombo, Mike Brodie, Mosnoi Ion, mouradmourafiq, myPrecious, Nayana Thorat,\r\nNeeraj Kashyap, Nelson Liu, Niranjan Hasabnis, Olivier Moindrot, orome, Pankaj Gupta, Paul\r\nVan Eck, peeyush18, Peng Yu, Pierre, preciousdp11, qjivy, Raingo, raoqiyu, ribx, Richard S.\r\nImaoka, Rishabh Patel, Robert Walecki, Rockford Wei, Ryan Kung, Sahil Dua, Sandip Giri, Sayed\r\nHadi Hashemi, sgt101, Shitian Ni, Shuolongbj, Siim P\u00f5Der, Simon Perkins, sj6077, SOLARIS,\r\nSpotlight0xff, Steffen Eberbach, Stephen Fox, superryanguo, Sven Mayer, Tapan Prakash,\r\nTiago Morais Morgado, Till Hoffmann, Tj Rana, Vadim Markovtsev, vhasanov, Wei Wu,\r\nwindead, Yan (Asta) Li, Yan Chen, Yann Henon, Yi Wang, Yong Tang, yorkie, Yuan (Terry)\r\nTang, Yuxin Wu, zhengjiajin, zhongzyd, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7278894", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7278894/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/7278894/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.3.0-rc2", "id": 7278894, "node_id": "MDc6UmVsZWFzZTcyNzg4OTQ=", "tag_name": "v1.3.0-rc2", "target_commitish": "r1.3", "name": "TensorFlow 1.3.0-rc2", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-08-03T20:32:46Z", "published_at": "2017-08-04T17:21:58Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.3.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.3.0-rc2", "body": "# Release 1.3.0\r\n\r\n## Major Features and Improvements\r\n* Added canned estimators to Tensorflow library. List of added estimators:\r\n  * `DNNClassifier`\r\n  * `DNNRegressor`\r\n  * `LinearClassifier`\r\n  * `LinearRegressor`\r\n  * `DNNLinearCombinedClassifier`\r\n  * `DNNLinearCombinedRegressor`.\r\n* All our prebuilt binaries have been built with cuDNN 6.\r\n* `import tensorflow` now goes much faster.\r\n* Adds a file cache to the GCS filesystem with configurable max staleness for file contents. This permits caching of file contents across close/open boundaries.\r\n* Added an axis parameter to `tf.gather`.\r\n* Added a `constant_values` keyword argument to `tf.pad`.\r\n* Adds `Dataset.interleave` transformation.\r\n* Add `ConcatenateDataset` to concatenate two datasets.\r\n* Added Mobilenet support to TensorFlow for Poets training script.\r\n* Adds a block cache to the GCS filesystem with configurable block size and count.\r\n* SinhArcSinh bijector added.\r\n* Added `Dataset.list_files` API.\r\n* Introduces new operations and Python bindings for the Cloud TPU.\r\n* Adding TensorFlow-iOS CocoaPod for symmetry with tensorflow-android.\r\n* Introduces base implementations of ClusterResolvers.\r\n* Unify memory representations of TensorShape and PartialTensorShape. As a consequence, tensors now have a maximum of 254 dimensions, not 255.\r\n* Changed references to LIBXSMM to use version 1.8.1.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Display summaries of numeric tensor values with the `-s` flag to command `print_tensor` or `pt`.\r\n  * Display feed values with the `print_feed` or `pf` command and clickable links in the curses UI.\r\n  * Runtime profiler at the op level and the Python source line level with the `run -p` command.\r\n* Initial release of the statistical distribution library `tf.distributions`.\r\n* GPU kernels and speed improvements for for unary `tf.where` and `tf.nn.top_k`.\r\n* Monotonic Attention wrappers added to `tf.contrib.seq2seq`.\r\n* Added `tf.contrib.signal`, a library for signal processing primitives.\r\n* Added `tf.contrib.resampler`, containing CPU and GPU ops for differentiable resampling of images.\r\n\r\n## Breaking Changes to the API\r\n* `tf.RewriterConfig` was removed from the Python API after being available in 1.2 release candidates (it was never in an actual release). Graph rewriting is still available, just not as `tf.RewriterConfig`. Instead add an explicit import.\r\n* Breaking change to `tf.contrib.data.Dataset` APIs that expect a nested structure. Lists are now converted to `tf.Tensor` implicitly. You may need to change uses of lists to tuples in existing code. In addition, dicts are now supported as a nested structure.\r\n\r\n## Changes to contrib APIs\r\n* Adds tf.contrib.nn.rank_sampled_softmax_loss, a sampled-softmax variant that can improve rank loss.\r\n* `tf.contrib.metrics`.{streaming_covariance,streaming_pearson_correlation} modified to return nan when they have seen less or equal to 1 unit of weight.\r\n* Adds time series models to contrib. See contrib/timeseries/README.md for details.\r\n* Adds FULLY_CONNECTED Op to tensorflow/contrib/lite/schema.fbs\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes `strides` and `begin` dtype mismatch when slicing using int64 Tensor index in python.\r\n* Improved convolution padding documentation.\r\n* Add a tag constant, gpu, to present graph with GPU support.\r\n* `saved_model.utils` now support SparseTensors transparently.\r\n* A more efficient implementation of non-max suppression.\r\n* Add support for the shrinkage-type L2 to FtrlOptimizer in addition to the online L2 it already supports.\r\n* Fix negative variance in moments calculation.\r\n* Expand UniqueOp Benchmark Tests to cover more collision cases.\r\n* Improves stability of GCS filesystem on Mac.\r\n* Add time estimation to HloCostAnalysis.\r\n* Fixed the bug in Estimator that params in constructor was not a deepcopy of the user provided one. This bugs inadvertently enabled user to mutate the params after the creation of Estimator, leading to potentially undefined behavior.\r\n* Added None check for save_path in `saver.restore`.\r\n* Register devices under their legacy names in device_mgr to ease the transition to clusterspec-propagated configurations.\r\n* VectorExponential added to distributions.\r\n* Add a bitwise module with bitwise_and, bitwise_or, bitwise_xor, and invert functions.\r\n* Add fixed-grid ODE integration routines.\r\n* Allow passing bounds to ScipyOptimizerInterface.\r\n* Correctness fixes for fft_length parameter to `tf.spectral.rfft` & `tf.spectral.irfft`.\r\n* Exported model signatures using the 'predict' method will no longer have their input and output keys silently ignored and rewritten to 'inputs' and 'outputs'. If a model was exported with different names before 1.2, and is now served with tensorflow/serving, it will accept requests using 'inputs' and 'outputs'. Starting at 1.2, such a model will accept the keys specified during export. Therefore, inference requests using 'inputs' and 'outputs' may start to fail. To fix this, either update any inference clients to send requests with the actual input and output keys used by the trainer code, or conversely, update the trainer code to name the input and output Tensors 'inputs' and 'outputs', respectively. Signatures using the 'classify' and 'regress' methods are not affected by this change; they will continue to standardize their input and output keys as before.\r\n* Add in-memory caching to the Dataset API.\r\n* Set default end_of_sequence variable in datasets iterators to false.\r\n* [Performance] Increase performance of `tf.layers.con2d` when setting use_bias=True by 2x by using nn.bias_add.\r\n* Update iOS examples to use CocoaPods, and moved to tensorflow/examples/ios.\r\n* Adds a family= attribute in `tf.summary` ops to allow controlling the tab name used in Tensorboard for organizing summaries.\r\n* When GPU is configured, do not require --config=cuda, instead, automatically build for GPU if this is requested in the configure script.\r\n* Fix incorrect sampling of small probabilities in CPU/GPU multinomial.\r\n* Add a list_devices() API on sessions to list devices within a cluster. Additionally, this change augment the ListDevices master API to support specifying a session.\r\n* Allow uses of over-parameterized separable convolution.\r\n* TensorForest multi-regression bug fix.\r\n* Framework now supports armv7, cocoapods.org now displays correct page.\r\n* Script to create iOS framework for CocoaPods.\r\n* Android releases of TensorFlow are now pushed to jcenter for easier integration into apps. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md for more details.\r\n* TensorFlow Debugger (tfdbg):\r\n  * Fixed a bug that prevented tfdbg from functioning with multi-GPU setups.\r\n  * Fixed a bug that prevented tfdbg from working with `tf.Session.make_callable`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Adriano Carmezim, Adri\u00e0 Arrufat, Alan Yee, Alex Lattas, Alex Rothberg,\r\nAlexandr Baranezky, Ali Siddiqui, Andreas Solleder, Andrei Costinescu, Andrew Hundt,\r\nAndrobin, Andy Kernahan, Anish Shah, Anthony Platanios, Arvinds-Ds, b1rd, Baptiste\r\nArnaud, Ben Mabey, Benedikt Linse, Beomsu Kim, Bo Wang, Boyuan Deng, Brett Koonce,\r\nBruno Rosa, Carl Thom\u00e9, Changming Sun, Chase Roberts, Chirag Bhatia, Chris Antaki,\r\nChris Hoyean Song, Chris Tava, Christos Nikolaou, Croath Liu, cxx, Czxck001, Daniel\r\nYlitalo, Danny Goodman, Darren Garvey, David Brailovsky, David Norman, DavidNorman,\r\ndavidpham87, ddurham2, Dhruv, DimanNe, Drew Hintz, Dustin Tran, Earthson Lu, ethiraj,\r\nFabian Winnen, Fei Sun, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang, Gautam,\r\nGuenther Schmuelling, Gyu-Ho Lee, Hauke Brammer, horance, Humanity123, J Alammar,\r\nJayeol Chun, Jeroen B\u00e9Dorf, Jianfei Wang, jiefangxuanyan, Jing Jun Yin, Joan Puigcerver,\r\nJoel Hestness, Johannes Mayer, John Lawson, Johnson145, Jon Malmaud, Jonathan Alvarez-Gutierrez,\r\nJuang, Yi-Lin, Julian Viereck, Kaarthik Sivashanmugam, Karl Lessard, karl@kubx.ca, Kevin\r\nCarbone, Kevin Van Der Burgt, Kongsea, ksellesk, lanhin, Lef Ioannidis, Liangliang He,\r\nLouis Tiao, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, magixsno, Mahmoud Abuzaina, Marcel Hlopko, Mark\r\nNeumann, Maxwell Paul Brickner, mdfaijul, Micha\u00ebL Defferrard, Micha\u0142 Jastrz\u0119Bski, Michele\r\nColombo, Mike Brodie, Mosnoi Ion, mouradmourafiq, myPrecious, Nayana Thorat,\r\nNeeraj Kashyap, Nelson Liu, Niranjan Hasabnis, Olivier Moindrot, orome, Pankaj Gupta, Paul\r\nVan Eck, peeyush18, Peng Yu, Pierre, preciousdp11, qjivy, Raingo, raoqiyu, ribx, Richard S.\r\nImaoka, Rishabh Patel, Robert Walecki, Rockford Wei, Ryan Kung, Sahil Dua, Sandip Giri, Sayed\r\nHadi Hashemi, sgt101, Shitian Ni, Shuolongbj, Siim P\u00f5Der, Simon Perkins, sj6077, SOLARIS,\r\nSpotlight0xff, Steffen Eberbach, Stephen Fox, superryanguo, Sven Mayer, Tapan Prakash,\r\nTiago Morais Morgado, Till Hoffmann, Tj Rana, Vadim Markovtsev, vhasanov, Wei Wu,\r\nwindead, Yan (Asta) Li, Yan Chen, Yann Henon, Yi Wang, Yong Tang, yorkie, Yuan (Terry)\r\nTang, Yuxin Wu, zhengjiajin, zhongzyd, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7199062", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7199062/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/7199062/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.3.0-rc1", "id": 7199062, "node_id": "MDc6UmVsZWFzZTcxOTkwNjI=", "tag_name": "v1.3.0-rc1", "target_commitish": "r1.3", "name": "TensorFlow 1.3.0-rc1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-07-26T23:47:36Z", "published_at": "2017-07-27T22:03:23Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.3.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.3.0-rc1", "body": "# Release 1.3.0\r\n\r\n## Major Features and Improvements\r\n* Added canned estimators to Tensorflow library. List of added estimators: `DNNClassifier`, `DNNRegressor`, `LinearClassifer`, `LinearRegressor`, `DNNLinearCombinedClassifier`, `DNNLinearCombinedRegressor`.\r\n* All our prebuilt binaries have been built with cuDNN 6.\r\n* Adds a file cache to the GCS filesystem with configurable max staleness for file contents. This permits caching of file contents across close/open boundaries.\r\n* Added an axis parameter to `tf.gather`.\r\n* Added a `constant_values` keyword argument to `tf.pad`.\r\n* Adds `Dataset.interleave` transformation.\r\n* Add `ConcatenateDataset` to concatenate two datasets.\r\n* Added Mobilenet support to TensorFlow for Poets training script.\r\n* Adds a block cache to the GCS filesystem with configurable block size and count.\r\n* SinhArcSinh bijector added.\r\n* Added `Dataset.list_files` API.\r\n* Introduces new operations and Python bindings for the Cloud TPU.\r\n* Adding TensorFlow-iOS CocoaPod for symmetry with tensorflow-android.\r\n* Introduces base implementations of ClusterResolvers.\r\n* Unify memory representations of TensorShape and PartialTensorShape. As a consequence, tensors now have a maximum of 254 dimensions, not 255.\r\n* Changed references to LIBXSMM to use version 1.8.1.\r\n* TensorFlow Debugger (tfdbg): Display summaries of numeric tensor values with the `-s` flag to command `print_tensor` or `pt`.\r\n* Initial release of the statistical distribution library `tf.distributions`.\r\n* GPU kernels and speed improvements for for unary `tf.where` and `tf.nn.top_k`.\r\n* Monotonic Attention wrappers added to `tf.contrib.seq2seq`.\r\n\r\n## Breaking Changes to the API\r\n* `tf.RewriterConfig` was removed from the Python API after being available in 1.2 release candidates (it was never in an actual release). Graph rewriting is still available, just not as `tf.RewriterConfig`. Instead add an explicit import.\r\n* Breaking change to `tf.contrib.data.Dataset` APIs that expect a nested structure. Lists are now converted to `tf.Tensor` implicitly. You may need to change uses of lists to tuples in existing code. In addition, dicts are now supported as a nested structure.\r\n\r\n## Changes to contrib APIs\r\n* Adds tf.contrib.nn.rank_sampled_softmax_loss, a sampled-softmax variant that can improve rank loss.\r\n* `tf.contrib.metrics`.{streaming_covariance,streaming_pearson_correlation} modified to return nan when they have seen less or equal to 1 unit of weight.\r\n* Adds time series models to contrib. See contrib/timeseries/README.md for details.\r\n* Adds FULLY_CONNECTED Op to tensorflow/contrib/lite/schema.fbs\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes 'strides' and 'begin' dtype mismatch when slicing using int64 Tensor index in python.\r\n* Improved convolution padding documentation.\r\n* Add a tag constant, gpu, to present graph with GPU support.\r\n* `saved_model.utils` now support SparseTensors transparently.\r\n* A more efficient implementation of non-max suppression.\r\n* Add support for the shrinkage-type L2 to FtrlOptimizer in addition to the online L2 it already supports.\r\n* Fix negative variance in moments calculation.\r\n* Expand UniqueOp Benchmark Tests to cover more collision cases.\r\n* Improves stability of GCS filesystem on Mac.\r\n* Add time estimation to HloCostAnalysis.\r\n* Fixed the bug in Estimator that params in constructor was not a deepcopy of the user provided one. This bugs inadvertently enabled user to mutate the params after the creation of Estimator, leading to potentially undefined behavior.\r\n* Added None check for save_path in `saver.restore`.\r\n* Register devices under their legacy names in device_mgr to ease the transition to clusterspec-propagated configurations.\r\n* VectorExponential added to distributions.\r\n* Add a bitwise module with bitwise_and, bitwise_or, bitwise_xor, and invert functions.\r\n* Add fixed-grid ODE integration routines.\r\n* Allow passing bounds to ScipyOptimizerInterface.\r\n* Correctness fixes for fft_length parameter to `tf.spectral.rfft` & `tf.spectral.irfft`.\r\n* Exported model signatures using the 'predict' method will no longer have their input and output keys silently ignored and rewritten to 'inputs' and 'outputs'. If a model was exported with different names before 1.2, and is now served with tensorflow/serving, it will accept requests using 'inputs' and 'outputs'. Starting at 1.2, such a model will accept the keys specified during export. Therefore, inference requests using 'inputs' and 'outputs' may start to fail. To fix this, either update any inference clients to send requests with the actual input and output keys used by the trainer code, or conversely, update the trainer code to name the input and output Tensors 'inputs' and 'outputs', respectively. Signatures using the 'classify' and 'regress' methods are not affected by this change; they will continue to standardize their input and output keys as before.\r\n* Add in-memory caching to the Dataset API.\r\n* Set default end_of_sequence variable in datasets iterators to false.\r\n* [Performance] Increase performance of `tf.layers.con2d` when setting use_bias=True by 2x by using nn.bias_add.\r\n* Update iOS examples to use CocoaPods, and moved to tensorflow/examples/ios.\r\n* Adds a family= attribute in `tf.summary` ops to allow controlling the tab name used in Tensorboard for organizing summaries.\r\n* When GPU is configured, do not require --config=cuda, instead, automatically build for GPU if this is requested in the configure script.\r\n* Fix incorrect sampling of small probabilities in CPU/GPU multinomial.\r\n* Add a list_devices() API on sessions to list devices within a cluster. Additionally, this change augment the ListDevices master API to support specifying a session.\r\n* Allow uses of over-parameterized separable convolution.\r\n* TensorForest multi-regression bug fix.\r\n* Framework now supports armv7, cocoapods.org now displays correct page.\r\n* Script to create iOS framework for CocoaPods.\r\n* Android releases of TensorFlow are now pushed to jcenter for easier integration into apps. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md for more details.\r\n* Fixed a bug that prevented tfdbg from functioning with multi-GPU setups.\r\n* Fixed a bug that prevented tfdbg from working with `tf.Session.make_callable`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Adriano Carmezim, Adri\u00e0 Arrufat, Alan Yee, Alex Lattas, Alex Rothberg,\r\nAlexandr Baranezky, Ali Siddiqui, Andreas Solleder, Andrei Costinescu, Andrew Hundt,\r\nAndrobin, Andy Kernahan, Anish Shah, Anthony Platanios, Arvinds-Ds, b1rd, Baptiste\r\nArnaud, Ben Mabey, Benedikt Linse, Beomsu Kim, Bo Wang, Boyuan Deng, Brett Koonce,\r\nBruno Rosa, Carl Thom\u00e9, Changming Sun, Chase Roberts, Chirag Bhatia, Chris Antaki,\r\nChris Hoyean Song, Chris Tava, Christos Nikolaou, Croath Liu, cxx, Czxck001, Daniel\r\nYlitalo, Danny Goodman, Darren Garvey, David Brailovsky, David Norman, DavidNorman,\r\ndavidpham87, ddurham2, Dhruv, DimanNe, Drew Hintz, Dustin Tran, Earthson Lu, ethiraj,\r\nFabian Winnen, Fei Sun, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang, Gautam,\r\nGuenther Schmuelling, Gyu-Ho Lee, Hauke Brammer, horance, Humanity123, J Alammar,\r\nJayeol Chun, Jeroen B\u00e9Dorf, Jianfei Wang, jiefangxuanyan, Jing Jun Yin, Joan Puigcerver,\r\nJoel Hestness, Johannes Mayer, John Lawson, Johnson145, Jon Malmaud, Jonathan Alvarez-Gutierrez,\r\nJuang, Yi-Lin, Julian Viereck, Kaarthik Sivashanmugam, Karl Lessard, karl@kubx.ca, Kevin\r\nCarbone, Kevin Van Der Burgt, Kongsea, ksellesk, lanhin, Lef Ioannidis, Liangliang He,\r\nLouis Tiao, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, magixsno, Mahmoud Abuzaina, Marcel Hlopko, Mark\r\nNeumann, Maxwell Paul Brickner, mdfaijul, Micha\u00ebL Defferrard, Micha\u0142 Jastrz\u0119Bski, Michele\r\nColombo, Mike Brodie, Mosnoi Ion, mouradmourafiq, myPrecious, Nayana Thorat,\r\nNeeraj Kashyap, Nelson Liu, Niranjan Hasabnis, Olivier Moindrot, orome, Pankaj Gupta, Paul\r\nVan Eck, peeyush18, Peng Yu, Pierre, preciousdp11, qjivy, Raingo, raoqiyu, ribx, Richard S.\r\nImaoka, Rishabh Patel, Robert Walecki, Rockford Wei, Ryan Kung, Sahil Dua, Sandip Giri, Sayed\r\nHadi Hashemi, sgt101, Shitian Ni, Shuolongbj, Siim P\u00f5Der, Simon Perkins, sj6077, SOLARIS,\r\nSpotlight0xff, Steffen Eberbach, Stephen Fox, superryanguo, Sven Mayer, Tapan Prakash,\r\nTiago Morais Morgado, Till Hoffmann, Tj Rana, Vadim Markovtsev, vhasanov, Wei Wu,\r\nwindead, Yan (Asta) Li, Yan Chen, Yann Henon, Yi Wang, Yong Tang, yorkie, Yuan (Terry)\r\nTang, Yuxin Wu, zhengjiajin, zhongzyd, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7101473", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/7101473/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/7101473/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.3.0-rc0", "id": 7101473, "node_id": "MDc6UmVsZWFzZTcxMDE0NzM=", "tag_name": "v1.3.0-rc0", "target_commitish": "r1.3", "name": "TensorFlow 1.3.0-rc0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-07-19T20:17:35Z", "published_at": "2017-07-19T22:55:14Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.3.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.3.0-rc0", "body": "# Release 1.3.0\r\n\r\n## Major Features and Improvements\r\n* Added canned estimators to Tensorflow library. List of added estimators: `DNNClassifier`, `DNNRegressor`, `LinearClassifer`, `LinearRegressor`, `DNNLinearCombinedClassifier`, `DNNLinearCombinedRegressor`.\r\n* All our prebuilt binaries have been built with cuDNN 6.\r\n* Adds a file cache to the GCS filesystem with configurable max staleness for file contents. This permits caching of file contents across close/open boundaries.\r\n* Added an axis parameter to `tf.gather`.\r\n* Added a `constant_values` keyword argument to `tf.pad`.\r\n* Adds `Dataset.interleave` transformation.\r\n* Add `ConcatenateDataset` to concatenate two datasets.\r\n* Added Mobilenet support to TensorFlow for Poets training script.\r\n* Adds a block cache to the GCS filesystem with configurable block size and count.\r\n* SinhArcSinh bijector added.\r\n* Added `Dataset.list_files` API.\r\n* Introduces new operations and Python bindings for the Cloud TPU.\r\n* Adding TensorFlow-iOS CocoaPod for symmetry with tensorflow-android.\r\n* Introduces base implementations of ClusterResolvers.\r\n* Unify memory representations of TensorShape and PartialTensorShape. As a consequence, tensors now have a maximum of 254 dimensions, not 255.\r\n* Changed references to LIBXSMM to use version 1.8.1.\r\n* TensorFlow Debugger (tfdbg): Display summaries of numeric tensor values with the `-s` flag to command `print_tensor` or `pt`.\r\n* Initial release of the statistical distribution library `tf.distributions`.\r\n* GPU kernels and speed improvements for for unary `tf.where` and `tf.nn.top_k`.\r\n* Monotonic Attention wrappers added to `tf.contrib.seq2seq`.\r\n\r\n## Breaking Changes to the API\r\n* `tf.RewriterConfig` was removed from the Python API after being available in 1.2 release candidates (it was never in an actual release). Graph rewriting is still available, just not as `tf.RewriterConfig`. Instead add an explicit import.\r\n* Breaking change to `tf.contrib.data.Dataset` APIs that expect a nested structure. Lists are now converted to `tf.Tensor` implicitly. You may need to change uses of lists to tuples in existing code. In addition, dicts are now supported as a nested structure.\r\n\r\n## Changes to contrib APIs\r\n* Adds tf.contrib.nn.rank_sampled_softmax_loss, a sampled-softmax variant that can improve rank loss.\r\n* `tf.contrib.metrics`.{streaming_covariance,streaming_pearson_correlation} modified to return nan when they have seen less or equal to 1 unit of weight.\r\n* Adds time series models to contrib. See contrib/timeseries/README.md for details.\r\n* Adds FULLY_CONNECTED Op to tensorflow/contrib/lite/schema.fbs\r\n\r\n## Bug Fixes and Other Changes\r\n* Fixes 'strides' and 'begin' dtype mismatch when slicing using int64 Tensor index in python.\r\n* Improved convolution padding documentation.\r\n* Add a tag constant, gpu, to present graph with GPU support.\r\n* `saved_model.utils` now support SparseTensors transparently.\r\n* A more efficient implementation of non-max suppression.\r\n* Add support for the shrinkage-type L2 to FtrlOptimizer in addition to the online L2 it already supports.\r\n* Fix negative variance in moments calculation.\r\n* Expand UniqueOp Benchmark Tests to cover more collision cases.\r\n* Improves stability of GCS filesystem on Mac.\r\n* Add time estimation to HloCostAnalysis.\r\n* Fixed the bug in Estimator that params in constructor was not a deepcopy of the user provided one. This bugs inadvertently enabled user to mutate the params after the creation of Estimator, leading to potentially undefined behavior.\r\n* Added None check for save_path in `saver.restore`.\r\n* Register devices under their legacy names in device_mgr to ease the transition to clusterspec-propagated configurations.\r\n* VectorExponential added to distributions.\r\n* Add a bitwise module with bitwise_and, bitwise_or, bitwise_xor, and invert functions.\r\n* Add fixed-grid ODE integration routines.\r\n* Allow passing bounds to ScipyOptimizerInterface.\r\n* Correctness fixes for fft_length parameter to `tf.spectral.rfft` & `tf.spectral.irfft`.\r\n* Exported model signatures using the 'predict' method will no longer have their input and output keys silently ignored and rewritten to 'inputs' and 'outputs'. If a model was exported with different names before 1.2, and is now served with tensorflow/serving, it will accept requests using 'inputs' and 'outputs'. Starting at 1.2, such a model will accept the keys specified during export. Therefore, inference requests using 'inputs' and 'outputs' may start to fail. To fix this, either update any inference clients to send requests with the actual input and output keys used by the trainer code, or conversely, update the trainer code to name the input and output Tensors 'inputs' and 'outputs', respectively. Signatures using the 'classify' and 'regress' methods are not affected by this change; they will continue to standardize their input and output keys as before.\r\n* Add in-memory caching to the Dataset API.\r\n* Set default end_of_sequence variable in datasets iterators to false.\r\n* [Performance] Increase performance of `tf.layers.con2d` when setting use_bias=True by 2x by using nn.bias_add.\r\n* Update iOS examples to use CocoaPods, and moved to tensorflow/examples/ios.\r\n* Adds a family= attribute in `tf.summary` ops to allow controlling the tab name used in Tensorboard for organizing summaries.\r\n* When GPU is configured, do not require --config=cuda, instead, automatically build for GPU if this is requested in the configure script.\r\n* Fix incorrect sampling of small probabilities in CPU/GPU multinomial.\r\n* Add a list_devices() API on sessions to list devices within a cluster. Additionally, this change augment the ListDevices master API to support specifying a session.\r\n* Allow uses of over-parameterized separable convolution.\r\n* TensorForest multi-regression bug fix.\r\n* Framework now supports armv7, cocoapods.org now displays correct page.\r\n* Script to create iOS framework for CocoaPods.\r\n* Android releases of TensorFlow are now pushed to jcenter for easier integration into apps. See https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md for more details.\r\n* Fixed a bug that prevented tfdbg from functioning with multi-GPU setups.\r\n* Fixed a bug that prevented tfdbg from working with `tf.Session.make_callable`.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Adriano Carmezim, Adri\u00e0 Arrufat, Alan Yee, Alex Lattas, Alex Rothberg,\r\nAlexandr Baranezky, Ali Siddiqui, Andreas Solleder, Andrei Costinescu, Andrew Hundt,\r\nAndrobin, Andy Kernahan, Anish Shah, Anthony Platanios, Arvinds-Ds, b1rd, Baptiste\r\nArnaud, Ben Mabey, Benedikt Linse, Beomsu Kim, Bo Wang, Boyuan Deng, Brett Koonce,\r\nBruno Rosa, Carl Thom\u00e9, Changming Sun, Chase Roberts, Chirag Bhatia, Chris Antaki,\r\nChris Hoyean Song, Chris Tava, Christos Nikolaou, Croath Liu, cxx, Czxck001, Daniel\r\nYlitalo, Danny Goodman, Darren Garvey, David Brailovsky, David Norman, DavidNorman,\r\ndavidpham87, ddurham2, Dhruv, DimanNe, Drew Hintz, Dustin Tran, Earthson Lu, ethiraj,\r\nFabian Winnen, Fei Sun, Freedom\" Koan-Sin Tan, Fritz Obermeyer, Gao, Xiang, Gautam,\r\nGuenther Schmuelling, Gyu-Ho Lee, Hauke Brammer, horance, Humanity123, J Alammar,\r\nJayeol Chun, Jeroen B\u00e9Dorf, Jianfei Wang, jiefangxuanyan, Jing Jun Yin, Joan Puigcerver,\r\nJoel Hestness, Johannes Mayer, John Lawson, Johnson145, Jon Malmaud, Jonathan Alvarez-Gutierrez,\r\nJuang, Yi-Lin, Julian Viereck, Kaarthik Sivashanmugam, Karl Lessard, karl@kubx.ca, Kevin\r\nCarbone, Kevin Van Der Burgt, Kongsea, ksellesk, lanhin, Lef Ioannidis, Liangliang He,\r\nLouis Tiao, Luke Iwanski, L\u00e1Szl\u00f3 Csomor, magixsno, Mahmoud Abuzaina, Marcel Hlopko, Mark\r\nNeumann, Maxwell Paul Brickner, mdfaijul, Micha\u00ebL Defferrard, Micha\u0142 Jastrz\u0119Bski, Michele\r\nColombo, Mike Brodie, Mosnoi Ion, mouradmourafiq, myPrecious, Nayana Thorat,\r\nNeeraj Kashyap, Nelson Liu, Niranjan Hasabnis, Olivier Moindrot, orome, Pankaj Gupta, Paul\r\nVan Eck, peeyush18, Peng Yu, Pierre, preciousdp11, qjivy, Raingo, raoqiyu, ribx, Richard S.\r\nImaoka, Rishabh Patel, Robert Walecki, Rockford Wei, Ryan Kung, Sahil Dua, Sandip Giri, Sayed\r\nHadi Hashemi, sgt101, Shitian Ni, Shuolongbj, Siim P\u00f5Der, Simon Perkins, sj6077, SOLARIS,\r\nSpotlight0xff, Steffen Eberbach, Stephen Fox, superryanguo, Sven Mayer, Tapan Prakash,\r\nTiago Morais Morgado, Till Hoffmann, Tj Rana, Vadim Markovtsev, vhasanov, Wei Wu,\r\nwindead, Yan (Asta) Li, Yan Chen, Yann Henon, Yi Wang, Yong Tang, yorkie, Yuan (Terry)\r\nTang, Yuxin Wu, zhengjiajin, zhongzyd, \u9ec4\u749e\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6887226", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6887226/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6887226/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.2.1", "id": 6887226, "node_id": "MDc6UmVsZWFzZTY4ODcyMjY=", "tag_name": "v1.2.1", "target_commitish": "r1.2", "name": "TensorFlow 1.2.1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-06-30T01:34:24Z", "published_at": "2017-06-30T01:35:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.2.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.2.1", "body": "# Release 1.2.1\r\n\r\n## Bug Fixes and Other Changes\r\n* Updating markdown version required to >= 2.6.8.\r\n* Support tensors as dropout rates again, by removing the min(max(..))"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6727540", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6727540/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6727540/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.2.0", "id": 6727540, "node_id": "MDc6UmVsZWFzZTY3Mjc1NDA=", "tag_name": "v1.2.0", "target_commitish": "r1.2", "name": "TensorFlow 1.2.0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-06-14T19:02:07Z", "published_at": "2017-06-15T21:23:28Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.2.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.2.0", "body": "# Release 1.2.0\r\n\r\n## Major Features and Improvements\r\n* Python 3.6 support on Windows.\r\n* Added `tf.layers.conv3d_transpose` layer for spatio temporal deconvolution.\r\n* Added `tf.Session.make_callable()`, which provides a lower overhead means of running a similar step multiple times.\r\n* Added ibverbs-based RDMA support to contrib (courtesy @junshi15 from Yahoo).\r\n* `RNNCell` objects now subclass `tf.layers.Layer`.  The strictness described\r\n  in the TensorFlow 1.1 release is gone:  The first time an RNNCell is used,\r\n  it caches its scope.  All future uses of the RNNCell will reuse variables from\r\n  that same scope.  This is a breaking change from the behavior of RNNCells\r\n  in TensorFlow versions <= 1.0.1.  TensorFlow 1.1 had checks in place to\r\n  ensure old code works correctly with the new semantics; this version\r\n  allows more flexible uses of RNNCell but can lead to subtle errors if\r\n  using code meant for TensorFlow <= 1.0.1.  For example, writing:\r\n  `MultiRNNCell([lstm] * 5)` will now build a 5-layer LSTM stack where each\r\n  layer shares the **same** parameters.  To get 5 layers each with their own\r\n  parameters, write: `MultiRNNCell([LSTMCell(...) for _ in range(5)])`.\r\n  If at all unsure, first test your code with TF 1.1; ensure it raises no\r\n  errors, and then upgrade to TF 1.2.\r\n* TensorForest Estimator now supports SavedModel export for serving.\r\n* Support client-provided ClusterSpec's and propagate them to all workers to enable the creation of dynamic TensorFlow clusters.\r\n* TensorFlow C library now available for Windows.\r\n* We released a new open-source version of TensorBoard.\r\n* [`SavedModel CLI`](https://www.tensorflow.org/versions/master/programmers_guide/saved_model_cli) tool available to inspect and execute MetaGraph in SavedModel\r\n* Android releases of TensorFlow are now pushed to jcenter for easier\r\n  integration into apps. See\r\n  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md\r\n  for more details.\r\n* RNNCells' variable names have been renamed for consistency with Keras layers.\r\n  Specifically, the previous variable names \"weights\" and \"biases\" have\r\n  been changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the tool\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n* Many of the RNN functions and classes that were in the `tf.nn` namespace\r\n  before the 1.0 release and which were moved to `tf.contrib.rnn` have now\r\n  been moved back to the core namespace.  This includes\r\n  `RNNCell`, `LSTMCell`, `GRUCell`, and a number of other cells.  These\r\n  now reside in `tf.nn.rnn_cell` (with aliases in `tf.contrib.rnn` for backwards\r\n  compatibility).  The original `tf.nn.rnn` function is now `tf.nn.static_rnn`,\r\n  and the bidirectional static and state saving static rnn functions are also\r\n  now back in the `tf.nn` namespace.\r\n\r\n  Notable exceptions are the `EmbeddingWrapper`, `InputProjectionWrapper` and\r\n  `OutputProjectionWrapper`,  which will slowly be moved to deprecation\r\n  in `tf.contrib.rnn`.  These are inefficient wrappers that should often\r\n  be replaced by calling `embedding_lookup` or `layers.dense` as pre- or post-\r\n  processing of the rnn.  For RNN decoding, this functionality has been replaced\r\n  with an alternative API in `tf.contrib.seq2seq`.\r\n* Intel MKL Integration (https://software.intel.com/en-us/articles/tensorflow-optimizations-on-modern-intel-architecture). Intel developed a number of\r\n  optimized deep learning primitives: In addition to matrix multiplication and\r\n  convolution, these building blocks include:\r\n  Direct batched convolution\r\n  Pooling: maximum, minimum, average\r\n  Normalization: LRN, batch normalization\r\n  Activation: rectified linear unit (ReLU)\r\n  Data manipulation: multi-dimensional transposition (conversion), split,\r\n  concat, sum and scale.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.2 may be the last time we build with cuDNN 5.1. Starting with\r\n  TensorFlow 1.3, we will try to build all our prebuilt binaries with cuDNN 6.0.\r\n  While we will try to keep our source code compatible with cuDNN 5.1, it will\r\n  be best effort.\r\n\r\n## Breaking Changes to the API\r\n* `org.tensorflow.contrib.android.TensorFlowInferenceInterface` now throws exceptions where possible and has simplified method signatures.\r\n\r\n## Changes to contrib APIs\r\n* Added `tf.contrib.util.create_example`.\r\n* Added bilinear interpolation to `tf.contrib.image`.\r\n* Add `tf.contrib.stateless` for random ops with custom seed control.\r\n* MultivariateNormalFullCovariance added to contrib/distributions/\r\n* tensorflow/contrib/rnn undergoes RNN cell variable renaming for\r\n  consistency with Keras layers. Specifically, the previous variable names\r\n  \"weights\" and \"biases\" are changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n* Added `tf.contrib.kernel_methods` module with Ops and estimators for primal\r\n  (explicit) kernel methods in TensorFlow.\r\n\r\n## Bug Fixes and Other Changes\r\n* In python, `Operation.get_attr` on type attributes returns the Python DType\r\n  version of the type to match expected get_attr documentation rather than the\r\n  protobuf enum.\r\n* Changed MIN_SDK version to 8.0 when building iOS libraries.\r\n* Fixed LIBXSMM integration.\r\n* Make decode_jpeg/decode_png/decode_gif handle all formats, since users frequently try to decode an image as the wrong type.\r\n* Improve implicit broadcasting lowering.\r\n* Improving stability of GCS/Bigquery clients by a faster retrying of stale transmissions.\r\n* Remove OpKernelConstruction::op_def() as part of minimizing proto dependencies.\r\n* VectorLaplaceDiag distribution added.\r\n* Android demo no longer requires libtensorflow_demo.so to run (libtensorflow_inference.so still required)\r\n* Added `categorical_column_with_vocabulary_file`.\r\n* Introduce ops for batching/unbatching tensors across Session::Run() calls.\r\n* Add tf.log_sigmoid(x) = tf.log(tf.sigmoid(x)) = -tf.nn.softplus(-x).\r\n* Changed hooks lists to immutable tuples, and now allow any iterable for the associated arguments.\r\n* Introduce TFDecorator.\r\n* Added an Mfcc op for speech feature generation.\r\n* Improved DirectSession::Run() overhead and error checking. Feeding a value of the wrong type will now synchronously raise an INVALID_ARGUMENT error instead of asynchronously raising an INTERNAL error. Code that depends on the (undefined) behavior when feeding a tensor of the wrong type may need to be updated.\r\n* Added unreduced NONE, and reduced MEAN options for losses. Removed \"WEIGHTED_\" prefix from other Reduction constants.\r\n* assertAllClose now handles dicts.\r\n* Added Gmock matcher for HloInstructions.\r\n* Add var name to errors on variable restore.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* Added `reduction` arg to losses.\r\n* `tf.placeholder` can represent scalar shapes and partially known.\r\n* Remove estimator_spec(mode) argument.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* TensorBoard disables all runs by default if there are more than 40 runs.\r\n* Removed old doc generator code.\r\n* GCS file system integration now supports domain buckets, e.g gs://bucket.domain.com/path.\r\n* Add `tf.summary.text` for outputting text to TensorBoard.\r\n* The \"run\" command of tfdbg's command-line interface now supports filtering of tensors by node name, op type and tensor dtype.\r\n* `tf.string_to_number` now supports int64 and float64 outputs.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Aaron Schumacher, Abhi Agg, admcrae, Adriano Carmezim, Adri\u00e0 Arrufat,\r\nagramesh1, Akimitsu Seo, Alan Mosca, Alex Egg, Alex Rothberg, Alexander Heinecke,\r\nAlexander Matyasko, Alexandr Baranezky, Alexandre Caulier, Ali Siddiqui, Anand Venkat,\r\nAndrew Hundt, Androbin, Anmol Sharma, Arie, Arno Leist, Arron Cao, Aur\u00e9Lien Geron, Bairen Yi,\r\nBeomsu Kim, Carl Thom\u00e9, cfperez, Changming Sun, Corey Wharton, critiqjo, Dalei Li, Daniel\r\nRasmussen, Daniel Trebbien, Dar\u00edO Here\u00f1\u00fa, David Eng, David Norman, David Y. Zhang, Davy Song, ddurham2,\r\nDeepak Subburam, Dmytro Kyrychuk, Dominic Rossi, Dominik Schl\u00f6Sser, Dustin Tran,\r\nEduardo Pinho, Egil Martinsson, Elliot Saba, Eric Bigelow, Erik Smistad, Evan Klitzke,\r\nFabrizio Milo, Falcon Dai, Fei Gao, FloopCZ, Fung Lam, Gautam, GBLin5566, Greg Peatfield,\r\nGu Wang, Guenther Schmuelling, Hans Pabst, Harun Gunaydin, Huaizheng, Ido Shamay, Ikaro\r\nSilva, Ilya Edrenkin, Immexxx, James Mishra, Jamie Cooke, Jay Young, Jayaram Bobba,\r\nJianfei Wang, jinghua2, Joey Meyer, John Maidens, Jonghoon Jin, Julian Villella,\r\nJun Kim, Jun Shi, Junwei Pan, jyegerlehner, Karan Desai, Karel Van De Plassche,\r\nKb Sriram, KhabarlakKonstantin, Koan-Sin Tan, krivard, Kwotsin, Leandro Gracia Gil,\r\nLi Chen, Liangliang He, Louie Helm, lspvic, Luiz Henrique Soares, L\u00e1Szl\u00f3 Csomor,\r\nMark Wong, Mathew Wicks, Matthew Rahtz, Maxwell Paul Brickner, Michael Hofmann, Miguel\r\nFlores Ruiz De Eguino, MikeTam1021, Mortada Mehyar, Mycosynth, Namnamseo,\r\nNate Harada, Neven Miculinic, Nghia Tran, Nick Lyu, Niranjan Hasabnis, Nishidha, Oleksii\r\nKuchaiev, Oyesh Mann Singh, Panmari, Patrick, Paul Van Eck, Piyush Chaudhary, Quim Llimona,\r\nRaingo, Richard Davies, Ruben Vereecken, Sahit Chintalapudi, Sam Abrahams, Santiago Castro,\r\nScott Sievert, Sean O'Keefe, Sebastian Schlecht, Shane, Shubhankar Deshpande, Spencer Schaber,\r\nSunyeop Lee, t13m, td2014, Thomas H. P. Andersen, Toby Petty, Umang Mehta,\r\nVadim Markovtsev, Valentin Iovene, Vincent Zhao, Vit Stepanovs, Vivek Rane, Vu Pham, wannabesrevenge,\r\nweipingpku, wuhaixutab, wydwww, Xiang Gao, Xiaolin Lin, xiaoyaozhuzi, Yaroslav Bulatov, Yi Liu,\r\nYoshihiro Sugi, Yuan (Terry) Tang, Yuming Wang, Yuxin Wu, Zader Zheng, Zhaojun Zhang, zhengjiajin,\r\nZhipengShen, Ziming Dong, zjj2wry\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6624722", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6624722/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6624722/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.2.0-rc2", "id": 6624722, "node_id": "MDc6UmVsZWFzZTY2MjQ3MjI=", "tag_name": "v1.2.0-rc2", "target_commitish": "r1.2", "name": "TensorFlow 1.2.0-rc2", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-06-06T02:34:52Z", "published_at": "2017-06-06T22:56:43Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.2.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.2.0-rc2", "body": "# Release 1.2.0\r\n\r\n## Major Features and Improvements\r\n* Python 3.6 support on Windows.\r\n* Added `tf.layers.conv3d_transpose` layer for spatio temporal deconvolution.\r\n* Added `tf.Session.make_callable()`, which provides a lower overhead means of running a similar step multiple times.\r\n* Added ibverbs-based RDMA support to contrib (courtesy @junshi15 from Yahoo).\r\n* `RNNCell` objects now subclass `tf.layers.Layer`.  The strictness described\r\n  in the TensorFlow 1.1 release is gone:  The first time an RNNCell is used,\r\n  it caches its scope.  All future uses of the RNNCell will reuse variables from\r\n  that same scope.  This is a breaking change from the behavior of RNNCells\r\n  in TensorFlow versions <= 1.0.1.  TensorFlow 1.1 had checks in place to\r\n  ensure old code works correctly with the new semantics; this version\r\n  allows more flexible uses of RNNCell but can lead to subtle errors if\r\n  using code meant for TensorFlow <= 1.0.1.  For example, writing:\r\n  `MultiRNNCell([lstm] * 5)` will now build a 5-layer LSTM stack where each\r\n  layer shares the **same** parameters.  To get 5 layers each with their own\r\n  parameters, write: `MultiRNNCell([LSTMCell(...) for _ in range(5)])`.\r\n  If at all unsure, first test your code with TF 1.1; ensure it raises no\r\n  errors, and then upgrade to TF 1.2.\r\n* TensorForest Estimator now supports SavedModel export for serving.\r\n* Support client-provided ClusterSpec's and propagate them to all workers to enable the creation of dynamic TensorFlow clusters.\r\n* TensorFlow C library now available for Windows.\r\n* We released a new open-source version of TensorBoard.\r\n* [`SavedModel CLI`](https://www.tensorflow.org/versions/master/programmers_guide/saved_model_cli) tool available to inspect and execute MetaGraph in SavedModel\r\n* Android releases of TensorFlow are now pushed to jcenter for easier\r\n  integration into apps. See\r\n  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md\r\n  for more details.\r\n* RNNCells' variable names have been renamed for consistency with Keras layers.\r\n  Specifically, the previous variable names \"weights\" and \"biases\" have\r\n  been changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the tool\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n* Many of the RNN functions and classes that were in the `tf.nn` namespace\r\n  before the 1.0 release and which were moved to `tf.contrib.rnn` have now\r\n  been moved back to the core namespace.  This includes\r\n  `RNNCell`, `LSTMCell`, `GRUCell`, and a number of other cells.  These\r\n  now reside in `tf.nn.rnn_cell` (with aliases in `tf.contrib.rnn` for backwards\r\n  compatibility).  The original `tf.nn.rnn` function is now `tf.nn.static_rnn`,\r\n  and the bidirectional static and state saving static rnn functions are also\r\n  now back in the `tf.nn` namespace.\r\n\r\n  Notable exceptions are the `EmbeddingWrapper`, `InputProjectionWrapper` and\r\n  `OutputProjectionWrapper`,  which will slowly be moved to deprecation\r\n  in `tf.contrib.rnn`.  These are inefficient wrappers that should often\r\n  be replaced by calling `embedding_lookup` or `layers.dense` as pre- or post-\r\n  processing of the rnn.  For RNN decoding, this functionality has been replaced\r\n  with an alternative API in `tf.contrib.seq2seq`.\r\n* Intel MKL Integration (https://software.intel.com/en-us/articles/tensorflow-optimizations-on-modern-intel-architecture). Intel developed a number of\r\n  optimized deep learning primitives: In addition to matrix multiplication and\r\n  convolution, these building blocks include:\r\n  Direct batched convolution\r\n  Pooling: maximum, minimum, average\r\n  Normalization: LRN, batch normalization\r\n  Activation: rectified linear unit (ReLU)\r\n  Data manipulation: multi-dimensional transposition (conversion), split,\r\n  concat, sum and scale.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.2 may be the last time we build with cuDNN 5.1. Starting with\r\n  TensorFlow 1.3, we will try to build all our prebuilt binaries with cuDNN 6.0.\r\n  While we will try to keep our source code compatible with cuDNN 5.1, it will\r\n  be best effort.\r\n\r\n## Breaking Changes to the API\r\n* `org.tensorflow.contrib.android.TensorFlowInferenceInterface` now throws exceptions where possible and has simplified method signatures.\r\n\r\n## Changes to contrib APIs\r\n* Added `tf.contrib.util.create_example`.\r\n* Added bilinear interpolation to `tf.contrib.image`.\r\n* Add `tf.contrib.stateless` for random ops with custom seed control.\r\n* MultivariateNormalFullCovariance added to contrib/distributions/\r\n* tensorflow/contrib/rnn undergoes RNN cell variable renaming for\r\n  consistency with Keras layers. Specifically, the previous variable names\r\n  \"weights\" and \"biases\" are changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n\r\n## Bug Fixes and Other Changes\r\n* In python, `Operation.get_attr` on type attributes returns the Python DType\r\n  version of the type to match expected get_attr documentation rather than the\r\n  protobuf enum.\r\n* Changed MIN_SDK version to 8.0 when building iOS libraries.\r\n* Fixed LIBXSMM integration.\r\n* Make decode_jpeg/decode_png/decode_gif handle all formats, since users frequently try to decode an image as the wrong type.\r\n* Improve implicit broadcasting lowering.\r\n* Improving stability of GCS/Bigquery clients by a faster retrying of stale transmissions.\r\n* Remove OpKernelConstruction::op_def() as part of minimizing proto dependencies.\r\n* VectorLaplaceDiag distribution added.\r\n* Android demo no longer requires libtensorflow_demo.so to run (libtensorflow_inference.so still required)\r\n* Added `categorical_column_with_vocabulary_file`.\r\n* Introduce ops for batching/unbatching tensors across Session::Run() calls.\r\n* Add tf.log_sigmoid(x) = tf.log(tf.sigmoid(x)) = -tf.nn.softplus(-x).\r\n* Changed hooks lists to immutable tuples, and now allow any iterable for the associated arguments.\r\n* Introduce TFDecorator.\r\n* Added an Mfcc op for speech feature generation.\r\n* Improved DirectSession::Run() overhead and error checking. Feeding a value of the wrong type will now synchronously raise an INVALID_ARGUMENT error instead of asynchronously raising an INTERNAL error. Code that depends on the (undefined) behavior when feeding a tensor of the wrong type may need to be updated.\r\n* Added unreduced NONE, and reduced MEAN options for losses. Removed \"WEIGHTED_\" prefix from other Reduction constants.\r\n* assertAllClose now handles dicts.\r\n* Added Gmock matcher for HloInstructions.\r\n* Add var name to errors on variable restore.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* Added `reduction` arg to losses.\r\n* `tf.placeholder` can represent scalar shapes and partially known.\r\n* Remove estimator_spec(mode) argument.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* TensorBoard disables all runs by default if there are more than 40 runs.\r\n* Removed old doc generator code.\r\n* GCS file system integration now supports domain buckets, e.g gs://bucket.domain.com/path.\r\n* Add `tf.summary.text` for outputting text to TensorBoard.\r\n* The \"run\" command of tfdbg's command-line interface now supports filtering of tensors by node name, op type and tensor dtype.\r\n* `tf.string_to_number` now supports int64 and float64 outputs.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Aaron Schumacher, Abhi Agg, admcrae, Adriano Carmezim, Adri\u00e0 Arrufat,\r\nagramesh1, Akimitsu Seo, Alan Mosca, Alex Egg, Alex Rothberg, Alexander Heinecke,\r\nAlexander Matyasko, Alexandr Baranezky, Alexandre Caulier, Ali Siddiqui, Anand Venkat,\r\nAndrew Hundt, Androbin, Anmol Sharma, Arie, Arno Leist, Arron Cao, Aur\u00e9Lien Geron, Bairen Yi,\r\nBeomsu Kim, Carl Thom\u00e9, cfperez, Changming Sun, Corey Wharton, critiqjo, Dalei Li, Daniel\r\nRasmussen, Daniel Trebbien, Dar\u00edO Here\u00f1\u00fa, David Eng, David Norman, David Y. Zhang, Davy Song, ddurham2,\r\nDeepak Subburam, Dmytro Kyrychuk, Dominic Rossi, Dominik Schl\u00f6Sser, Dustin Tran,\r\nEduardo Pinho, Egil Martinsson, Elliot Saba, Eric Bigelow, Erik Smistad, Evan Klitzke,\r\nFabrizio Milo, Falcon Dai, Fei Gao, FloopCZ, Fung Lam, Gautam, GBLin5566, Greg Peatfield,\r\nGu Wang, Guenther Schmuelling, Hans Pabst, Harun Gunaydin, Huaizheng, Ido Shamay, Ikaro\r\nSilva, Ilya Edrenkin, Immexxx, James Mishra, Jamie Cooke, Jay Young, Jayaram Bobba,\r\nJianfei Wang, jinghua2, Joey Meyer, John Maidens, Jonghoon Jin, Julian Villella,\r\nJun Kim, Jun Shi, Junwei Pan, jyegerlehner, Karan Desai, Karel Van De Plassche,\r\nKb Sriram, KhabarlakKonstantin, Koan-Sin Tan, krivard, Kwotsin, Leandro Gracia Gil,\r\nLi Chen, Liangliang He, Louie Helm, lspvic, Luiz Henrique Soares, L\u00e1Szl\u00f3 Csomor,\r\nMark Wong, Mathew Wicks, Matthew Rahtz, Maxwell Paul Brickner, Michael Hofmann, Miguel\r\nFlores Ruiz De Eguino, MikeTam1021, Mortada Mehyar, Mycosynth, Namnamseo,\r\nNate Harada, Neven Miculinic, Nghia Tran, Nick Lyu, Niranjan Hasabnis, Nishidha, Oleksii\r\nKuchaiev, Oyesh Mann Singh, Panmari, Patrick, Paul Van Eck, Piyush Chaudhary, Quim Llimona,\r\nRaingo, Richard Davies, Ruben Vereecken, Sahit Chintalapudi, Sam Abrahams, Santiago Castro,\r\nScott Sievert, Sean O'Keefe, Sebastian Schlecht, Shane, Shubhankar Deshpande, Spencer Schaber,\r\nSunyeop Lee, t13m, td2014, Thomas H. P. Andersen, Toby Petty, Umang Mehta,\r\nVadim Markovtsev, Valentin Iovene, Vincent Zhao, Vit Stepanovs, Vivek Rane, Vu Pham, wannabesrevenge,\r\nweipingpku, wuhaixutab, wydwww, Xiang Gao, Xiaolin Lin, xiaoyaozhuzi, Yaroslav Bulatov, Yi Liu,\r\nYoshihiro Sugi, Yuan (Terry) Tang, Yuming Wang, Yuxin Wu, Zader Zheng, Zhaojun Zhang, zhengjiajin,\r\nZhipengShen, Ziming Dong, zjj2wry\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6520396", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6520396/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6520396/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.2.0-rc1", "id": 6520396, "node_id": "MDc6UmVsZWFzZTY1MjAzOTY=", "tag_name": "v1.2.0-rc1", "target_commitish": "r1.2", "name": "TensorFlow 1.2.0-rc1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-05-26T18:29:48Z", "published_at": "2017-05-27T00:49:14Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.2.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.2.0-rc1", "body": "# Release 1.2.0\r\n\r\n## Major Features and Improvements\r\n* Added `tf.layers.conv3d_transpose` layer for spatio temporal deconvolution.\r\n* Added `tf.Session.make_callable()`, which provides a lower overhead means of running a similar step multiple times.\r\n* Added ibverbs-based RDMA support to contrib (courtesy @junshi15 from Yahoo).\r\n* `RNNCell` objects now subclass `tf.layers.Layer`.  The strictness described\r\n  in the TensorFlow 1.1 release is gone:  The first time an RNNCell is used,\r\n  it caches its scope.  All future uses of the RNNCell will reuse variables from\r\n  that same scope.  This is a breaking change from the behavior of RNNCells\r\n  in TensorFlow versions <= 1.0.1.  TensorFlow 1.1 had checks in place to\r\n  ensure old code works correctly with the new semantics; this version\r\n  allows more flexible uses of RNNCell but can lead to subtle errors if\r\n  using code meant for TensorFlow <= 1.0.1.  For example, writing:\r\n  `MultiRNNCell([lstm] * 5)` will now build a 5-layer LSTM stack where each\r\n  layer shares the **same** parameters.  To get 5 layers each with their own\r\n  parameters, write: `MultiRNNCell([LSTMCell(...) for _ in range(5)])`.\r\n  If at all unsure, first test your code with TF 1.1; ensure it raises no\r\n  errors, and then upgrade to TF 1.2.\r\n* TensorForest Estimator now supports SavedModel export for serving.\r\n* Support client-provided ClusterSpec's and propagate them to all workers to enable the creation of dynamic TensorFlow clusters.\r\n* TensorFlow C library now available for Windows.\r\n* We released a new open-source version of TensorBoard.\r\n* [`SavedModel CLI`](https://www.tensorflow.org/versions/master/programmers_guide/saved_model_cli) tool available to inspect and execute MetaGraph in SavedModel\r\n* Android releases of TensorFlow are now pushed to jcenter for easier\r\n  integration into apps. See\r\n  https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/android/README.md\r\n  for more details.\r\n* RNNCells' variable names have been renamed for consistency with Keras layers.\r\n  Specifically, the previous variable names \"weights\" and \"biases\" have\r\n  been changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the tool\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n* Many of the RNN functions and classes that were in the `tf.nn` namespace\r\n  before the 1.0 release and which were moved to `tf.contrib.rnn` have now\r\n  been moved back to the core namespace.  This includes\r\n  `RNNCell`, `LSTMCell`, `GRUCell`, and a number of other cells.  These\r\n  now reside in `tf.nn.rnn_cell` (with aliases in `tf.contrib.rnn` for backwards\r\n  compatibility).  The original `tf.nn.rnn` function is now `tf.nn.static_rnn`,\r\n  and the bidirectional static and state saving static rnn functions are also\r\n  now back in the `tf.nn` namespace.\r\n\r\n  Notable exceptions are the `EmbeddingWrapper`, `InputProjectionWrapper` and\r\n  `OutputProjectionWrapper`,  which will slowly be moved to deprecation\r\n  in `tf.contrib.rnn`.  These are inefficient wrappers that should often\r\n  be replaced by calling `embedding_lookup` or `layers.dense` as pre- or post-\r\n  processing of the rnn.  For RNN decoding, this functionality has been replaced\r\n  with an alternative API in `tf.contrib.seq2seq`.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.2 may be the last time we build with cuDNN 5.1. Starting with\r\n  TensorFlow 1.3, we will try to build all our prebuilt binaries with cuDNN 6.0.\r\n  While we will try to keep our source code compatible with cuDNN 5.1, it will\r\n  be best effort.\r\n\r\n## Breaking Changes to the API\r\n* `org.tensorflow.contrib.android.TensorFlowInferenceInterface` now throws exceptions where possible and has simplified method signatures.\r\n\r\n## Changes to contrib APIs\r\n* Added `tf.contrib.util.create_example`.\r\n* Added bilinear interpolation to `tf.contrib.image`.\r\n* Add `tf.contrib.stateless` for random ops with custom seed control.\r\n* MultivariateNormalFullCovariance added to contrib/distributions/\r\n* tensorflow/contrib/rnn undergoes RNN cell variable renaming for\r\n  consistency with Keras layers. Specifically, the previous variable names\r\n  \"weights\" and \"biases\" are changed to \"kernel\" and \"bias\", respectively.\r\n  This may cause backward incompatibility with regard to your old\r\n  checkpoints containing such RNN cells, in which case you can use the\r\n  [checkpoint_convert script](https://github.com/tensorflow/tensorflow/blob/master/tensorflow/contrib/rnn/python/tools/checkpoint_convert.py)\r\n  to convert the variable names in your old checkpoints.\r\n\r\n## Bug Fixes and Other Changes\r\n* In python, `Operation.get_attr` on type attributes returns the Python DType\r\n  version of the type to match expected get_attr documentation rather than the\r\n  protobuf enum.\r\n* Changed MIN_SDK version to 8.0 when building iOS libraries.\r\n* Fixed LIBXSMM integration.\r\n* Make decode_jpeg/decode_png/decode_gif handle all formats, since users frequently try to decode an image as the wrong type.\r\n* Improve implicit broadcasting lowering.\r\n* Improving stability of GCS/Bigquery clients by a faster retrying of stale transmissions.\r\n* Remove OpKernelConstruction::op_def() as part of minimizing proto dependencies.\r\n* VectorLaplaceDiag distribution added.\r\n* Android demo no longer requires libtensorflow_demo.so to run (libtensorflow_inference.so still required)\r\n* Added `categorical_column_with_vocabulary_file`.\r\n* Introduce ops for batching/unbatching tensors across Session::Run() calls.\r\n* Add tf.log_sigmoid(x) = tf.log(tf.sigmoid(x)) = -tf.nn.softplus(-x).\r\n* Changed hooks lists to immutable tuples, and now allow any iterable for the associated arguments.\r\n* Introduce TFDecorator.\r\n* Added an Mfcc op for speech feature generation.\r\n* Improved DirectSession::Run() overhead and error checking. Feeding a value of the wrong type will now synchronously raise an INVALID_ARGUMENT error instead of asynchronously raising an INTERNAL error. Code that depends on the (undefined) behavior when feeding a tensor of the wrong type may need to be updated.\r\n* Added unreduced NONE, and reduced MEAN options for losses. Removed \"WEIGHTED_\" prefix from other Reduction constants.\r\n* assertAllClose now handles dicts.\r\n* Added Gmock matcher for HloInstructions.\r\n* Add var name to errors on variable restore.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* Added `reduction` arg to losses.\r\n* `tf.placeholder` can represent scalar shapes and partially known.\r\n* Remove estimator_spec(mode) argument.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* TensorBoard disables all runs by default if there are more than 40 runs.\r\n* Removed old doc generator code.\r\n* GCS file system integration now supports domain buckets, e.g gs://bucket.domain.com/path.\r\n* Add `tf.summary.text` for outputting text to TensorBoard.\r\n* The \"run\" command of tfdbg's command-line interface now supports filtering of tensors by node name, op type and tensor dtype.\r\n* `tf.string_to_number` now supports int64 and float64 outputs.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Aaron Schumacher, Abhi Agg, admcrae, Adriano Carmezim, Adri\u00e0 Arrufat,\r\nagramesh1, Akimitsu Seo, Alan Mosca, Alex Egg, Alex Rothberg, Alexander Heinecke,\r\nAlexander Matyasko, Alexandr Baranezky, Alexandre Caulier, Ali Siddiqui, Anand Venkat,\r\nAndrew Hundt, Androbin, Anmol Sharma, Arie, Arno Leist, Arron Cao, Aur\u00e9Lien Geron, Bairen Yi,\r\nBeomsu Kim, Carl Thom\u00e9, cfperez, Changming Sun, Corey Wharton, critiqjo, Dalei Li, Daniel\r\nRasmussen, Daniel Trebbien, Dar\u00edO Here\u00f1\u00fa, David Eng, David Norman, David Y. Zhang, Davy Song, ddurham2,\r\nDeepak Subburam, Dmytro Kyrychuk, Dominic Rossi, Dominik Schl\u00f6Sser, Dustin Tran,\r\nEduardo Pinho, Egil Martinsson, Elliot Saba, Eric Bigelow, Erik Smistad, Evan Klitzke,\r\nFabrizio Milo, Falcon Dai, Fei Gao, FloopCZ, Fung Lam, Gautam, GBLin5566, Greg Peatfield,\r\nGu Wang, Guenther Schmuelling, Hans Pabst, Harun Gunaydin, Huaizheng, Ido Shamay, Ikaro\r\nSilva, Ilya Edrenkin, Immexxx, James Mishra, Jamie Cooke, Jay Young, Jayaram Bobba,\r\nJianfei Wang, jinghua2, Joey Meyer, John Maidens, Jonghoon Jin, Julian Villella,\r\nJun Kim, Jun Shi, Junwei Pan, jyegerlehner, Karan Desai, Karel Van De Plassche,\r\nKb Sriram, KhabarlakKonstantin, Koan-Sin Tan, krivard, Kwotsin, Leandro Gracia Gil,\r\nLi Chen, Liangliang He, Louie Helm, lspvic, Luiz Henrique Soares, L\u00e1Szl\u00f3 Csomor,\r\nMark Wong, Mathew Wicks, Matthew Rahtz, Maxwell Paul Brickner, Michael Hofmann, Miguel\r\nFlores Ruiz De Eguino, MikeTam1021, Mortada Mehyar, Mycosynth, Namnamseo,\r\nNate Harada, Neven Miculinic, Nghia Tran, Nick Lyu, Niranjan Hasabnis, Nishidha, Oleksii\r\nKuchaiev, Oyesh Mann Singh, Panmari, Patrick, Paul Van Eck, Piyush Chaudhary, Quim Llimona,\r\nRaingo, Richard Davies, Ruben Vereecken, Sahit Chintalapudi, Sam Abrahams, Santiago Castro,\r\nScott Sievert, Sean O'Keefe, Sebastian Schlecht, Shane, Shubhankar Deshpande, Spencer Schaber,\r\nSunyeop Lee, t13m, td2014, Thomas H. P. Andersen, Toby Petty, Umang Mehta,\r\nVadim Markovtsev, Valentin Iovene, Vincent Zhao, Vit Stepanovs, Vivek Rane, Vu Pham, wannabesrevenge,\r\nweipingpku, wuhaixutab, wydwww, Xiang Gao, Xiaolin Lin, xiaoyaozhuzi, Yaroslav Bulatov, Yi Liu,\r\nYoshihiro Sugi, Yuan (Terry) Tang, Yuming Wang, Yuxin Wu, Zader Zheng, Zhaojun Zhang, zhengjiajin,\r\nZhipengShen, Ziming Dong, zjj2wry\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6433182", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6433182/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6433182/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.2.0-rc0", "id": 6433182, "node_id": "MDc6UmVsZWFzZTY0MzMxODI=", "tag_name": "v1.2.0-rc0", "target_commitish": "r1.2", "name": "TensorFlow 1.2.0-rc0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-05-19T21:49:40Z", "published_at": "2017-05-20T18:17:01Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.2.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.2.0-rc0", "body": "# Release 1.2.0\r\n\r\n## Major Features and Improvements\r\n* Added `tf.layers.conv3d_transpose` layer for spatio temporal deconvolution.\r\n* Added `tf.Session.make_callable()`, which provides a lower overhead means of running a similar step multiple times.\r\n* Added ibverbs-based RDMA support to contrib (courtesy @junshi15 from Yahoo).\r\n* `RNNCell` objects now subclass `tf.layers._Layer`.  The strictness described\r\n  in the TensorFlow 1.1 release is gone:  The first time an RNNCell is used,\r\n  it caches its scope.  All future uses of the RNNCell will reuse variables from\r\n  that same scope.  This is a breaking change from the behavior of RNNCells\r\n  in TensorFlow versions <= 1.0.1.  TensorFlow 1.1 had checks in place to\r\n  ensure old code works correctly with the new semantics; this version\r\n  allows more flexible uses of RNNCell but can lead to subtle errors if\r\n  using code meant for TensorFlow <= 1.0.1.  For example, writing:\r\n  `MultiRNNCell([lstm] * 5)` will now build a 5-layer LSTM stack where each\r\n  layer shares the **same** parameters.  To get 5 layers each with their own\r\n  parameters, write: `MultiRNNCell([LSTMCell(...) for _ in range(5)])`.\r\n  If at all unsure, first test your code with TF 1.1; ensure it raises no\r\n  errors, and then upgrade to TF 1.2.\r\n* TensorForest Estimator now supports SavedModel export for serving.\r\n* Support client-provided ClusterSpec's and propagate them to all workers to enable the creation of dynamic TensorFlow clusters.\r\n* TensorFlow C library now available for Windows.\r\n* We released a new open-source version of TensorBoard.\r\n\r\n## Breaking Changes to the API\r\n* org.tensorflow.contrib.android.TensorFlowInferenceInterface now throws exceptions where possible and has simplified method signatures.\r\n\r\n## Changes to contrib APIs\r\n* Added `tf.contrib.util.create_example`.\r\n* Added bilinear interpolation to tf.contrib.image.\r\n* Add `tf.contrib.stateless` for random ops with custom seed control.\r\n* MultivariateNormalFullCovariance added to contrib/distributions/\r\n\r\n## Bug Fixes and Other Changes\r\n* In python, `Operation.get_attr` on type attributes returns the Python DType\r\n  version of the type to match expected get_attr documentation rather than the\r\n  protobuf enum.\r\n* Changed MIN_SDK version to 8.0 when building iOS libraries.\r\n* Fixed LIBXSMM integration.\r\n* Make decode_jpeg/decode_png/decode_gif handle all formats, since users frequently try to decode an image as the wrong type.\r\n* Improve implicit broadcasting lowering.\r\n* Improving stability of GCS/Bigquery clients by a faster retrying of stale transmissions.\r\n* Remove OpKernelConstruction::op_def() as part of minimizing proto dependencies.\r\n* VectorLaplaceDiag distribution added.\r\n* Android demo no longer requires libtensorflow_demo.so to run (libtensorflow_inference.so still required)\r\n* Added `categorical_column_with_vocabulary_file`.\r\n* Introduce ops for batching/unbatching tensors across Session::Run() calls.\r\n* Add tf.log_sigmoid(x) = tf.log(tf.sigmoid(x)) = -tf.nn.softplus(-x).\r\n* Changed hooks lists to immutable tuples, and now allow any iterable for the associated arguments.\r\n* Introduce TFDecorator.\r\n* Added an Mfcc op for speech feature generation.\r\n* Improved DirectSession::Run() overhead and error checking. Feeding a value of the wrong type will now synchronously raise an INVALID_ARGUMENT error instead of asynchronously raising an INTERNAL error. Code that depends on the (undefined) behavior when feeding a tensor of the wrong type may need to be updated.\r\n* Added unreduced NONE, and reduced MEAN options for losses. Removed \"WEIGHTED_\" prefix from other Reduction constants.\r\n* assertAllClose now handles dicts.\r\n* Added Gmock matcher for HloInstructions.\r\n* Add var name to errors on variable restore.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* Added `reduction` arg to losses.\r\n* `tf.placeholder` can represent scalar shapes and partially known.\r\n* Remove estimator_spec(mode) argument.\r\n* Added an AudioSpectrogram op for audio feature generation.\r\n* TensorBoard disables all runs by default if there are more than 40 runs.\r\n* Removed old doc generator code.\r\n* GCS file system integration now supports domain buckets, e.g gs://bucket.domain.com/path.\r\n* Add `tf.summary.text` for outputting text to TensorBoard.\r\n* The \"run\" command of tfdbg's command-line interface now supports filtering of tensors by node name, op type and tensor dtype.\r\n* `tf.string_to_number` now supports int64 and float64 outputs.\r\n* `SavedModel CLI` tool available to inspect and execute MetaGraph in SavedModel\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\n4F2E4A2E, Aaron Schumacher, Abhi Agg, admcrae, Adriano Carmezim, Adri\u00e0 Arrufat,\r\nagramesh1, Akimitsu Seo, Alan Mosca, Alex Egg, Alex Rothberg, Alexander Heinecke,\r\nAlexander Matyasko, Alexandr Baranezky, Alexandre Caulier, Ali Siddiqui, Anand Venkat,\r\nAndrew Hundt, Androbin, Anmol Sharma, Arie, Arno Leist, Arron Cao, Aur\u00e9Lien Geron, Bairen Yi,\r\nBeomsu Kim, Carl Thom\u00e9, cfperez, Changming Sun, Corey Wharton, critiqjo, Dalei Li, Daniel\r\nRasmussen, Daniel Trebbien, Dar\u00edO Here\u00f1\u00fa, David Eng, David Norman, David Y. Zhang, Davy Song, ddurham2, Deepak Subburam, Dmytro Kyrychuk, Dominic Rossi, Dominik Schl\u00f6Sser, Dustin Tran,\r\nEduardo Pinho, Egil Martinsson, Elliot Saba, Eric Bigelow, Erik Smistad, Evan Klitzke,\r\nFabrizio Milo, Falcon Dai, Fei Gao, FloopCZ, Fung Lam, Gautam, GBLin5566, Greg Peatfield,\r\nGu Wang, Guenther Schmuelling, Hans Pabst, Harun Gunaydin, Huaizheng, Ido Shamay, Ikaro\r\nSilva, Ilya Edrenkin, Immexxx, James Mishra, Jamie Cooke, Jay Young, Jayaram Bobba,\r\nJianfei Wang, jinghua2, Joey Meyer, John Maidens, Jonghoon Jin, Julian Villella,\r\nJun Kim, Jun Shi, Junwei Pan, jyegerlehner, Karan Desai, Karel Van De Plassche,\r\nKb Sriram, KhabarlakKonstantin, Koan-Sin Tan, krivard, Kwotsin, Leandro Gracia Gil,\r\nLi Chen, Liangliang He, Louie Helm, lspvic, Luiz Henrique Soares, L\u00e1Szl\u00f3 Csomor,\r\nMark Wong, Mathew Wicks, Matthew Rahtz, Maxwell Paul Brickner, Michael Hofmann, Miguel\r\nFlores Ruiz De Eguino, MikeTam1021, Mortada Mehyar, Mycosynth, Namnamseo,\r\nNate Harada, Neven Miculinic, Nghia Tran, Nick Lyu, Niranjan Hasabnis, Nishidha, Oleksii\r\nKuchaiev, Oyesh Mann Singh, Panmari, Patrick, Paul Van Eck, Piyush Chaudhary, Quim Llimona,\r\nRaingo, Richard Davies, Ruben Vereecken, Sahit Chintalapudi, Sam Abrahams, Santiago Castro,\r\nScott Sievert, Sean O'Keefe, Sebastian Schlecht, Shane, Shubhankar Deshpande, Spencer Schaber,\r\nSunyeop Lee, t13m, td2014, Thomas H. P. Andersen, Toby Petty, Umang Mehta, Vadim Markovtsev, Valentin Iovene, Vincent Zhao, Vit Stepanovs, Vivek Rane, Vu Pham, wannabesrevenge, weipingpku, wuhaixutab, wydwww, Xiang Gao, Xiaolin Lin, xiaoyaozhuzi, Yaroslav Bulatov, Yi Liu, Yoshihiro Sugi, Yuan (Terry) Tang, Yuming Wang, Yuxin Wu, Zader Zheng, Zhaojun Zhang, zhengjiajin, ZhipengShen, Ziming Dong, zjj2wry\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6151149", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6151149/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6151149/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.1.0", "id": 6151149, "node_id": "MDc6UmVsZWFzZTYxNTExNDk=", "tag_name": "v1.1.0", "target_commitish": "r1.1", "name": "TensorFlow 1.1.0", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-04-21T01:01:36Z", "published_at": "2017-04-26T22:25:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.1.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.1.0", "body": "# Release 1.1.0\r\n\r\n## Major Features and Improvements\r\n* Added Java API support for Windows.\r\n* Added `tf.spectral` module. Moved existing FFT ops to `tf.spectral` while\r\n  keeping an alias in the old location (`tf.*`).\r\n* Added 1D, 2D and 3D Fourier transform ops for real signals to `tf.spectral`.\r\n* Added a `tf.bincount` function.\r\n* Added Keras 2 API to contrib.\r\n* Added a new lightweight queue-like object - `RecordInput`.\r\n* Added `tf.contrib.image.compose_transforms` function.\r\n* Bring `tf.estimator.*` into the API. Non-deprecated functionality from `tf.contrib.learn.Estimator` is moved to `tf.estimator.Estimator` with cosmetic changes.\r\n* Docker images: TF images on gcr.io and Docker Hub are upgraded to ubuntu:16.04.\r\n* Added the following features to TensorFlow Debugger (tfdbg):\r\n  * Ability to inspect Python source file against TF ops and tensors (command `print_source` / `ps`)\r\n  * New navigation bar in Curses-based UI\r\n  * NodeStepper (command `invoke_stepper`) now uses intermediate tensor dumps. It also uses `TensorHandles` as direct feeds during successive `cont` calls for improved performance and reduced memory consumption.\r\n* Initial release of installation guides for Java, C, and Go.\r\n* Added Text Dashboard to TensorBoard.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.1.0 will be the last time we release a binary with Mac GPU support. Going forward, we will stop testing on Mac GPU systems. We continue to welcome patches that maintain Mac GPU support, and we will try to keep the Mac GPU build working.\r\n\r\n## Changes to contrib APIs\r\n* The behavior of RNNCells is now stricter due to the transition towards making RNNCells act more like Keras layers.\r\n  * If an RNNCell is used twice in two different variable scopes, an error is raised describing how to avoid this behavior.\r\n  * If an RNNCell is used in a variable scope with existing conflicting variables, an error is raised showing that the RNNCell must be constructed with argument `reuse=True`.\r\n* Deprecated contrib/distributions `pmf`, `pdf`, `log_pmf`, `log_pdf`.\r\n* Moved `bayesflow.special_math` to distributions.\r\n* `tf.contrib.tensor_forest.python.tensor_forest.RandomForestDeviceAssigner` removed.\r\n* Changed some MVN classes and parameters:\r\n  * `tf.contrib.distributions.MultivariateNormalFull` replaced by `tf.contrib.distributions.MultivariateNormalTriL`.\r\n  * `tf.contrib.distributions.MultivariateNormalCholesky` replaced by `tf.contrib.distributions.MultivariateNormalTriL`\r\n  * `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev` replaced\r\n    by `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusScale`\r\n  * `tf.contrib.distributions.MultivariateNormalDiag` arguments changed from `mu`, `diag_stddev` to `log`, `scale_diag`.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusVDVT` removed.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusLowRank` added.\r\n\r\n## Bug Fixes and Other Changes\r\n* Java: Support for loading models exported using the SavedModel API (courtesy @EronWright).\r\n* Go: Added support for incremental graph execution.\r\n* Fix a bug in the WALS solver when single-threaded.\r\n* Added support for integer sparse feature values in `tf.contrib.layers.sparse_column_with_keys`.\r\n* Fixed `tf.set_random_seed(0)` to be deterministic for all ops.\r\n* Stability improvements for the GCS file system support.\r\n* Improved TensorForest performance.\r\n* Added support for multiple filename globs in `tf.matching_files`.\r\n* `LogMessage` now includes a timestamp as beginning of a message.\r\n* Added MultiBox person detector example standalone binary.\r\n* Android demo: Makefile build functionality added to build.gradle to fully support building TensorFlow demo in Android on Windows.\r\n* Android demo: read MultiBox priors from txt file rather than protobuf.\r\n* Added colocation constraints to `StagingArea`.\r\n* `sparse_matmul_op` reenabled for Android builds.\r\n* Restrict weights rank to be the same as the broadcast target, to avoid ambiguity on broadcast rules.\r\n* Upgraded libxsmm to 1.7.1 and applied other changes for performance and memory usage.\r\n* Fixed bfloat16 integration of LIBXSMM sparse mat-mul.\r\n* Improved performance and reduce memory usage by allowing ops to forward input buffers to output buffers and perform computations in-place.\r\n* Improved the performance of CPU assignment for strings.\r\n* Speed up matrix * vector multiplication and matrix * matrix with unknown shapes.\r\n* C API: Graph imports now support input remapping, control dependencies, and returning imported nodes (see `TF_GraphImportGraphDefWithReturnOutputs()`)\r\n* Multiple C++ API updates.\r\n* Multiple TensorBoard updates including:\r\n  * Users can now view image summaries at various sampled steps (instead of just the last step).\r\n  * Bugs involving switching runs as well as the image dashboard are fixed.\r\n  * Removed data download links from TensorBoard.\r\n  * TensorBoard uses a relative data directory, for easier embedding.\r\n  * TensorBoard automatically ignores outliers for domain calculation, and formats proportional values consistently.\r\n* Multiple tfdbg bug fixes:\r\n  * Fixed Windows compatibility issues.\r\n  * Command history now persists across runs.\r\n  * Bug fix in graph validation related to `tf.while_loops`.\r\n* Java Maven fixes for bugs with Windows installation.\r\n* Backport fixes and improvements from external keras.\r\n* Keras config file handling fix.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nA. Besir Kurtulmus, Adal Chiriliuc, @akash, Alec-Desouza, Alex Rothberg, Alex\r\nSergeev, Alexander Heinecke, Allen Guo, Andreas Madsen, Ankesh Anand, Anton \r\nLoss, @Aravind, @Arie, Ashutosh Das, Aur\u00e9Lien Geron, Bairen Yi, @bakunyo, Ben\r\nVisser, Brady Zhou, Calpa Liu, Changming Sun, Chih Cheng Liang, Christopher\r\nBerner, Clark Zinzow, @Conchylicultor, Dan Ellis, Dan J, Dan Jarvis, Daniel\r\nYlitalo, Darren Garvey, David Norman, David Truong, @DavidNorman, Dimitar\r\nPavlov, Dmitry Persiyanov, @Eddie, @elirex, Erfan Noury, Eron Wright, Evgeny\r\nMazovetskiy, Fabrizio (Misto) Milo, @fanlu, Fisher Coder, Florian Courtial,\r\nFranck Dernoncourt, Gagan Goel, Gao, Xiang, @Gautam, Gefu Tang, @guilherme,\r\n@guschmue, Hannah Provenza, Hans Pabst, @hartb, Hsiao Yi, Huazuo Gao, Igor\r\nChor\u0105\u017cEwicz, Ivan Smirnov, Jakub Kolodziejczyk, Jason Gavris, Jason Morton, Jay\r\nYoung, Jayaram Bobba, Jeremy Sawruk, Jiaming Liu, Jihun Choi, @jiqiu, Joan Thibault,\r\nJohn C F, Jojy George Varghese, Jon Malmaud, Julian Berman, Julian Niedermeier,\r\nJunpeng Lao, Kai Sasaki, @Kankroc, Karl Lessard, Kyle Bostelmann, @Lezcano, Li\r\nYi, Luo Yun, @lurker, Mahmoud-Abuzaina, Mandeep Singh, Marek Kolodziej, Mark\r\nSzepieniec, Martial Hue, Medhat Omr, Memo Akten, Michael Gharbi, Micha\u00ebL Defferrard,\r\nMilan Straka, @MircoT, @mlucool, Muammar Ibn Faisal, Nayana Thorat, @nghiattran,\r\nNicholas Connor, Nikolaas Steenbergen, Niraj Patel, Niranjan Hasabnis, @Panmari,\r\nPavel Bulanov, Philip Pries Henningsen, Philipp Jund, @polonez, Prayag Verma, Rahul\r\nKavi, Raphael Gontijo Lopes, @rasbt, Raven Iqqe, Reid Pryzant, Richard Shin, Rizwan\r\nAsif, Russell Kaplan, Ryo Asakura, R\u00fcDiger Busche, Saisai Shao, Sam Abrahams, @sanosay,\r\nSean Papay, @seaotterman, @selay01, Shaurya Sharma, Sriram Narayanamoorthy, Stefano\r\nProbst, @taknevski, @tbonza, @teldridge11, Tim Anglade, Tomas Reimers, Tomer Gafner,\r\nValentin Iovene, Vamsi Sripathi, Viktor Malyi, Vit Stepanovs, Vivek Rane, Vlad Firoiu,\r\n@wangg12, @will, Xiaoyu Tao, Yaroslav Bulatov, Yi Liu, Yuan (Terry) Tang, @Yufeng,\r\nYuming Wang, Yuxin Wu, Zafar Takhirov, Ziming Dong\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6080316", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/6080316/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/6080316/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.1.0-rc2", "id": 6080316, "node_id": "MDc6UmVsZWFzZTYwODAzMTY=", "tag_name": "v1.1.0-rc2", "target_commitish": "master", "name": "TensorFlow 1.1.0-rc2", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-04-14T21:41:11Z", "published_at": "2017-04-14T23:25:11Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.1.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.1.0-rc2", "body": "# Release 1.1.0\r\n\r\n## Major Features and Improvements\r\n* Added Java API support for Windows.\r\n* Added `tf.spectral` module. Moved existing FFT ops to `tf.spectral` while\r\n  keeping an alias in the old location (`tf.*`).\r\n* Added 1D, 2D and 3D Fourier transform ops for real signals to `tf.spectral`.\r\n* Added a `tf.bincount` function.\r\n* Added Keras 2 API to contrib.\r\n* Added a new lightweight queue-like object - `RecordInput`.\r\n* Added `tf.contrib.image.compose_transforms` function.\r\n* Bring `tf.estimator.*` into the API. Non-deprecated functionality from `tf.contrib.learn.Estimator` is moved to `tf.estimator.Estimator` with cosmetic changes.\r\n* Docker images: TF images on gcr.io and Docker Hub are upgraded to ubuntu:16.04.\r\n* Added the following features to TensorFlow Debugger (tfdbg):\r\n  * Ability to inspect Python source file against TF ops and tensors (command `print_source` / `ps`)\r\n  * New navigation bar in Curses-based UI\r\n  * NodeStepper (command `invoke_stepper`) now uses intermediate tensor dumps. It also uses `TensorHandles` as direct feeds during successive `cont` calls for improved performance and reduced memory consumption.\r\n* Initial release of installation guides for Java, C, and Go.\r\n* Added Text Dashboard to TensorBoard.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.1.0 will be the last time we release a binary with Mac GPU support. Going forward, we will stop testing on Mac GPU systems. We continue to welcome patches that maintain Mac GPU support, and we will try to keep the Mac GPU build working.\r\n\r\n## Changes to contrib APIs\r\n* The behavior of RNNCells is now stricter due to the transition towards making RNNCells act more like Keras layers.\r\n  * If an RNNCell is used twice in two different variable scopes, an error is raised describing how to avoid this behavior.\r\n  * If an RNNCell is used in a variable scope with existing conflicting variables, an error is raised showing that the RNNCell must be constructed with argument `reuse=True`.\r\n* Deprecated contrib/distributions `pmf`, `pdf`, `log_pmf`, `log_pdf`.\r\n* Moved `bayesflow.special_math` to distributions.\r\n* `tf.contrib.tensor_forest.python.tensor_forest.RandomForestDeviceAssigner` removed.\r\n* Changed some MVN classes and parameters:\r\n  * `tf.contrib.distributions.MultivariateNormalFull` replaced by `tf.contrib.distributions.MultivariateNormalTriL`.\r\n  * `tf.contrib.distributions.MultivariateNormalCholesky` replaced by `tf.contrib.distributions.MultivariateNormalTriL`\r\n  * `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev` replaced\r\n    by `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusScale`\r\n  * `tf.contrib.distributions.MultivariateNormalDiag` arguments changed from `mu`, `diag_stddev` to `log`, `scale_diag`.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusVDVT` removed.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusLowRank` added.\r\n\r\n## Bug Fixes and Other Changes\r\n* Java: Support for loading models exported using the SavedModel API (courtesy @EronWright).\r\n* Go: Added support for incremental graph execution.\r\n* Fix a bug in the WALS solver when single-threaded.\r\n* Added support for integer sparse feature values in `tf.contrib.layers.sparse_column_with_keys`.\r\n* Fixed `tf.set_random_seed(0)` to be deterministic for all ops.\r\n* Stability improvements for the GCS file system support.\r\n* Improved TensorForest performance.\r\n* Added support for multiple filename globs in `tf.matching_files`.\r\n* `LogMessage` now includes a timestamp as beginning of a message.\r\n* Added MultiBox person detector example standalone binary.\r\n* Android demo: Makefile build functionality added to build.gradle to fully support building TensorFlow demo in Android on Windows.\r\n* Android demo: read MultiBox priors from txt file rather than protobuf.\r\n* Added colocation constraints to `StagingArea`.\r\n* `sparse_matmul_op` reenabled for Android builds.\r\n* Restrict weights rank to be the same as the broadcast target, to avoid ambiguity on broadcast rules.\r\n* Upgraded libxsmm to 1.7.1 and applied other changes for performance and memory usage.\r\n* Fixed bfloat16 integration of LIBXSMM sparse mat-mul.\r\n* Improved performance and reduce memory usage by allowing ops to forward input buffers to output buffers and perform computations in-place.\r\n* Improved the performance of CPU assignment for strings.\r\n* Speed up matrix * vector multiplication and matrix * matrix with unknown shapes.\r\n* C API: Graph imports now support input remapping, control dependencies, and returning imported nodes (see `TF_GraphImportGraphDefWithReturnOutputs()`)\r\n* Multiple C++ API updates.\r\n* Multiple TensorBoard updates including:\r\n  * Users can now view image summaries at various sampled steps (instead of just the last step).\r\n  * Bugs involving switching runs as well as the image dashboard are fixed.\r\n  * Removed data download links from TensorBoard.\r\n  * TensorBoard uses a relative data directory, for easier embedding.\r\n  * TensorBoard automatically ignores outliers for domain calculation, and formats proportional values consistently.\r\n* Multiple tfdbg bug fixes:\r\n  * Fixed Windows compatibility issues.\r\n  * Command history now persists across runs.\r\n  * Bug fix in graph validation related to `tf.while_loops`.\r\n* Java Maven fixes for bugs with Windows installation.\r\n* Backport fixes and improvements from external keras.\r\n* Keras config file handling fix.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nA. Besir Kurtulmus, Adal Chiriliuc, @akash, Alec-Desouza, Alex Rothberg, Alex\r\nSergeev, Alexander Heinecke, Allen Guo, Andreas Madsen, Ankesh Anand, Anton \r\nLoss, @Aravind, @Arie, Ashutosh Das, Aur\u00e9Lien Geron, Bairen Yi, @bakunyo, Ben\r\nVisser, Brady Zhou, Calpa Liu, Changming Sun, Chih Cheng Liang, Christopher\r\nBerner, Clark Zinzow, @Conchylicultor, Dan Ellis, Dan J, Dan Jarvis, Daniel\r\nYlitalo, Darren Garvey, David Norman, David Truong, @DavidNorman, Dimitar\r\nPavlov, Dmitry Persiyanov, @Eddie, @elirex, Erfan Noury, Eron Wright, Evgeny\r\nMazovetskiy, Fabrizio (Misto) Milo, @fanlu, Fisher Coder, Florian Courtial,\r\nFranck Dernoncourt, Gagan Goel, Gao, Xiang, @Gautam, Gefu Tang, @guilherme,\r\n@guschmue, Hannah Provenza, Hans Pabst, @hartb, Hsiao Yi, Huazuo Gao, Igor\r\nChor\u0105\u017cEwicz, Ivan Smirnov, Jakub Kolodziejczyk, Jason Gavris, Jason Morton, Jay\r\nYoung, Jayaram Bobba, Jeremy Sawruk, Jiaming Liu, Jihun Choi, @jiqiu, Joan Thibault,\r\nJohn C F, Jojy George Varghese, Jon Malmaud, Julian Berman, Julian Niedermeier,\r\nJunpeng Lao, Kai Sasaki, @Kankroc, Karl Lessard, Kyle Bostelmann, @Lezcano, Li\r\nYi, Luo Yun, @lurker, Mahmoud-Abuzaina, Mandeep Singh, Marek Kolodziej, Mark\r\nSzepieniec, Martial Hue, Medhat Omr, Memo Akten, Michael Gharbi, Micha\u00ebL Defferrard,\r\nMilan Straka, @MircoT, @mlucool, Muammar Ibn Faisal, Nayana Thorat, @nghiattran,\r\nNicholas Connor, Nikolaas Steenbergen, Niraj Patel, Niranjan Hasabnis, @Panmari,\r\nPavel Bulanov, Philip Pries Henningsen, Philipp Jund, @polonez, Prayag Verma, Rahul\r\nKavi, Raphael Gontijo Lopes, @rasbt, Raven Iqqe, Reid Pryzant, Richard Shin, Rizwan\r\nAsif, Russell Kaplan, Ryo Asakura, R\u00fcDiger Busche, Saisai Shao, Sam Abrahams, @sanosay,\r\nSean Papay, @seaotterman, @selay01, Shaurya Sharma, Sriram Narayanamoorthy, Stefano\r\nProbst, @taknevski, @tbonza, @teldridge11, Tim Anglade, Tomas Reimers, Tomer Gafner,\r\nValentin Iovene, Vamsi Sripathi, Viktor Malyi, Vit Stepanovs, Vivek Rane, Vlad Firoiu,\r\n@wangg12, @will, Xiaoyu Tao, Yaroslav Bulatov, Yi Liu, Yuan (Terry) Tang, @Yufeng,\r\nYuming Wang, Yuxin Wu, Zafar Takhirov, Ziming Dong\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5943106", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5943106/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5943106/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.1.0-rc1", "id": 5943106, "node_id": "MDc6UmVsZWFzZTU5NDMxMDY=", "tag_name": "v1.1.0-rc1", "target_commitish": "master", "name": "TensorFlow 1.1.0-rc1", "draft": false, "author": {"login": "av8ramit", "id": 5588272, "node_id": "MDQ6VXNlcjU1ODgyNzI=", "avatar_url": "https://avatars1.githubusercontent.com/u/5588272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/av8ramit", "html_url": "https://github.com/av8ramit", "followers_url": "https://api.github.com/users/av8ramit/followers", "following_url": "https://api.github.com/users/av8ramit/following{/other_user}", "gists_url": "https://api.github.com/users/av8ramit/gists{/gist_id}", "starred_url": "https://api.github.com/users/av8ramit/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/av8ramit/subscriptions", "organizations_url": "https://api.github.com/users/av8ramit/orgs", "repos_url": "https://api.github.com/users/av8ramit/repos", "events_url": "https://api.github.com/users/av8ramit/events{/privacy}", "received_events_url": "https://api.github.com/users/av8ramit/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-04-04T18:07:14Z", "published_at": "2017-04-04T21:30:33Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.1.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.1.0-rc1", "body": "# Release 1.1.0\r\n\r\n## Major Features and Improvements\r\n* Added Java API support for Windows.\r\n* Added `tf.spectral` module. Moved existing FFT ops to `tf.spectral` while\r\n  keeping an alias in the old location (`tf.*`).\r\n* Added 1D, 2D and 3D Fourier transform ops for real signals to `tf.spectral`.\r\n* Added a `tf.bincount` function.\r\n* Added Keras 2 API to contrib.\r\n* Added a new lightweight queue-like object - `RecordInput`.\r\n* Added `tf.contrib.image.compose_transforms` function.\r\n* Bring `tf.estimator.*` into the API. Non-deprecated functionality from `tf.contrib.learn.Estimator` is moved to `tf.estimator.Estimator` with cosmetic changes.\r\n* Docker images: TF images on gcr.io and Docker Hub are upgraded to ubuntu:16.04.\r\n* Added the following features to TensorFlow Debugger (tfdbg):\r\n  * Ability to inspect Python source file against TF ops and tensors (command `print_source` / `ps`)\r\n  * New navigation bar in Curses-based UI\r\n  * NodeStepper (command `invoke_stepper`) now uses intermediate tensor dumps. It also uses `TensorHandles` as direct feeds during successive `cont` calls for improved performance and reduced memory consumption.\r\n* Initial release of installation guides for Java, C, and Go.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.1.0 will be the last time we release a binary with Mac GPU support. Going forward, we will stop testing on Mac GPU systems. We continue to welcome patches that maintain Mac GPU support, and we will try to keep the Mac GPU build working.\r\n\r\n## Changes to contrib APIs\r\n* The behavior of RNNCells is now stricter due to the transition towards making RNNCells act more like Keras layers.\r\n  * If an RNNCell is used twice in two different variable scopes, an error is raised describing how to avoid this behavior.\r\n  * If an RNNCell is used in a variable scope with existing conflicting variables, an error is raised showing that the RNNCell must be constructed with argument `reuse=True`.\r\n* Deprecated contrib/distributions `pmf`, `pdf`, `log_pmf`, `log_pdf`.\r\n* Moved `bayesflow.special_math` to distributions.\r\n* `tf.contrib.tensor_forest.python.tensor_forest.RandomForestDeviceAssigner` removed.\r\n* Changed some MVN classes and parameters:\r\n  * `tf.contrib.distributions.MultivariateNormalFull` replaced by `tf.contrib.distributions.MultivariateNormalTriL`.\r\n  * `tf.contrib.distributions.MultivariateNormalCholesky` replaced by `tf.contrib.distributions.MultivariateNormalTriL`\r\n  * `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev` replaced\r\n    by `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusScale`\r\n  * `tf.contrib.distributions.MultivariateNormalDiag` arguments changed from `mu`, `diag_stddev` to `log`, `scale_diag`.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusVDVT` removed.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusLowRank` added.\r\n\r\n## Bug Fixes and Other Changes\r\n* Java: Support for loading models exported using the SavedModel API (courtesy @EronWright).\r\n* Go: Added support for incremental graph execution.\r\n* Fix a bug in the WALS solver when single-threaded.\r\n* Added support for integer sparse feature values in `tf.contrib.layers.sparse_column_with_keys`.\r\n* Fixed `tf.set_random_seed(0)` to be deterministic for all ops.\r\n* Stability improvements for the GCS file system support.\r\n* Improved TensorForest performance.\r\n* Added support for multiple filename globs in `tf.matching_files`.\r\n* `LogMessage` now includes a timestamp as beginning of a message.\r\n* Added MultiBox person detector example standalone binary.\r\n* Android demo: Makefile build functionality added to build.gradle to fully support building TensorFlow demo in Android on Windows.\r\n* Android demo: read MultiBox priors from txt file rather than protobuf.\r\n* Added colocation constraints to `StagingArea`.\r\n* `sparse_matmul_op` reenabled for Android builds.\r\n* Restrict weights rank to be the same as the broadcast target, to avoid ambiguity on broadcast rules.\r\n* Upgraded libxsmm to 1.7.1 and applied other changes for performance and memory usage.\r\n* Fixed bfloat16 integration of LIBXSMM sparse mat-mul.\r\n* Improved performance and reduce memory usage by allowing ops to forward input buffers to output buffers and perform computations in-place.\r\n* Improved the performance of CPU assignment for strings.\r\n* Speed up matrix * vector multiplication and matrix * matrix with unknown shapes.\r\n* C API: Graph imports now support input remapping, control dependencies, and returning imported nodes (see `TF_GraphImportGraphDefWithReturnOutputs()`)\r\n* Multiple C++ API updates.\r\n* Multiple TensorBoard updates including:\r\n  * Users can now view image summaries at various sampled steps (instead of just the last step).\r\n  * Bugs involving switching runs as well as the image dashboard are fixed.\r\n  * Removed data download links from TensorBoard.\r\n  * TensorBoard uses a relative data directory, for easier embedding.\r\n  * TensorBoard automatically ignores outliers for domain calculation, and formats proportional values consistently.\r\n* Multiple tfdbg bug fixes:\r\n  * Fixed Windows compatibility issues.\r\n  * Command history now persists across runs.\r\n  * Bug fix in graph validation related to `tf.while_loops`.\r\n* Java Maven fixes for bugs with Windows installation.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nA. Besir Kurtulmus, Adal Chiriliuc, @akash, Alec-Desouza, Alex Rothberg, Alex\r\nSergeev, Alexander Heinecke, Allen Guo, Andreas Madsen, Ankesh Anand, Anton \r\nLoss, @Aravind, @Arie, Ashutosh Das, Aur\u00e9Lien Geron, Bairen Yi, @bakunyo, Ben\r\nVisser, Brady Zhou, Calpa Liu, Changming Sun, Chih Cheng Liang, Christopher\r\nBerner, Clark Zinzow, @Conchylicultor, Dan Ellis, Dan J, Dan Jarvis, Daniel\r\nYlitalo, Darren Garvey, David Norman, David Truong, @DavidNorman, Dimitar\r\nPavlov, Dmitry Persiyanov, @Eddie, @elirex, Erfan Noury, Eron Wright, Evgeny\r\nMazovetskiy, Fabrizio (Misto) Milo, @fanlu, Fisher Coder, Florian Courtial,\r\nFranck Dernoncourt, Gagan Goel, Gao, Xiang, @Gautam, Gefu Tang, @guilherme,\r\n@guschmue, Hannah Provenza, Hans Pabst, @hartb, Hsiao Yi, Huazuo Gao, Igor\r\nChor\u0105\u017cEwicz, Ivan Smirnov, Jakub Kolodziejczyk, Jason Gavris, Jason Morton, Jay\r\nYoung, Jayaram Bobba, Jeremy Sawruk, Jiaming Liu, Jihun Choi, @jiqiu, Joan Thibault,\r\nJohn C F, Jojy George Varghese, Jon Malmaud, Julian Berman, Julian Niedermeier,\r\nJunpeng Lao, Kai Sasaki, @Kankroc, Karl Lessard, Kyle Bostelmann, @Lezcano, Li\r\nYi, Luo Yun, @lurker, Mahmoud-Abuzaina, Mandeep Singh, Marek Kolodziej, Mark\r\nSzepieniec, Martial Hue, Medhat Omr, Memo Akten, Michael Gharbi, Micha\u00ebL Defferrard,\r\nMilan Straka, @MircoT, @mlucool, Muammar Ibn Faisal, Nayana Thorat, @nghiattran,\r\nNicholas Connor, Nikolaas Steenbergen, Niraj Patel, Niranjan Hasabnis, @Panmari,\r\nPavel Bulanov, Philip Pries Henningsen, Philipp Jund, @polonez, Prayag Verma, Rahul\r\nKavi, Raphael Gontijo Lopes, @rasbt, Raven Iqqe, Reid Pryzant, Richard Shin, Rizwan\r\nAsif, Russell Kaplan, Ryo Asakura, R\u00fcDiger Busche, Saisai Shao, Sam Abrahams, @sanosay,\r\nSean Papay, @seaotterman, @selay01, Shaurya Sharma, Sriram Narayanamoorthy, Stefano\r\nProbst, @taknevski, @tbonza, @teldridge11, Tim Anglade, Tomas Reimers, Tomer Gafner,\r\nValentin Iovene, Vamsi Sripathi, Viktor Malyi, Vit Stepanovs, Vivek Rane, Vlad Firoiu,\r\n@wangg12, @will, Xiaoyu Tao, Yaroslav Bulatov, Yi Liu, Yuan (Terry) Tang, @Yufeng,\r\nYuming Wang, Yuxin Wu, Zafar Takhirov, Ziming Dong\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5853008", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5853008/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5853008/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.1.0-rc0", "id": 5853008, "node_id": "MDc6UmVsZWFzZTU4NTMwMDg=", "tag_name": "v1.1.0-rc0", "target_commitish": "r1.1", "name": "TensorFlow 1.1.0-rc0", "draft": false, "author": {"login": "annarev", "id": 22060313, "node_id": "MDQ6VXNlcjIyMDYwMzEz", "avatar_url": "https://avatars0.githubusercontent.com/u/22060313?v=4", "gravatar_id": "", "url": "https://api.github.com/users/annarev", "html_url": "https://github.com/annarev", "followers_url": "https://api.github.com/users/annarev/followers", "following_url": "https://api.github.com/users/annarev/following{/other_user}", "gists_url": "https://api.github.com/users/annarev/gists{/gist_id}", "starred_url": "https://api.github.com/users/annarev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/annarev/subscriptions", "organizations_url": "https://api.github.com/users/annarev/orgs", "repos_url": "https://api.github.com/users/annarev/repos", "events_url": "https://api.github.com/users/annarev/events{/privacy}", "received_events_url": "https://api.github.com/users/annarev/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-03-24T02:51:15Z", "published_at": "2017-03-25T02:05:02Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.1.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.1.0-rc0", "body": "# Release 1.1.0\r\n\r\n## Major Features and Improvements\r\n* Added Java API support for Windows.\r\n* Added `tf.spectral` module. Moved existing FFT ops to `tf.spectral` while\r\n  keeping an alias in the old location (`tf.*`).\r\n* Added 1D, 2D and 3D Fourier transform ops for real signals to `tf.spectral`.\r\n* Added a `tf.bincount` function.\r\n* Added Keras 2 API to contrib.\r\n* Added a new lightweight queue-like object - `RecordInput`.\r\n* Added `tf.contrib.image.compose_transforms` function.\r\n* Bring `tf.estimator.*` into the API. Non-deprecated functionality from `tf.contrib.learn.Estimator` is moved to `tf.estimator.Estimator` with cosmetic changes.\r\n* Docker images: TF images on gcr.io and Docker Hub are upgraded to ubuntu:16.04.\r\n* Added the following features to TensorFlow Debugger (tfdbg):\r\n  * Ability to inspect Python source file against TF ops and tensors (command `print_source` / `ps`)\r\n  * New navigation bar in Curses-based UI\r\n  * NodeStepper (command `invoke_stepper`) now uses intermediate tensor dumps. It also uses `TensorHandles` as direct feeds during successive `cont` calls for improved performance and reduced memory consumption.\r\n\r\n## Deprecations\r\n\r\n* TensorFlow 1.1.0 will be the last time we release a binary with Mac GPU support. Going forward, we will stop testing on Mac GPU systems. We continue to welcome patches that maintain Mac GPU support, and we will try to keep the Mac GPU build working.\r\n\r\n## Changes to contrib APIs\r\n* The behavior of RNNCells is now stricter due to the transition towards making RNNCells act more like Keras layers.\r\n  * If an RNNCell is used twice in two different variable scopes, an error is raised describing how to avoid this behavior.\r\n  * If an RNNCell is used in a variable scope with existing conflicting variables, an error is raised showing that the RNNCell must be constructed with argument `reuse=True`.\r\n* Deprecated contrib/distributions `pmf`, `pdf`, `log_pmf`, `log_pdf`.\r\n* Moved `bayesflow.special_math` to distributions.\r\n* `tf.contrib.tensor_forest.python.tensor_forest.RandomForestDeviceAssigner` removed.\r\n* Changed some MVN classes and parameters:\r\n  * `tf.contrib.distributions.MultivariateNormalFull` replaced by `tf.contrib.distributions.MultivariateNormalTriL`.\r\n  * `tf.contrib.distributions.MultivariateNormalCholesky` replaced by `tf.contrib.distributions.MultivariateNormalTriL`\r\n  * `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusStDev` replaced\r\n    by `tf.contrib.distributions.MultivariateNormalDiagWithSoftplusScale`\r\n  * `tf.contrib.distributions.MultivariateNormalDiag` arguments changed from `mu`, `diag_stddev` to `log`, `scale_diag`.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusVDVT` removed.\r\n  * `tf.contrib.distributions.MultivariateNormalDiagPlusLowRank` added.\r\n\r\n## Bug Fixes and Other Changes\r\n* Java: Support for loading models exported using the SavedModel API (courtesy @EronWright).\r\n* Go: Added support for incremental graph execution.\r\n* Fix a bug in the WALS solver when single-threaded.\r\n* Added support for integer sparse feature values in `tf.contrib.layers.sparse_column_with_keys`.\r\n* Fixed `tf.set_random_seed(0)` to be deterministic for all ops.\r\n* Stability improvements for the GCS file system support.\r\n* Improved TensorForest performance.\r\n* Added support for multiple filename globs in `tf.matching_files`.\r\n* `LogMessage` now includes a timestamp as beginning of a message.\r\n* Added MultiBox person detector example standalone binary.\r\n* Android demo: Makefile build functionality added to build.gradle to fully support building TensorFlow demo in Android on Windows.\r\n* Android demo: read MultiBox priors from txt file rather than protobuf.\r\n* Added colocation constraints to `StagingArea`.\r\n* `sparse_matmul_op` reenabled for Android builds.\r\n* Restrict weights rank to be the same as the broadcast target, to avoid ambiguity on broadcast rules.\r\n* Upgraded libxsmm to 1.7.1 and applied other changes for performance and memory usage.\r\n* Fixed bfloat16 integration of LIBXSMM sparse mat-mul.\r\n* Improved performance and reduce memory usage by allowing ops to forward input buffers to output buffers and perform computations in-place.\r\n* Improved the performance of CPU assignment for strings.\r\n* Speed up matrix * vector multiplication and matrix * matrix with unknown shapes.\r\n* C API: Graph imports now support input remapping, control dependencies, and returning imported nodes (see `TF_GraphImportGraphDefWithReturnOutputs()`)\r\n* Multiple C++ API updates.\r\n* Multiple TensorBoard updates including:\r\n  * Users can now view image summaries at various sampled steps (instead of just the last step).\r\n  * Bugs involving switching runs as well as the image dashboard are fixed.\r\n  * Removed data download links from TensorBoard.\r\n  * TensorBoard uses a relative data directory, for easier embedding.\r\n  * TensorBoard automatically ignores outliers for domain calculation, and formats proportional values consistently.\r\n* Multiple tfdbg bug fixes:\r\n  * Fixed Windows compatibility issues.\r\n  * Command history now persists across runs.\r\n\r\n## Thanks to our Contributors\r\n\r\nThis release contains contributions from many people at Google, as well as:\r\n\r\nA. Besir Kurtulmus, Adal Chiriliuc, @akash, Alec-Desouza, Alex Rothberg, Alex\r\nSergeev, Alexander Heinecke, Allen Guo, Andreas Madsen, Ankesh Anand, Anton\r\nLoss, @Aravind, @Arie, Ashutosh Das, Aur\u00e9Lien Geron, Bairen Yi, @bakunyo, Ben\r\nVisser, Brady Zhou, Calpa Liu, Changming Sun, Chi Zeng, Chih Cheng Liang,\r\nChristopher Berner, Clark Zinzow, @Conchylicultor, Courtial Florian, Dan Ellis,\r\nDan J, Dan Jarvis, Daniel Ylitalo, Darren Garvey, David Norman, David Truong,\r\n@DavidNorman, Dimitar Pavlov, Dmitry Persiyanov, @Eddie, @elirex, Erfan\r\nNoury, Eron Wright, Evgeny Mazovetskiy, Fabrizio (Misto) Milo, @fanlu, Fisher\r\nCoder, Franck Dernoncourt, Gagan Goel, Gao, Xiang, @Gautam, Gefu Tang,\r\n@guilherme, @guschmue, Hannah Provenza, Hans Pabst, @hartb, Hsiao Yi, Huazuo\r\nGao, Igor Chor\u0105\u017cEwicz, Ivan Smirnov, Jakub Kolodziejczyk, Jason Gavris, Jason\r\nMorton, Jay Young, Jayaram Bobba, Jeremy Sawruk, Jiaming Liu, Jihun Choi,\r\n@jiqiu, Joan Thibault, John C F, Jojy G Varghese, Jon Malmaud, Julian Berman,\r\nJulian Niedermeier, Junpeng Lao, Kai Sasaki, @Kankroc, Karl Lessard, Kyle\r\nBostelmann, @Lezcano, Li Yi, Luo Yun, @lurker, Mahmoud-Abuzaina, Mandeep Singh,\r\nMarek Kolodziej, Mark Szepieniec, Martial Hue, Medhat Omr, Memo Akten, Michael\r\nGharbi, Micha\u00ebL Defferrard, Milan Straka, @MircoT, @mlucool, Muammar Ibn Faisal,\r\nNayana Thorat, @nghiattran, Nicholas Connor, Nikolaas Steenbergen, Niraj Patel,\r\nNiranjan Hasabnis, @Panmari, Pavel Bulanov, Philip Pries Henningsen, Philipp\r\nJund, @polonez, Prayag Verma, Rahul Kavi, Raphael Gontijo Lopes, @rasbt, Raven\r\nIqqe, Reid Pryzant, Richard Shin, Rizwan Asif, Russell Kaplan, Ryo Asakura,\r\nR\u00fcDiger Busche, Saisai Shao, Sam Abrahams, @sanosay, Sean Papay, @seaotterman,\r\n@selay01, Shaurya Sharma, Sriram Narayanamoorthy, Stefano Probst, @taknevski,\r\n@tbonza, @teldridge11, Yuan (Terry) Tang, Tim Anglade, Tomas Reimers, Tomer Gafner,\r\nValentin Iovene, Vamsi Sripathi, Viktor Malyi, Vit Stepanovs, Vivek Rane, Vlad\r\nFiroiu, @wangg12, @will, Xiaoyu Tao, Yaroslav Bulatov, Yuan (Terry) Tang,\r\n@Yufeng, Yuming Wang, Yuxin Wu, Zafar Takhirov, Ziming Dong\r\n\r\nWe are also grateful to all who filed issues or helped resolve them, asked and\r\nanswered questions, and were part of inspiring discussions."}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5671221", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5671221/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5671221/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.1", "id": 5671221, "node_id": "MDc6UmVsZWFzZTU2NzEyMjE=", "tag_name": "v1.0.1", "target_commitish": "r1.0", "name": "TensorFlow 1.0.1", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-03-07T22:16:05Z", "published_at": "2017-03-08T01:01:01Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.1", "body": "## Bug Fixes and Other Changes\r\n* Change GraphConstructor to not increase the version when importing, but instead take the min of all versions.\r\n* Google Cloud Storage fixes.\r\n* Removed `tf.core` and `tf.python` modules from the API. These were never intended to be exposed. Please use the same objects through top-level `tf` module instead.\r\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5458498", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5458498/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5458498/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.0", "id": 5458498, "node_id": "MDc6UmVsZWFzZTU0NTg0OTg=", "tag_name": "v1.0.0", "target_commitish": "r1.0", "name": "TensorFlow 1.0.0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2017-02-11T06:33:43Z", "published_at": "2017-02-15T17:46:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.0", "body": "## Major Features and Improvements\n- XLA (experimental): initial release of [XLA](https://www.tensorflow.org/versions/master/experimental/xla/), a domain-specific compiler for TensorFlow graphs, that targets CPUs and GPUs.\n- TensorFlow Debugger (tfdbg): command-line interface and API.\n- New python 3 docker images added.\n- Made pip packages pypi compliant. TensorFlow can now be installed by `pip\n  install tensorflow` command.\n- Several python API calls have been changed to resemble NumPy more closely.\n- New (experimental) [Java API](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java).\n- Android: new person detection + tracking demo implementing \"Scalable Object Detection using Deep Neural Networks\" (with additional YOLO object detector support)\n- Android: new camera-based image stylization demo based on \"A Learned Representation For Artistic Style\"\n\n## Breaking Changes to the API\n\nTo help you upgrade your existing TensorFlow Python code to match the API changes below, we have prepared a [conversion script](https://github.com/tensorflow/tensorflow/tree/r1.0/tensorflow/tools/compatibility).\n- TensorFlow/models have been moved to a separate github repository.\n- Division and modulus operators (/, //, %) now match Python (flooring)\n  semantics. This applies to `tf.div` and `tf.mod` as well. To obtain forced\n  integer truncation based behaviors you can use `tf.truncatediv`\n  and `tf.truncatemod`.\n- `tf.divide()` is now the recommended division function. `tf.div()` will\n  remain, but its semantics do not respond to Python 3 or `from future`\n  mechanisms.\n- tf.reverse() now takes indices of axes to be reversed. E.g.\n  `tf.reverse(a, [True, False, True])` must now be written as\n  `tf.reverse(a, [0, 2])`. `tf.reverse_v2()` will remain until 1.0 final.\n- `tf.mul`, `tf.sub` and `tf.neg` are deprecated in favor of `tf.multiply`,\n  `tf.subtract` and `tf.negative`.\n- `tf.pack` and `tf.unpack` are deprecated in favor of `tf.stack` and\n  `tf.unstack`.\n- `TensorArray.pack` and `TensorArray.unpack` are getting deprecated in favor of\n  `TensorArray.stack` and `TensorArray.unstack`.\n- The following Python functions have had their arguments changed to use `axis`\n  when referring to specific dimensions. We have kept the old keyword arguments\n  for compatibility currently, but we will be removing them well before the\n  final 1.0.\n  - `tf.argmax`: `dimension` becomes `axis`\n  - `tf.argmin`: `dimension` becomes `axis`\n  - `tf.count_nonzero`: `reduction_indices` becomes `axis`\n  - `tf.expand_dims`: `dim` becomes `axis`\n  - `tf.reduce_all`: `reduction_indices` becomes `axis`\n  - `tf.reduce_any`: `reduction_indices` becomes `axis`\n  - `tf.reduce_join`: `reduction_indices` becomes `axis`\n  - `tf.reduce_logsumexp`: `reduction_indices` becomes `axis`\n  - `tf.reduce_max`: `reduction_indices` becomes `axis`\n  - `tf.reduce_mean`: `reduction_indices` becomes `axis`\n  - `tf.reduce_min`: `reduction_indices` becomes `axis`\n  - `tf.reduce_prod`: `reduction_indices` becomes `axis`\n  - `tf.reduce_sum`: `reduction_indices` becomes `axis`\n  - `tf.reverse_sequence`: `batch_dim` becomes `batch_axis`, `seq_dim` becomes `seq_axis`\n  - `tf.sparse_concat`: `concat_dim` becomes `axis`\n  - `tf.sparse_reduce_sum`: `reduction_axes` becomes `axis`\n  - `tf.sparse_reduce_sum_sparse`: `reduction_axes` becomes `axis`\n  - `tf.sparse_split`: `split_dim` becomes `axis`\n- `tf.listdiff` has been renamed to `tf.setdiff1d` to match NumPy naming.\n- `tf.inv` has been renamed to be `tf.reciprocal` (component-wise reciprocal)\n  to avoid confusion with `np.inv` which is matrix inversion\n- tf.round now uses banker's rounding (round to even) semantics to match NumPy.\n- `tf.split` now takes arguments in a reversed order and with different\n  keywords. In particular, we now match NumPy order as\n  `tf.split(value, num_or_size_splits, axis)`.\n- `tf.sparse_split` now takes arguments in reversed order and with different\n  keywords. In particular we now match NumPy order as\n  `tf.sparse_split(sp_input, num_split, axis)`. NOTE: we have temporarily\n  made `tf.sparse_split` require keyword arguments.\n- `tf.concat` now takes arguments in reversed order and with different keywords. In particular we now match NumPy order as `tf.concat(values, axis, name)`.\n- `tf.image.decode_jpeg` by default uses the faster DCT method, sacrificing\n  a little fidelity for improved speed. One can revert to the old\n  behavior by specifying the attribute `dct_method='INTEGER_ACCURATE'`.\n- `tf.complex_abs` has been removed from the Python interface. `tf.abs`\n  supports complex tensors and should be used instead.\n- Template.`var_scope` property renamed to `.variable_scope`\n- SyncReplicasOptimizer is removed and SyncReplicasOptimizerV2 renamed to SyncReplicasOptimizer.\n- `tf.zeros_initializer()` and `tf.ones_initializer()` now return a callable\n  that must be called with initializer arguments, in your code replace\n  `tf.zeros_initializer` with `tf.zeros_initializer()`.\n- `SparseTensor.shape` has been renamed to `SparseTensor.dense_shape`.  Same for\n  `SparseTensorValue.shape`.\n- Replace tf.scalar_summary, tf.histogram_summary, tf.audio_summary, tf.image_summary with tf.summary.scalar, tf.summary.histogram, tf.summary.audio, tf.summary.image, respectively. The new summary ops take name rather than tag as their first argument, meaning summary ops now respect TensorFlow name scopes.\n- Replace tf.train.SummaryWriter and tf.train.SummaryWriterCache with tf.summary.FileWriter and tf.summary.FileWriterCache. \n- Removes RegisterShape from public API. Use C++ shape function registration\n  instead.\n- Deprecated `_ref` dtypes from the python API.\n- In the C++ API (in tensorflow/cc), Input, Output, etc. have moved\n  from the tensorflow::ops namespace to tensorflow.\n- Change arg order for `{softmax,sparse_softmax,sigmoid}_cross_entropy_with_logits` to be (labels, predictions), and force use of named args.\n- tf.nn.rnn_cell.\\* and most functions in tf.nn.rnn.\\* (with the exception of dynamic_rnn and raw_rnn) are temporarily in tf.contrib.rnn.  They will be moved back into core for TF 1.1.\n\n## Bug Fixes and Other Changes\n- Numerous C++ API updates.\n- New op: `parallel_stack`.\n- Introducing common tf io compression options constants for\n  RecordReader/RecordWriter.\n- Add `sparse_column_with_vocabulary_file`, to specify a feature column that\n  transform string features to IDs, where the mapping is defined by a vocabulary\n  file.\n- Added `index_to_string_table` which returns a lookup table that maps indices to\n  strings.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Add a `ParallelForWithWorkerId` function.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Support restore session from checkpoint files in v2 in `contrib/session_bundle`.\n- Added a tf.contrib.image.rotate function for arbitrary angles.\n- Added `tf.contrib.framework.filter_variables` as a convenience function to\n  filter lists of variables based on regular expressions.\n- `make_template()` takes an optional `custom_getter_ param`.\n- Added comment about how existing directories are handled by\n  `recursive_create_dir`.\n- Added an op for QR factorizations.\n- Divides and mods in Python API now use flooring (Python) semantics.\n- Android: pre-built libs are now built nightly.\n- Android: cmake/gradle build for TensorFlow Inference library under\n  `contrib/android/cmake`\n- Android: Much more robust Session initialization code.\n- Android: TF stats now exposed directly in demo and log when debug mode is\n  active\n- Android: new/better README.md documentation\n- saved_model is available as `tf.saved_model`.\n- Empty op is now stateful.\n- Improve speed of scatter_update on the cpu for ASSIGN operations.\n- Change `reduce_join` to treat `reduction_indices` in the same way as other `reduce_` ops.\n- Move `TensorForestEstimator` to `contrib/tensor_forest`.\n- Enable compiler optimizations by default and allow configuration in configure.\n- `tf.divide` now honors the name field.\n- Make metrics weight broadcasting more strict.\n- Add new queue-like `StagingArea` and new ops: `stage` and `unstage`.\n- Enable inplace update ops for strings on CPU. Speed up string concat.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Hu, Abhishek Aggarwal, Adam Michael, Adriano Carmezim, @AfirSraftGarrier,\nAlexander Novikov, Alexander Rosenberg Johansen, Andrew Gibiansky, Andrew Hundt,\nAnish Shah, Anton Loss, @b0noI, @BoyuanJiang, Carl Thom\u00e9, Chad Kennedy, Comic\nChang, Connor Braa, Daniel N. Lang, Daniel Trebbien,\n@danielgordon10, Darcy Liu, Darren Garvey, Dmitri Lapin, Eron Wright, Evan\nCofer, Fabrizio Milo, Finbarr Timbers, Franck Dernoncourt, Garrett Smith,\n@guschmue, Hao Wei, Henrik Holst, Huazuo Gao, @Ian, @Issac, Jacob Israel,\nJangsoo Park, Jin Kim, Jingtian Peng, John Pope, Kye Bostelmann, Liangliang He,\nLing Zhang, Luheng He, Luke Iwanski, @lvli, Michael Basilyan, Mihir Patel,\nMikalai Drabovich, Morten Just, @newge, Nick Butlin, Nishant Shukla,\nPengfei Ni, Przemyslaw Tredak, @rasbt, @Ronny, Rudolf Rosa, @RustingSword,\nSam Abrahams, Sam Putnam, @SeongAhJo, Shi Jiaxin, @skavulya, Steffen M\u00fcLler,\n@TheUSER123, @tiriplicamihai, @vhasanov, Victor Costan, Vit Stepanovs,\nWangda Tan, Wenjian Huang, Xingdong Zuo, Yaroslav Bulatov, Yota Toyama,\nYuan (Terry) Tang, Yuxin Wu\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5403417", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5403417/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5403417/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.0-rc2", "id": 5403417, "node_id": "MDc6UmVsZWFzZTU0MDM0MTc=", "tag_name": "v1.0.0-rc2", "target_commitish": "r1.0", "name": "TensorFlow 1.0.0-rc2", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-02-08T18:32:14Z", "published_at": "2017-02-09T02:39:59Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.0-rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.0-rc2", "body": "## Major Features and Improvements\n- XLA (experimental): initial release of [XLA](https://www.tensorflow.org/versions/master/experimental/xla/), a domain-specific compiler for TensorFlow graphs, that targets CPUs and GPUs.\n- TensorFlow Debugger (tfdbg): command-line interface and API.\n- New python 3 docker images added.\n- Made pip packages pypi compliant. TensorFlow can now be installed by `pip\n  install tensorflow` command.\n- Several python API calls have been changed to resemble NumPy more closely.\n- New (experimental) [Java API](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java).\n- Android: new person detection + tracking demo implementing \"Scalable Object Detection using Deep Neural Networks\" (with additional YOLO object detector support)\n- Android: new camera-based image stylization demo based on \"A Learned Representation For Artistic Style\"\n\n## Breaking Changes to the API\n\nTo help you upgrade your existing TensorFlow Python code to match the API changes below, we have prepared a [conversion script](https://github.com/tensorflow/tensorflow/tree/r1.0/tensorflow/tools/compatibility).\n- TensorFlow/models have been moved to a separate github repository.\n- Division and modulus operators (/, //, %) now match Python (flooring)\n  semantics. This applies to `tf.div` and `tf.mod` as well. To obtain forced\n  integer truncation based behaviors you can use `tf.truncatediv`\n  and `tf.truncatemod`.\n- `tf.divide()` is now the recommended division function. `tf.div()` will\n  remain, but its semantics do not respond to Python 3 or `from future`\n  mechanisms.\n- tf.reverse() now takes indices of axes to be reversed. E.g.\n  `tf.reverse(a, [True, False, True])` must now be written as\n  `tf.reverse(a, [0, 2])`. `tf.reverse_v2()` will remain until 1.0 final.\n- `tf.mul`, `tf.sub` and `tf.neg` are deprecated in favor of `tf.multiply`,\n  `tf.subtract` and `tf.negative`.\n- `tf.pack` and `tf.unpack` are deprecated in favor of `tf.stack` and\n  `tf.unstack`.\n- `TensorArray.pack` and `TensorArray.unpack` are getting deprecated in favor of\n  `TensorArray.stack` and `TensorArray.unstack`.\n- The following Python functions have had their arguments changed to use `axis`\n  when referring to specific dimensions. We have kept the old keyword arguments\n  for compatibility currently, but we will be removing them well before the\n  final 1.0.\n  - `tf.argmax`: `dimension` becomes `axis`\n  - `tf.argmin`: `dimension` becomes `axis`\n  - `tf.count_nonzero`: `reduction_indices` becomes `axis`\n  - `tf.expand_dims`: `dim` becomes `axis`\n  - `tf.reduce_all`: `reduction_indices` becomes `axis`\n  - `tf.reduce_any`: `reduction_indices` becomes `axis`\n  - `tf.reduce_join`: `reduction_indices` becomes `axis`\n  - `tf.reduce_logsumexp`: `reduction_indices` becomes `axis`\n  - `tf.reduce_max`: `reduction_indices` becomes `axis`\n  - `tf.reduce_mean`: `reduction_indices` becomes `axis`\n  - `tf.reduce_min`: `reduction_indices` becomes `axis`\n  - `tf.reduce_prod`: `reduction_indices` becomes `axis`\n  - `tf.reduce_sum`: `reduction_indices` becomes `axis`\n  - `tf.reverse_sequence`: `batch_dim` becomes `batch_axis`, `seq_dim` becomes `seq_axis`\n  - `tf.sparse_concat`: `concat_dim` becomes `axis`\n  - `tf.sparse_reduce_sum`: `reduction_axes` becomes `axis`\n  - `tf.sparse_reduce_sum_sparse`: `reduction_axes` becomes `axis`\n  - `tf.sparse_split`: `split_dim` becomes `axis`\n- `tf.listdiff` has been renamed to `tf.setdiff1d` to match NumPy naming.\n- `tf.inv` has been renamed to be `tf.reciprocal` (component-wise reciprocal)\n  to avoid confusion with `np.inv` which is matrix inversion\n- tf.round now uses banker's rounding (round to even) semantics to match NumPy.\n- `tf.split` now takes arguments in a reversed order and with different\n  keywords. In particular, we now match NumPy order as\n  `tf.split(value, num_or_size_splits, axis)`.\n- `tf.sparse_split` now takes arguments in reversed order and with different\n  keywords. In particular we now match NumPy order as\n  `tf.sparse_split(sp_input, num_split, axis)`. NOTE: we have temporarily\n  made `tf.sparse_split` require keyword arguments.\n- `tf.concat` now takes arguments in reversed order and with different keywords. In particular we now match NumPy order as `tf.concat(values, axis, name)`.\n- `tf.image.decode_jpeg` by default uses the faster DCT method, sacrificing\n  a little fidelity for improved speed. One can revert to the old\n  behavior by specifying the attribute `dct_method='INTEGER_ACCURATE'`.\n- `tf.complex_abs` has been removed from the Python interface. `tf.abs`\n  supports complex tensors and should be used instead.\n- Template.`var_scope` property renamed to `.variable_scope`\n- SyncReplicasOptimizer is removed and SyncReplicasOptimizerV2 renamed to SyncReplicasOptimizer.\n- `tf.zeros_initializer()` and `tf.ones_initializer()` now return a callable\n  that must be called with initializer arguments, in your code replace\n  `tf.zeros_initializer` with `tf.zeros_initializer()`.\n- `SparseTensor.shape` has been renamed to `SparseTensor.dense_shape`.  Same for\n  `SparseTensorValue.shape`.\n- Replace tf.scalar_summary, tf.histogram_summary, tf.audio_summary, tf.image_summary with tf.summary.scalar, tf.summary.histogram, tf.summary.audio, tf.summary.image, respectively. The new summary ops take name rather than tag as their first argument, meaning summary ops now respect TensorFlow name scopes.\n- Replace tf.train.SummaryWriter and tf.train.SummaryWriterCache with tf.summary.FileWriter and tf.summary.FileWriterCache. \n- Removes RegisterShape from public API. Use C++ shape function registration\n  instead.\n- Deprecated `_ref` dtypes from the python API.\n- In the C++ API (in tensorflow/cc), Input, Output, etc. have moved\n  from the tensorflow::ops namespace to tensorflow.\n- Change arg order for `{softmax,sparse_softmax,sigmoid}_cross_entropy_with_logits` to be (labels, predictions), and force use of named args.\n\n## Bug Fixes and Other Changes\n- New op: `parallel_stack`.\n- Introducing common tf io compression options constants for\n  RecordReader/RecordWriter.\n- Add `sparse_column_with_vocabulary_file`, to specify a feature column that\n  transform string features to IDs, where the mapping is defined by a vocabulary\n  file.\n- Added `index_to_string_table` which returns a lookup table that maps indices to\n  strings.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Add a `ParallelForWithWorkerId` function.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Support restore session from checkpoint files in v2 in `contrib/session_bundle`.\n- Added a tf.contrib.image.rotate function for arbitrary angles.\n- Added `tf.contrib.framework.filter_variables` as a convenience function to\n  filter lists of variables based on regular expressions.\n- `make_template()` takes an optional `custom_getter_ param`.\n- Added comment about how existing directories are handled by\n  `recursive_create_dir`.\n- Added an op for QR factorizations.\n- Divides and mods in Python API now use flooring (Python) semantics.\n- Android: pre-built libs are now built nightly.\n- Android: cmake/gradle build for TensorFlow Inference library under\n  `contrib/android/cmake`\n- Android: Much more robust Session initialization code.\n- Android: TF stats now exposed directly in demo and log when debug mode is\n  active\n- Android: new/better README.md documentation\n- saved_model is available as `tf.saved_model`.\n- Empty op is now stateful.\n- Improve speed of scatter_update on the cpu for ASSIGN operations.\n- Change `reduce_join` to treat `reduction_indices` in the same way as other `reduce_` ops.\n- Move `TensorForestEstimator` to `contrib/tensor_forest`.\n- Enable compiler optimizations by default and allow configuration in configure.\n- `tf.divide` now honors the name field.\n- Make metrics weight broadcasting more strict.\n- Add new queue-like `StagingArea` and new ops: `stage` and `unstage`.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Hu, Abhishek Aggarwal, Adam Michael, Adriano Carmezim, @AfirSraftGarrier,\nAlexander Novikov, Alexander Rosenberg Johansen, Andrew Gibiansky, Andrew Hundt,\nAnish Shah, Anton Loss, @b0noI, @BoyuanJiang, Carl Thom\u00e9, Chad Kennedy, Comic\nChang, Connor Braa, Daniel N. Lang, Daniel Trebbien,\n@danielgordon10, Darcy Liu, Darren Garvey, Dmitri Lapin, Eron Wright, Evan\nCofer, Fabrizio Milo, Finbarr Timbers, Franck Dernoncourt, Garrett Smith,\n@guschmue, Hao Wei, Henrik Holst, Huazuo Gao, @Ian, @Issac, Jacob Israel,\nJangsoo Park, Jin Kim, Jingtian Peng, John Pope, Kye Bostelmann, Liangliang He,\nLing Zhang, Luheng He, Luke Iwanski, @lvli, Michael Basilyan, Mihir Patel,\nMikalai Drabovich, Morten Just, @newge, Nick Butlin, Nishant Shukla,\nPengfei Ni, Przemyslaw Tredak, @rasbt, @Ronny, Rudolf Rosa, @RustingSword,\nSam Abrahams, Sam Putnam, @SeongAhJo, Shi Jiaxin, @skavulya, Steffen M\u00fcLler,\n@TheUSER123, @tiriplicamihai, @vhasanov, Victor Costan, Vit Stepanovs,\nWangda Tan, Wenjian Huang, Xingdong Zuo, Yaroslav Bulatov, Yota Toyama,\nYuan (Terry) Tang, Yuxin Wu\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5358517", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5358517/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5358517/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.0-rc1", "id": 5358517, "node_id": "MDc6UmVsZWFzZTUzNTg1MTc=", "tag_name": "v1.0.0-rc1", "target_commitish": "r1.0", "name": "TensorFlow 1.0.0-rc1", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-02-03T23:13:00Z", "published_at": "2017-02-04T02:29:53Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.0-rc1", "body": "## Major Features and Improvements\n- XLA (experimental): initial release of [XLA](https://www.tensorflow.org/versions/master/experimental/xla/), a domain-specific compiler for TensorFlow graphs, that targets CPUs and GPUs.\n- TensorFlow Debugger (tfdbg): command-line interface and API.\n- New python 3 docker images added.\n- Made pip packages pypi compliant. TensorFlow can now be installed by `pip\n  install tensorflow` command.\n- Several python API calls have been changed to resemble NumPy more closely.\n- New (experimental) [Java API](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java).\n- Android: new person detection + tracking demo implementing \"Scalable Object Detection using Deep Neural Networks\" (with additional YOLO object detector support)\n- Android: new camera-based image stylization demo based on \"A Learned Representation For Artistic Style\"\n\n## Breaking Changes to the API\n\nTo help you upgrade your existing TensorFlow Python code to match the API changes below, we have prepared a [conversion script](https://github.com/tensorflow/tensorflow/tree/r1.0/tensorflow/tools/compatibility).\n- TensorFlow/models have been moved to a separate github repository.\n- Division and modulus operators (/, //, %) now match Python (flooring)\n  semantics. This applies to `tf.div` and `tf.mod` as well. To obtain forced\n  integer truncation based behaviors you can use `tf.truncatediv`\n  and `tf.truncatemod`.\n- `tf.divide()` is now the recommended division function. `tf.div()` will\n  remain, but its semantics do not respond to Python 3 or `from future`\n  mechanisms.\n- tf.reverse() now takes indices of axes to be reversed. E.g.\n  `tf.reverse(a, [True, False, True])` must now be written as\n  `tf.reverse(a, [0, 2])`. `tf.reverse_v2()` will remain until 1.0 final.\n- `tf.mul`, `tf.sub` and `tf.neg` are deprecated in favor of `tf.multiply`,\n  `tf.subtract` and `tf.negative`.\n- `tf.pack` and `tf.unpack` are deprecated in favor of `tf.stack` and\n  `tf.unstack`.\n- `TensorArray.pack` and `TensorArray.unpack` are getting deprecated in favor of\n  `TensorArray.stack` and `TensorArray.unstack`.\n- The following Python functions have had their arguments changed to use `axis`\n  when referring to specific dimensions. We have kept the old keyword arguments\n  for compatibility currently, but we will be removing them well before the\n  final 1.0.\n  - `tf.argmax`: `dimension` becomes `axis`\n  - `tf.argmin`: `dimension` becomes `axis`\n  - `tf.count_nonzero`: `reduction_indices` becomes `axis`\n  - `tf.expand_dims`: `dim` becomes `axis`\n  - `tf.reduce_all`: `reduction_indices` becomes `axis`\n  - `tf.reduce_any`: `reduction_indices` becomes `axis`\n  - `tf.reduce_join`: `reduction_indices` becomes `axis`\n  - `tf.reduce_logsumexp`: `reduction_indices` becomes `axis`\n  - `tf.reduce_max`: `reduction_indices` becomes `axis`\n  - `tf.reduce_mean`: `reduction_indices` becomes `axis`\n  - `tf.reduce_min`: `reduction_indices` becomes `axis`\n  - `tf.reduce_prod`: `reduction_indices` becomes `axis`\n  - `tf.reduce_sum`: `reduction_indices` becomes `axis`\n  - `tf.reverse_sequence`: `batch_dim` becomes `batch_axis`, `seq_dim` becomes `seq_axis`\n  - `tf.sparse_concat`: `concat_dim` becomes `axis`\n  - `tf.sparse_reduce_sum`: `reduction_axes` becomes `axis`\n  - `tf.sparse_reduce_sum_sparse`: `reduction_axes` becomes `axis`\n  - `tf.sparse_split`: `split_dim` becomes `axis`\n- `tf.listdiff` has been renamed to `tf.setdiff1d` to match NumPy naming.\n- `tf.inv` has been renamed to be `tf.reciprocal` (component-wise reciprocal)\n  to avoid confusion with `np.inv` which is matrix inversion\n- tf.round now uses banker's rounding (round to even) semantics to match NumPy.\n- `tf.split` now takes arguments in a reversed order and with different\n  keywords. In particular, we now match NumPy order as\n  `tf.split(value, num_or_size_splits, axis)`.\n- `tf.sparse_split` now takes arguments in reversed order and with different\n  keywords. In particular we now match NumPy order as\n  `tf.sparse_split(sp_input, num_split, axis)`. NOTE: we have temporarily\n  made `tf.sparse_split` require keyword arguments.\n- `tf.concat` now takes arguments in reversed order and with different keywords. In particular we now match NumPy order as `tf.concat(values, axis, name)`.\n- `tf.image.decode_jpeg` by default uses the faster DCT method, sacrificing\n  a little fidelity for improved speed. One can revert to the old\n  behavior by specifying the attribute `dct_method='INTEGER_ACCURATE'`.\n- `tf.complex_abs` has been removed from the Python interface. `tf.abs`\n  supports complex tensors and should be used instead.\n- Template.`var_scope` property renamed to `.variable_scope`\n- SyncReplicasOptimizer is removed and SyncReplicasOptimizerV2 renamed to SyncReplicasOptimizer.\n- `tf.zeros_initializer()` and `tf.ones_initializer()` now return a callable\n  that must be called with initializer arguments, in your code replace\n  `tf.zeros_initializer` with `tf.zeros_initializer()`.\n- `SparseTensor.shape` has been renamed to `SparseTensor.dense_shape`.  Same for\n  `SparseTensorValue.shape`.\n- Replace tf.scalar_summary, tf.histogram_summary, tf.audio_summary, tf.image_summary with tf.summary.scalar, tf.summary.histogram, tf.summary.audio, tf.summary.image, respectively. The new summary ops take name rather than tag as their first argument, meaning summary ops now respect TensorFlow name scopes.\n- Replace tf.train.SummaryWriter and tf.train.SummaryWriterCache with tf.summary.FileWriter and tf.summary.FileWriterCache. \n- Removes RegisterShape from public API. Use C++ shape function registration\n  instead.\n- Deprecated `_ref` dtypes from the python API.\n- In the C++ API (in tensorflow/cc), Input, Output, etc. have moved\n  from the tensorflow::ops namespace to tensorflow.\n- Change arg order for `{softmax,sparse_softmax,sigmoid}_cross_entropy_with_logits` to be (labels, predictions), and force use of named args.\n\n## Bug Fixes and Other Changes\n- New op: `parallel_stack`.\n- Introducing common tf io compression options constants for\n  RecordReader/RecordWriter.\n- Add `sparse_column_with_vocabulary_file`, to specify a feature column that\n  transform string features to IDs, where the mapping is defined by a vocabulary\n  file.\n- Added `index_to_string_table` which returns a lookup table that maps indices to\n  strings.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Add a `ParallelForWithWorkerId` function.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Support restore session from checkpoint files in v2 in `contrib/session_bundle`.\n- Added a tf.contrib.image.rotate function for arbitrary angles.\n- Added `tf.contrib.framework.filter_variables` as a convenience function to\n  filter lists of variables based on regular expressions.\n- `make_template()` takes an optional `custom_getter_ param`.\n- Added comment about how existing directories are handled by\n  `recursive_create_dir`.\n- Added an op for QR factorizations.\n- Divides and mods in Python API now use flooring (Python) semantics.\n- Android: pre-built libs are now built nightly.\n- Android: cmake/gradle build for TensorFlow Inference library under\n  `contrib/android/cmake`\n- Android: Much more robust Session initialization code.\n- Android: TF stats now exposed directly in demo and log when debug mode is\n  active\n- Android: new/better README.md documentation\n- saved_model is available as `tf.saved_model`.\n- Empty op is now stateful.\n- Improve speed of scatter_update on the cpu for ASSIGN operations.\n- Change `reduce_join` to treat `reduction_indices` in the same way as other `reduce_` ops.\n- Move `TensorForestEstimator` to `contrib/tensor_forest`.\n- Enable compiler optimizations by default and allow configuration in configure.\n- `tf.divide` now honors the name field.\n- Make metrics weight broadcasting more strict.\n- Add new queue-like `StagingArea` and new ops: `stage` and `unstage`.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Hu, Abhishek Aggarwal, Adam Michael, Adriano Carmezim, @AfirSraftGarrier,\nAlexander Novikov, Alexander Rosenberg Johansen, Andrew Gibiansky, Andrew Hundt,\nAnish Shah, Anton Loss, @b0noI, @BoyuanJiang, Carl Thom\u00e9, Chad Kennedy, Comic\nChang, Connor Braa, Daniel N. Lang, Daniel Trebbien,\n@danielgordon10, Darcy Liu, Darren Garvey, Dmitri Lapin, Eron Wright, Evan\nCofer, Fabrizio Milo, Finbarr Timbers, Franck Dernoncourt, Garrett Smith,\n@guschmue, Hao Wei, Henrik Holst, Huazuo Gao, @Ian, @Issac, Jacob Israel,\nJangsoo Park, Jin Kim, Jingtian Peng, John Pope, Kye Bostelmann, Liangliang He,\nLing Zhang, Luheng He, Luke Iwanski, @lvli, Michael Basilyan, Mihir Patel,\nMikalai Drabovich, Morten Just, @newge, Nick Butlin, Nishant Shukla,\nPengfei Ni, Przemyslaw Tredak, @rasbt, @Ronny, Rudolf Rosa, @RustingSword,\nSam Abrahams, Sam Putnam, @SeongAhJo, Shi Jiaxin, @skavulya, Steffen M\u00fcLler,\n@TheUSER123, @tiriplicamihai, @vhasanov, Victor Costan, Vit Stepanovs,\nWangda Tan, Wenjian Huang, Xingdong Zuo, Yaroslav Bulatov, Yota Toyama,\nYuan (Terry) Tang, Yuxin Wu\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5279011", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5279011/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5279011/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.0-rc0", "id": 5279011, "node_id": "MDc6UmVsZWFzZTUyNzkwMTE=", "tag_name": "v1.0.0-rc0", "target_commitish": "r1.0", "name": "TensorFlow 1.0.0-rc0", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-01-26T18:57:25Z", "published_at": "2017-01-26T20:47:27Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.0-rc0", "body": "## Major Features and Improvements\n- XLA (experimental): initial release of [XLA](https://www.tensorflow.org/versions/master/experimental/xla/), a domain-specific compiler for TensorFlow graphs, that targets CPUs and GPUs.\n- TensorFlow Debugger (tfdbg): command-line interface and API.\n- New python 3 docker images added.\n- Made pip packages pypi compliant. TensorFlow can now be installed by `pip\n  install tensorflow` command.\n- Several python API calls have been changed to resemble NumPy more closely.\n- New (experimental) [Java API](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java).\n- Android: new person detection + tracking demo implementing \"Scalable Object Detection using Deep Neural Networks\" (with additional YOLO object detector support)\n- Android: new camera-based image stylization demo based on \"A Learned Representation For Artistic Style\"\n\n## Breaking Changes to the API\n\nTo help you upgrade your existing TensorFlow Python code to match the API changes below, we have prepared a [conversion script](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/tools/compatibility).\n- TensorFlow/models have been moved to a separate github repository.\n- Division and modulus operators (/, //, %) now match Python (flooring)\n  semantics. This applies to `tf.div` and `tf.mod` as well. To obtain forced\n  integer truncation based behaviors you can use `tf.truncatediv`\n  and `tf.truncatemod`.\n- `tf.divide()` is now the recommended division function. `tf.div()` will\n  remain, but its semantics do not respond to Python 3 or `from future`\n  mechanisms.\n- tf.reverse() now takes indices of axes to be reversed. E.g.\n  `tf.reverse(a, [True, False, True])` must now be written as\n  `tf.reverse(a, [0, 2])`. `tf.reverse_v2()` will remain until 1.0 final.\n- `tf.mul`, `tf.sub` and `tf.neg` are deprecated in favor of `tf.multiply`,\n  `tf.subtract` and `tf.negative`.\n- `tf.pack` and `tf.unpack` are deprecated in favor of `tf.stack` and\n  `tf.unstack`.\n- `TensorArray.pack` and `TensorArray.unpack` are getting deprecated in favor of\n  `TensorArray.stack` and `TensorArray.unstack`.\n- The following Python functions have had their arguments changed to use `axis`\n  when referring to specific dimensions. We have kept the old keyword arguments\n  for compatibility currently, but we will be removing them well before the\n  final 1.0.\n  - `tf.argmax`: `dimension` becomes `axis`\n  - `tf.argmin`: `dimension` becomes `axis`\n  - `tf.count_nonzero`: `reduction_indices` becomes `axis`\n  - `tf.expand_dims`: `dim` becomes `axis`\n  - `tf.reduce_all`: `reduction_indices` becomes `axis`\n  - `tf.reduce_any`: `reduction_indices` becomes `axis`\n  - `tf.reduce_join`: `reduction_indices` becomes `axis`\n  - `tf.reduce_logsumexp`: `reduction_indices` becomes `axis`\n  - `tf.reduce_max`: `reduction_indices` becomes `axis`\n  - `tf.reduce_mean`: `reduction_indices` becomes `axis`\n  - `tf.reduce_min`: `reduction_indices` becomes `axis`\n  - `tf.reduce_prod`: `reduction_indices` becomes `axis`\n  - `tf.reduce_sum`: `reduction_indices` becomes `axis`\n  - `tf.reverse_sequence`: `batch_dim` becomes `batch_axis`, `seq_dim` becomes `seq_axis`\n  - `tf.sparse_concat`: `concat_dim` becomes `axis`\n  - `tf.sparse_reduce_sum`: `reduction_axes` becomes `axis`\n  - `tf.sparse_reduce_sum_sparse`: `reduction_axes` becomes `axis`\n  - `tf.sparse_split`: `split_dim` becomes `axis`\n- `tf.listdiff` has been renamed to `tf.setdiff1d` to match NumPy naming.\n- `tf.inv` has been renamed to be `tf.reciprocal` (component-wise reciprocal)\n  to avoid confusion with `np.inv` which is matrix inversion\n- tf.round now uses banker's rounding (round to even) semantics to match NumPy.\n- `tf.split` now takes arguments in a reversed order and with different\n  keywords. In particular, we now match NumPy order as\n  `tf.split(value, num_or_size_splits, axis)`.\n- `tf.sparse_split` now takes arguments in reversed order and with different\n  keywords. In particular we now match NumPy order as\n  `tf.sparse_split(sp_input, num_split, axis)`. NOTE: we have temporarily\n  made `tf.sparse_split` require keyword arguments.\n- `tf.concat` now takes arguments in reversed order and with different keywords. In particular we now match NumPy order as `tf.concat(values, axis, name)`.\n- `tf.image.decode_jpeg` by default uses the faster DCT method, sacrificing\n  a little fidelity for improved speed. One can revert to the old\n  behavior by specifying the attribute `dct_method='INTEGER_ACCURATE'`.\n- `tf.complex_abs` has been removed from the Python interface. `tf.abs`\n  supports complex tensors and should be used instead.\n- Template.`var_scope` property renamed to `.variable_scope`\n- SyncReplicasOptimizer is removed and SyncReplicasOptimizerV2 renamed to SyncReplicasOptimizer.\n- `tf.zeros_initializer()` and `tf.ones_initializer()` now return a callable\n  that must be called with initializer arguments, in your code replace\n  `tf.zeros_initializer` with `tf.zeros_initializer()`.\n- `SparseTensor.shape` has been renamed to `SparseTensor.dense_shape`.  Same for\n  `SparseTensorValue.shape`.\n- Replace tf.scalar_summary, tf.histogram_summary, tf.audio_summary, tf.image_summary with tf.summary.scalar, tf.summary.histogram, tf.summary.audio, tf.summary.image, respectively. The new summary ops take name rather than tag as their first argument, meaning summary ops now respect TensorFlow name scopes.\n- Replace tf.train.SummaryWriter and tf.train.SummaryWriterCache with tf.summary.FileWriter and tf.summary.FileWriterCache. \n- Removes RegisterShape from public API. Use C++ shape function registration\n  instead.\n- Deprecated `_ref` dtypes from the python API.\n- In the C++ API (in tensorflow/cc), Input, Output, etc. have moved\n  from the tensorflow::ops namespace to tensorflow.\n- Change arg order for `{softmax,sparse_softmax,sigmoid}_cross_entropy_with_logits` to be (labels, predictions), and force use of named args.\n\n## Bug Fixes and Other Changes\n- New op: `parallel_stack`.\n- Introducing common tf io compression options constants for\n  RecordReader/RecordWriter.\n- Add `sparse_column_with_vocabulary_file`, to specify a feature column that\n  transform string features to IDs, where the mapping is defined by a vocabulary\n  file.\n- Added `index_to_string_table` which returns a lookup table that maps indices to\n  strings.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Add a `ParallelForWithWorkerId` function.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Support restore session from checkpoint files in v2 in `contrib/session_bundle`.\n- Added a tf.contrib.image.rotate function for arbitrary angles.\n- Added `tf.contrib.framework.filter_variables` as a convenience function to\n  filter lists of variables based on regular expressions.\n- `make_template()` takes an optional `custom_getter_ param`.\n- Added comment about how existing directories are handled by\n  `recursive_create_dir`.\n- Added an op for QR factorizations.\n- Divides and mods in Python API now use flooring (Python) semantics.\n- Android: pre-built libs are now built nightly.\n- Android: cmake/gradle build for TensorFlow Inference library under\n  `contrib/android/cmake`\n- Android: Much more robust Session initialization code.\n- Android: TF stats now exposed directly in demo and log when debug mode is\n  active\n- Android: new/better README.md documentation\n- saved_model is available as `tf.saved_model`.\n- Empty op is now stateful.\n- Improve speed of scatter_update on the cpu for ASSIGN operations.\n- Change `reduce_join` to treat `reduction_indices` in the same way as other `reduce_` ops.\n- Move `TensorForestEstimator` to `contrib/tensor_forest`.\n- Enable compiler optimizations by default and allow configuration in configure.\n- `tf.divide` now honors the name field.\n- Make metrics weight broadcasting more strict.\n- Add new queue-like `StagingArea` and new ops: `stage` and `unstage`.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Hu, Abhishek Aggarwal, Adam Michael, Adriano Carmezim, @AfirSraftGarrier,\nAlexander Novikov, Alexander Rosenberg Johansen, Andrew Gibiansky, Andrew Hundt,\nAnish Shah, Anton Loss, @b0noI, @BoyuanJiang, Carl Thom\u00e9, Chad Kennedy, Comic\nChang, Connor Braa, Daniel N. Lang, Daniel Trebbien,\n@danielgordon10, Darcy Liu, Darren Garvey, Dmitri Lapin, Eron Wright, Evan\nCofer, Fabrizio Milo, Finbarr Timbers, Franck Dernoncourt, Garrett Smith,\n@guschmue, Hao Wei, Henrik Holst, Huazuo Gao, @Ian, @Issac, Jacob Israel,\nJangsoo Park, Jin Kim, Jingtian Peng, John Pope, Kye Bostelmann, Liangliang He,\nLing Zhang, Luheng He, Luke Iwanski, @lvli, Michael Basilyan, Mihir Patel,\nMikalai Drabovich, Morten Just, @newge, Nick Butlin, Nishant Shukla,\nPengfei Ni, Przemyslaw Tredak, @rasbt, @Ronny, Rudolf Rosa, @RustingSword,\nSam Abrahams, Sam Putnam, @SeongAhJo, Shi Jiaxin, @skavulya, Steffen M\u00fcLler,\n@TheUSER123, @tiriplicamihai, @vhasanov, Victor Costan, Vit Stepanovs,\nWangda Tan, Wenjian Huang, Xingdong Zuo, Yaroslav Bulatov, Yota Toyama,\nYuan (Terry) Tang, Yuxin Wu\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5110434", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5110434/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5110434/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v1.0.0-alpha", "id": 5110434, "node_id": "MDc6UmVsZWFzZTUxMTA0MzQ=", "tag_name": "v1.0.0-alpha", "target_commitish": "r1.0", "name": "TensorFlow 1.0.0-alpha", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2017-01-10T00:17:51Z", "published_at": "2017-01-10T00:59:33Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v1.0.0-alpha", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v1.0.0-alpha", "body": "## Major Features and Improvements\n- TensorFlow Debugger (tfdbg): command-line interface and API.\n- New python 3 docker images added.\n- Made pip packages pypi compliant. TensorFlow can now be installed by `pip\n  install tensorflow` command.\n- Android: person detection + tracking demo implementing Scalable Object\n  Detection using Deep Neural Networks.\n- Android: pre-built libs are now built nightly.\n- New (experimental) [Java API](https://github.com/tensorflow/tensorflow/tree/master/tensorflow/java).\n\n## Breaking Changes to the API\n- TensorFlow/models have been moved to a separate github repository.\n- Division and modulus operators (/, //, %) now match Python (flooring)\n  semantics. This applies to `tf.div` and `tf.mod` as well. To obtain forced\n  integer truncation based behaviors you can use `tf.truncatediv`\n  and `tf.truncatemod`.\n- `tf.divide()` is now the recommended division function. `tf.div()` will\n  remain, but its semantics do not respond to Python 3 or `from future`\n  mechanisms.\n- tf.reverse() now takes indices of axes to be reversed. E.g.\n  `tf.reverse(a, [True, False, True])` must now be written as\n  `tf.reverse(a, [0, 2])`. `tf.reverse_v2()` will remain until 1.0 final.\n- `tf.mul`, `tf.sub` and `tf.neg` are deprecated in favor of `tf.multiply`,\n  `tf.subtract` and `tf.negative`.\n- `tf.pack` and `tf.unpack` are deprecated in favor of `tf.stack` and\n  `tf.unstack`.\n- `TensorArray.pack` and `TensorArray.unpack` are getting deprecated in favor of\n  `TensorArray.stack` and `TensorArray.unstack`.\n- The following Python functions have had their arguments changed to use `axis`\n  when referring to specific dimensions. We have kept the old keyword arguments\n  for compatibility currently, but we will be removing them well before the\n  final 1.0.\n  - `tf.argmax`: `dimension` becomes `axis`\n  - `tf.argmin`: `dimension` becomes `axis`\n  - `tf.count_nonzero`: `reduction_indices` becomes `axis`\n  - `tf.expand_dims`: `dim` becomes `axis`\n  - `tf.reduce_all`: `reduction_indices` becomes `axis`\n  - `tf.reduce_any`: `reduction_indices` becomes `axis`\n  - `tf.reduce_join`: `reduction_indices` becomes `axis`\n  - `tf.reduce_logsumexp`: `reduction_indices` becomes `axis`\n  - `tf.reduce_max`: `reduction_indices` becomes `axis`\n  - `tf.reduce_mean`: `reduction_indices` becomes `axis`\n  - `tf.reduce_min`: `reduction_indices` becomes `axis`\n  - `tf.reduce_prod`: `reduction_indices` becomes `axis`\n  - `tf.reduce_sum`: `reduction_indices` becomes `axis`\n  - `tf.reverse_sequence`: `batch_dim` becomes `batch_axis`, `seq_dim` becomes `seq_axis`\n  - `tf.sparse_concat`: `concat_dim` becomes `axis`\n  - `tf.sparse_reduce_sum`: `reduction_axes` becomes `axis`\n  - `tf.sparse_reduce_sum_sparse`: `reduction_axes` becomes `axis`\n  - `tf.sparse_split`: `split_dim` becomes `axis`\n- `tf.listdiff` has been renamed to `tf.setdiff1d` to match NumPy naming.\n- `tf.inv` has been renamed to be `tf.reciprocal` (component-wise reciprocal)\n  to avoid confusion with `np.inv` which is matrix inversion\n- tf.round now uses banker's rounding (round to even) semantics to match NumPy.\n- `tf.split` now takes arguments in a reversed order and with different\n  keywords. In particular, we now match NumPy order as\n  `tf.split(value, num_or_size_splits, axis)`.\n- `tf.sparse_split` now takes arguments in reversed order and with different\n  keywords. In particular we now match NumPy order as\n  `tf.sparse_split(sp_input, num_split, axis)`. NOTE: we have temporarily\n  made `tf.sparse_split` require keyword arguments.\n- Deprecated `tf.concat` operator. Please switch to use `tf.concat_v2` for now.\n  In the Beta release, we will update `tf.concat` to match argument order of\n  `tf.concat_v2`.\n- `tf.image.decode_jpeg` by default uses the faster DCT method, sacrificing\n  a little fidelity for improved speed. One can revert to the old\n  behavior by specifying the attribute `dct_method='INTEGER_ACCURATE'`.\n- `tf.complex_abs` has been removed from the Python interface. `tf.abs`\n  supports complex tensors and should be used instead.\n- Template.`var_scope` property renamed to `.variable_scope`\n- SyncReplicasOptimizer is removed and SyncReplicasOptimizerV2 renamed to SyncReplicasOptimizer.\n- `tf.zeros_initializer()` and `tf.ones_initializer()` now return a callable\n  that must be called with initializer arguments, in your code replace\n  `tf.zeros_initializer` with `tf.zeros_initializer()`.\n- `SparseTensor.shape` has been renamed to `SparseTensor.dense_shape`.  Same for\n  `SparseTensorValue.shape`.\n- Remove old tf summary ops, like `tf.scalar_summary` and `tf.histogram_summary`.\n  Use `tf.summary.scalar` and `tf.summary.histogram` instead.\n- Remove tf.train.SummaryWriter and tf.train.SummaryWriterCache.\n- Removes RegisterShape from public API. Use C++ shape function registration\n  instead.\n- Deprecated `_ref` dtypes from the python API.\n\n## Bug Fixes and Other Changes\n- New op: `parallel_stack`.\n- Introducing common tf io compression options constants for\n  RecordReader/RecordWriter.\n- Add `sparse_column_with_vocabulary_file`, to specify a feature column that\n  transform string features to IDs, where the mapping is defined by a vocabulary\n  file.\n- Added `index_to_string_table` which returns a lookup table that maps indices to\n  strings.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Add a `ParallelForWithWorkerId` function.\n- Add `string_to_index_table`, which returns a lookup table that matches strings\n  to indices.\n- Support restore session from checkpoint files in v2 in `contrib/session_bundle`.\n- Added a tf.contrib.image.rotate function for arbitrary angles.\n- Added `tf.contrib.framework.filter_variables` as a convenience function to\n  filter lists of variables based on regular expressions.\n- Remove old tf summary ops, like `tf.scalar_summary` and `tf.histogram_summary`.\n  Use `tf.summary.scalar` and `tf.summary.histogram` instead.\n- `make_template()` takes an optional `custom_getter_ param`.\n- Added comment about how existing directories are handled by\n  `recursive_create_dir`.\n- Added an op for QR factorizations.\n- Divides and mods in Python API now use flooring (Python) semantics.\n- Android: cmake/gradle build for TensorFlow Inference library under\n  `contrib/android/cmake`\n- Android: Much more robust Session initialization code.\n- Android: TF stats now exposed directly in demo and log when debug mode is\n  active\n- Android: new/better README.md documentation\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Hu, Abhishek Aggarwal, Adam Michael, Adriano Carmezim, @AfirSraftGarrier,\nAlexander Novikov, Alexander Rosenberg Johansen, Andrew Gibiansky, Andrew Hundt,\nAnish Shah, Anton Loss, @b0noI, @BoyuanJiang, Carl Thom\u00e9, Chad Kennedy, Comic\nChang, Connor Braa, Daniel N. Lang, Daniel Trebbien,\n@danielgordon10, Darcy Liu, Darren Garvey, Dmitri Lapin, Eron Wright, Evan\nCofer, Fabrizio Milo, Finbarr Timbers, Franck Dernoncourt, Garrett Smith,\n@guschmue, Hao Wei, Henrik Holst, Huazuo Gao, @Ian, @Issac, Jacob Israel,\nJangsoo Park, Jin Kim, Jingtian Peng, John Pope, Kye Bostelmann, Liangliang He,\nLing Zhang, Luheng He, Luke Iwanski, @lvli, Michael Basilyan, Mihir Patel,\nMikalai Drabovich, Morten Just, @newge, Nick Butlin, Nishant Shukla,\nPengfei Ni, Przemyslaw Tredak, @rasbt, @Ronny, Rudolf Rosa, @RustingSword,\nSam Abrahams, Sam Putnam, @SeongAhJo, Shi Jiaxin, @skavulya, Steffen M\u00fcLler,\n@TheUSER123, @tiriplicamihai, @vhasanov, Victor Costan, Vit Stepanovs,\nWangda Tan, Wenjian Huang, Xingdong Zuo, Yaroslav Bulatov, Yota Toyama,\nYuan (Terry) Tang, Yuxin Wu\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5028273", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/5028273/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/5028273/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/0.12.1", "id": 5028273, "node_id": "MDc6UmVsZWFzZTUwMjgyNzM=", "tag_name": "0.12.1", "target_commitish": "r0.12", "name": "TensorFlow v0.12.1", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-12-25T13:44:34Z", "published_at": "2016-12-29T23:13:19Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/0.12.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/0.12.1", "body": "Bug fixes and minor changes.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4973774", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4973774/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4973774/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.12.0", "id": 4973774, "node_id": "MDc6UmVsZWFzZTQ5NzM3NzQ=", "tag_name": "v0.12.0", "target_commitish": "r0.12", "name": "TensorFlow v0.12.0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-12-19T23:18:10Z", "published_at": "2016-12-20T21:56:29Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.12.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.12.0", "body": "Bug fixes and minor changes.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4897745", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4897745/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4897745/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/0.12.0-rc1", "id": 4897745, "node_id": "MDc6UmVsZWFzZTQ4OTc3NDU=", "tag_name": "0.12.0-rc1", "target_commitish": "r0.12", "name": "TensorFlow v0.12.0 RC1", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-12-10T04:59:10Z", "published_at": "2016-12-12T18:32:00Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/0.12.0-rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/0.12.0-rc1", "body": "Bug fixes and minor changes.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4757401", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4757401/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4757401/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/0.12.0-rc0", "id": 4757401, "node_id": "MDc6UmVsZWFzZTQ3NTc0MDE=", "tag_name": "0.12.0-rc0", "target_commitish": "r0.12", "name": "TensorFlow v0.12.0 RC0", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-11-28T22:31:19Z", "published_at": "2016-11-29T02:08:06Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/0.12.0-rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/0.12.0-rc0", "body": "# Release 0.12.0\n\n## Major Features and Improvements\n- TensorFlow now builds and runs on Microsoft Windows (tested on Windows 10,\n  Windows 7, and Windows Server 2016). Supported languages include Python (via a\n  pip package) and C++. CUDA 8.0 and cuDNN 5.1 are supported for GPU\n  acceleration. Known limitations include: It is not currently possible to load\n  a custom op library. The GCS and HDFS file systems are not currently\n  supported. The following ops are not currently implemented:\n  DepthwiseConv2dNative, DepthwiseConv2dNativeBackpropFilter,\n  DepthwiseConv2dNativeBackpropInput, Dequantize, Digamma, Erf, Erfc, Igamma,\n  Igammac, Lgamma, Polygamma, QuantizeAndDequantize, QuantizedAvgPool,\n  QuantizedBatchNomWithGlobalNormalization, QuantizedBiasAdd, QuantizedConcat,\n  QuantizedConv2D, QuantizedMatmul, QuantizedMaxPool,\n  QuantizeDownAndShrinkRange, QuantizedRelu, QuantizedRelu6, QuantizedReshape,\n  QuantizeV2, RequantizationRange, and Requantize.\n- Go: Experimental API in Go to create and execute graphs\n  (https://godoc.org/github.com/tensorflow/tensorflow/tensorflow/go)\n- New checkpoint format becomes the default in `tf.train.Saver`. Old V1\n  checkpoints continue to be readable; controlled by the `write_version`\n  argument, `tf.train.Saver` now by default writes out in the new V2\n  format. It significantly reduces the peak memory required and latency\n  incurred during restore.\n- Added a new library for library of matrix-free (iterative) solvers for linear\n  equations, linear least-squares, eigenvalues and singular values in\n  tensorflow/contrib/solvers. Initial version has lanczos bidiagonalization,\n  conjugate gradients and CGLS.\n- Added gradients for `matrix_solve_ls` and `self_adjoint_eig`.\n- Large cleanup to add second order gradient for ops with C++ gradients and\n  improve existing gradients such that most ops can now be differentiated\n  multiple times.\n- Added a solver for ordinary differential equations,\n  `tf.contrib.integrate.odeint`.\n- New contrib module for tensors with named axes, `tf.contrib.labeled_tensor`.\n- Visualization of embeddings in TensorBoard.\n\n## Breaking Changes to the API\n- `BusAdjacency` enum replaced with a protocol buffer `DeviceLocality`.  PCI bus\n  indexing now starts from 1 instead of 0, and `bus_id==0` is used where\n  previously `BUS_ANY` was used.\n- `Env::FileExists` and `FileSystem::FileExists` now return a\n  `tensorflow::Status` intead of a bool. Any callers to this function can be\n  converted to a bool by adding `.ok()` to the call.\n- C API: Type `TF_SessionWithGraph` has been renamed to `TF_Session`, indicating\n  its preferred use in language bindings for TensorFlow. What was previously\n  `TF_Session` has been renamed to `TF_DeprecatedSession`.\n- C API: Renamed `TF_Port` to `TF_Output`.\n- C API: The caller retains ownership of `TF_Tensor` objects provided to\n  `TF_Run`, `TF_SessionRun`, `TF_SetAttrTensor` etc.\n- Renamed `tf.image.per_image_whitening()` to\n  `tf.image.per_image_standardization()`\n- Move Summary protobuf constructors to `tf.summary` submodule.\n- Deprecate `histogram_summary`, `audio_summary`, `scalar_summary`,\n  `image_summary`, `merge_summary`, and `merge_all_summaries`.\n- Combined `batch_*` and regular version of linear algebra and FFT ops. The\n  regular op now handles batches as well. All `batch_*` Python interfaces were\n  removed.\n- `tf.all_variables`, `tf.VARIABLES` and `tf.initialize_all_variables` renamed\n  to `tf.global_variables`, `tf.GLOBAL_VARIABLES` and\n  `tf.global_variable_initializers` respectively.\n\n## Bug Fixes and Other Changes\n- Use threadsafe version of `lgamma` function.\n- Fix `tf.sqrt` handling of negative arguments.\n- Fixed bug causing incorrect number of threads to be used for multi-threaded\n  benchmarks.\n- Performance optimizations for `batch_matmul` on multi-core CPUs.\n- Improve trace, `matrix_set_diag`, `matrix_diag_part` and their gradients to\n  work for rectangular matrices.\n- Support for SVD of complex valued matrices.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\n@a7744hsc, Abhi Agg, @admcrae, Adriano Carmezim, Aki Sukegawa, Alex Kendall,\nAlexander Rosenberg Johansen, @amcrae, Amlan Kar, Andre Simpelo, Andreas Eberle,\nAndrew Hundt, Arnaud Lenglet, @b0noI, Balachander Ramachandran, Ben Barsdell,\nBen Guidarelli, Benjamin Mularczyk, Burness Duan, @c0g, Changming Sun,\n@chanis, Corey Wharton, Dan J, Daniel Trebbien, Darren Garvey, David Brailovsky,\nDavid Jones, Di Zeng, @DjangoPeng, Dr. Kashif Rasul, @drag0, Fabrizio (Misto)\nMilo, Fabr\u00edCio Ceschin, @fp, @Ghedeon, @guschmue, G\u00f6k\u00e7en Eraslan, Haosdent\nHuang, Haroen Viaene, Harold Cooper, Henrik Holst, @hoangmit, Ivan Ukhov, Javier\nDehesa, Jingtian Peng, Jithin Odattu, Joan Pastor, Johan Mathe, Johannes Mayer,\nJongwook Choi, Justus Schwabedal, Kai Wolf, Kamil Hryniewicz, Kamran Amini,\nKaren Brems, Karl Lattimer, @kborer, Ken Shirriff, Kevin Rose, Larissa Laich,\nLaurent Mazare, Leonard Lee, Liang-Chi Hsieh, Liangliang He, Luke Iwanski,\nMarek Kolodziej, Moustafa Alzantot, @MrQianjinsi, @nagachika, Neil Han, Nick\nMeehan, Niels Ole Salscheider, Nikhil Mishra, @nschuc, Ondrej Skopek, Ond\u0159Ej\nFilip, @OscarDPan, Pablo Moyano, Przemyslaw Tredak, @qitaishui, @Quarazy,\n@raix852, Philipp Helo, Sam Abrahams, @SriramRamesh, Till Hoffmann, Tushar Soni,\n@tvn, @tyfkda, Uwe Schmidt, Victor Villas, Vit Stepanovs, Vladislav Gubarev,\n@wujingyue, Xuesong Yang, Yi Liu, Yilei Yang, @youyou3, Yuan (Terry) Tang,\nYuming Wang, Zafar Takhirov, @zhongyuk, Ziming Dong, @guotong1988\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4627500", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4627500/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4627500/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.11.0", "id": 4627500, "node_id": "MDc6UmVsZWFzZTQ2Mjc1MDA=", "tag_name": "v0.11.0", "target_commitish": "r0.11", "name": "TensorFlow v0.11.0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-11-09T22:07:53Z", "published_at": "2016-11-10T17:46:04Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.11.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.11.0", "body": ""}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4534397", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4534397/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4534397/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.11.0rc2", "id": 4534397, "node_id": "MDc6UmVsZWFzZTQ1MzQzOTc=", "tag_name": "v0.11.0rc2", "target_commitish": "r0.11", "name": "TensorFlow v0.11.0 RC2", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-10-31T17:55:37Z", "published_at": "2016-11-01T07:59:56Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.11.0rc2", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.11.0rc2", "body": "Bug fixes and minor changes.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4455368", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4455368/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4455368/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.11.0rc1", "id": 4455368, "node_id": "MDc6UmVsZWFzZTQ0NTUzNjg=", "tag_name": "v0.11.0rc1", "target_commitish": "r0.11", "name": "TensorFlow v0.11.0 RC1", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-10-21T00:06:33Z", "published_at": "2016-10-21T23:53:11Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.11.0rc1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.11.0rc1", "body": "## Major Features and Improvements\n- CUDA 8.0 support.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4275627", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4275627/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4275627/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.11.0rc0", "id": 4275627, "node_id": "MDc6UmVsZWFzZTQyNzU2Mjc=", "tag_name": "v0.11.0rc0", "target_commitish": "r0.11", "name": "TensorFlow v0.11.0 RC0", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-09-30T17:15:46Z", "published_at": "2016-09-30T17:22:05Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.11.0rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.11.0rc0", "body": "## Major Features and Improvements\n- cuDNN 5 support.\n- HDFS Support.\n- Adds Fused LSTM support via cuDNN 5 in `tensorflow/contrib/cudnn_rnn`.\n- Improved support for NumPy style basic slicing including non-1 strides,\n  ellipses, newaxis, and negative indices. For example complicated expressions\n  like `foo[1, 2:4, tf.newaxis, ..., :-3:-1, :]` are now supported. In addition\n  we have preliminary (non-broadcasting) support for sliced assignment to\n  variables. In particular one can write `var[1:3].assign([1,11,111])`.\n- Introducing `core/util/tensor_bundle` module: a module to efficiently\n  serialize/deserialize tensors to disk.  Will be used in TF's new checkpoint\n  format.\n- Added tf.svd for computing the singular value decomposition (SVD) of dense\n  matrices or batches of matrices (CPU only).\n- Added gradients for eigenvalues and eigenvectors computed using\n  `self_adjoint_eig` or `self_adjoint_eigvals`.\n- Eliminated `batch_*` methods for most linear algebra and FFT ops and promoted\n  the non-batch version of the ops to handle batches of matrices.\n- Tracing/timeline support for distributed runtime (no GPU profiler yet).\n- C API gives access to inferred shapes with `TF_GraphGetTensorNumDims` and\n  `TF_GraphGetTensorShape`.\n- Shape functions for core ops have moved to C++ via\n  `REGISTER_OP(...).SetShapeFn(...)`.  Python shape inference RegisterShape calls\n  use the C++ shape functions with `common_shapes.call_cpp_shape_fn`.  A future\n  release will remove `RegisterShape` from python.\n\n## Bug Fixes and Other Changes\n- Documentation now includes operator overloads on Tensor and Variable.\n- `tensorflow.__git_version__` now allows users to identify the version of the\n  code that TensorFlow was compiled with. We also have\n  `tensorflow.__git_compiler__` which identifies the compiler used to compile\n  TensorFlow's core.\n- Improved multi-threaded performance of `batch_matmul`.\n- LSTMCell, BasicLSTMCell, and MultiRNNCell constructors now default to\n  `state_is_tuple=True`.  For a quick fix while transitioning to the new\n  default, simply pass the argument `state_is_tuple=False`.\n- DeviceFactory's AddDevices and CreateDevices functions now return\n  a Status instead of void.\n- Int32 elements of list(type) arguments are no longer placed in host memory by\n  default. If necessary, a list(type) argument to a kernel can be placed in host\n  memory using a HostMemory annotation.\n- `uniform_unit_scaling_initializer()` no longer takes a `full_shape` arg,\n  instead relying on the partition info passed to the initializer function when\n  it's called.\n- The NodeDef protocol message is now defined in its own file `node_def.proto`\n  `instead of graph.proto`.\n- `ops.NoGradient` was renamed `ops.NotDifferentiable`. `ops.NoGradient` will\n  be removed soon.\n- `dot.h` / DotGraph was removed (it was an early analysis tool prior\n  to TensorBoard, no longer that useful).  It remains in history\n  should someone find the code useful.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAbid K, @afshinrahimi, @AidanGG, Ajay Rao, Aki Sukegawa, Alex Rothberg,\nAlexander Rosenberg Johansen, Andrew Gibiansky, Andrew Thomas, @Appleholic,\nBastiaan Quast, Ben Dilday, Bofu Chen, Brandon Amos, Bryon Gloden, Cissp\u00ae,\n@chanis, Chenyang Liu, Corey Wharton, Daeyun Shin, Daniel Julius Lasiman, Daniel\nWaterworth, Danijar Hafner, Darren Garvey, Denis Gorbachev, @DjangoPeng,\nEgor-Krivov, Elia Palme, Eric Platon, Fabrizio Milo, Gaetan Semet,\nGeorg Nebehay, Gu Wang, Gustav Larsson, @haosdent, Harold Cooper, Hw-Zz,\n@ichuang, Igor Babuschkin, Igor Macedo Quintanilha, Ilya Edrenkin, @ironhead,\nJakub Kolodziejczyk, Jennifer Guo, Jihun Choi, Jonas Rauber, Josh Bleecher\nSnyder, @jpangburn, Jules Gagnon-Marchand, Karen Brems, @kborer, Kirill Bobyrev,\nLaurent Mazare, Longqi Yang, Malith Yapa, Maniteja Nandana, Martin Englund,\nMatthias Winkelmann, @mecab, Mu-Ik Jeon, Nand Dalal, Niels Ole Salscheider,\nNikhil Mishra, Park Jiin, Pieter De Rijk, @raix852, Ritwik Gupta, Sahil Sharma,\n@Sangheum, @SergejsRk, Shinichiro Hamaji, Simon Denel, @Steve, @suiyuan2009,\nTiago Jorge, Tijmen Tieleman, @tvn, @tyfkda, Wang Yang, Wei-Ting Kuo, Wenjian\nHuang, Yan Chen, @YenChenLin, Yuan (Terry) Tang, Yuncheng Li, Yunfeng Wang, Zack\nPolizzi, @zhongzyd, Ziming Dong, @perhapszzy\n\nWe are also grateful to all who filed issues or helped resolve them, asked and\nanswered questions, and were part of inspiring discussions.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4109057", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/4109057/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/4109057/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.10.0", "id": 4109057, "node_id": "MDc6UmVsZWFzZTQxMDkwNTc=", "tag_name": "v0.10.0", "target_commitish": "r0.10", "name": "TensorFlow v0.10.0", "draft": false, "author": {"login": "gunan", "id": 7946809, "node_id": "MDQ6VXNlcjc5NDY4MDk=", "avatar_url": "https://avatars3.githubusercontent.com/u/7946809?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gunan", "html_url": "https://github.com/gunan", "followers_url": "https://api.github.com/users/gunan/followers", "following_url": "https://api.github.com/users/gunan/following{/other_user}", "gists_url": "https://api.github.com/users/gunan/gists{/gist_id}", "starred_url": "https://api.github.com/users/gunan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gunan/subscriptions", "organizations_url": "https://api.github.com/users/gunan/orgs", "repos_url": "https://api.github.com/users/gunan/repos", "events_url": "https://api.github.com/users/gunan/events{/privacy}", "received_events_url": "https://api.github.com/users/gunan/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-09-08T21:49:36Z", "published_at": "2016-09-12T20:32:00Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.10.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.10.0", "body": "Bug fixes for rc0\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3774743", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3774743/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/3774743/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.10.0rc0", "id": 3774743, "node_id": "MDc6UmVsZWFzZTM3NzQ3NDM=", "tag_name": "v0.10.0rc0", "target_commitish": "r0.10", "name": "TensorFlow v0.10.0 RC0", "draft": false, "author": {"login": "yifeif", "id": 1192265, "node_id": "MDQ6VXNlcjExOTIyNjU=", "avatar_url": "https://avatars3.githubusercontent.com/u/1192265?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yifeif", "html_url": "https://github.com/yifeif", "followers_url": "https://api.github.com/users/yifeif/followers", "following_url": "https://api.github.com/users/yifeif/following{/other_user}", "gists_url": "https://api.github.com/users/yifeif/gists{/gist_id}", "starred_url": "https://api.github.com/users/yifeif/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yifeif/subscriptions", "organizations_url": "https://api.github.com/users/yifeif/orgs", "repos_url": "https://api.github.com/users/yifeif/repos", "events_url": "https://api.github.com/users/yifeif/events{/privacy}", "received_events_url": "https://api.github.com/users/yifeif/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-07-29T21:34:44Z", "published_at": "2016-07-29T23:59:41Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.10.0rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.10.0rc0", "body": "# Major Features and Improvements\n- Added support for C++ shape inference\n- Added graph-construction C API\n- Major revision to the graph-construction C++ API\n- Support makefile build for iOS\n- Added Mac GPU support\n- Full version of TF-Slim available as `tf.contrib.slim`\n- Added k-Means clustering and WALS matrix factorization\n\n# Big Fixes and Other Changes\n- Allow gradient computation for scalar values.\n- Performance improvements for gRPC\n- Improved support for fp16\n- New high-level ops in tf.contrib.{layers,metrics}\n- New features for TensorBoard, such as shape display, exponential smoothing\n- Faster and more stable Google Cloud Storage (GCS) filesystem support\n- Support for zlib compression and decompression for TFRecordReader and TFRecordWriter\n- Support for reading (animated) GIFs\n- Improved support for SparseTensor\n- Added support for more probability distributions (Dirichlet, Beta, Bernoulli, etc.)\n- Added Python interfaces to reset resource containers.\n- Many bugfixes and performance improvements\n- Many documentation fixes\n\n# Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAlex Rothberg, Andrew Royer, Austin Marshall, @BlackCoal, Bob Adolf, Brian Diesel, Charles-Emmanuel Dias, @chemelnucfin, Chris Lesniewski, Daeyun Shin, Daniel Rodriguez, Danijar Hafner, Darcy Liu, Kristinn R. Th\u00f3risson, Daniel Castro, Dmitry Savintsev, Kashif Rasul, Dylan Paiton, Emmanuel T. Odeke, Ernest Grzybowski, Gavin Sherry, Gideon Dresdner, Gregory King, Harold Cooper, @heinzbeinz, Henry Saputra, Huarong Huo, Huazuo Gao, Igor Babuschkin, Igor Macedo Quintanilha, Ivan Ukhov, James Fysh, Jan Wilken D\u00f6rrie, Jihun Choi, Johnny Lim, Jonathan Raiman, Justin Francis, @lilac, Li Yi, Marc Khoury, Marco Marchesi, Max Melnick, Micael Carvalho, @mikowals, Mostafa Gazar, Nico Galoppo, Nishant Agrawal, Petr Janda, Yuncheng Li, @raix852, Robert Rose, @Robin-des-Bois, Rohit Girdhar, Sam Abrahams, @satok16, Sergey Kishchenko, Sharkd Tu, @shotat, Siddharth Agrawal, Simon Denel, @sono-bfio, SunYeop Lee, Thijs Vogels, @tobegit3hub, @Undo1, Wang Yang, Wenjian Huang, Yaroslav Bulatov, Yunfeng Wang, Ziming Dong\n\nWe are also grateful to all who filed issues or helped resolve them, asked and \nanswered questions, and were part of inspiring discussions. \n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3532560", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3532560/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/3532560/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0", "id": 3532560, "node_id": "MDc6UmVsZWFzZTM1MzI1NjA=", "tag_name": "v0.9.0", "target_commitish": "r0.9", "name": "TensorFlow 0.9.0", "draft": false, "author": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-06-21T21:36:21Z", "published_at": "2016-06-27T18:35:24Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.9.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.9.0", "body": "Bug fixes on top of RC0.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3374277", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3374277/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/3374277/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0rc0", "id": 3374277, "node_id": "MDc6UmVsZWFzZTMzNzQyNzc=", "tag_name": "v0.9.0rc0", "target_commitish": "r0.9", "name": "TensorFlow v0.9.0 RC0", "draft": false, "author": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-06-06T06:56:44Z", "published_at": "2016-06-06T08:06:55Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.9.0rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.9.0rc0", "body": "## Major Features and Improvements\n- Python 3.5 support and binaries\n- Added iOS support\n- Added support for processing on GPUs on MacOS\n- Added makefile for better cross-platform build support (C API only)\n- fp16 support for many ops\n- Higher level functionality in contrib.{layers,losses,metrics,learn}\n- More features to Tensorboard\n- Improved support for string embedding and sparse features\n- TensorBoard now has an Audio Dashboard, with associated audio summaries.\n\n## Big Fixes and Other Changes\n- Turned on CuDNN Autotune.\n- Added support for using third-party Python optimization algorithms (contrib.opt).\n- Google Cloud Storage filesystem support.\n- HDF5 support\n- Add support for 3d convolutions and pooling.\n- Update gRPC release to 0.14.\n- Eigen version upgrade.\n- Switch to eigen thread pool\n- `tf.nn.moments()` now accepts a `shift` argument. Shifting by a good estimate\n  of the mean improves numerical stability. Also changes the behavior of the\n  `shift` argument to `tf.nn.sufficient_statistics()`.\n- Performance improvements\n- Many bugfixes\n- Many documentation fixes\n- TensorBoard fixes: graphs with only one data point, Nan values, \n  reload button and auto-reload, tooltips in scalar charts, run \n  filtering, stable colors\n- Tensorboard graph visualizer now supports run metadata. Clicking on nodes\n  while viewing a stats for a particular run will show runtime statistics, such\n  as memory or compute usage. Unused nodes will be faded out.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAaron Schumacher, Aidan Dang, Akihiko ITOH, Aki Sukegawa, Arbit Chen, Aziz Alto, Danijar Hafner, Erik Erwitt, Fabrizio Milo, Felix Maximilian M\u00f6ller, Henry Saputra, Sung Kim, Igor Babuschkin, Jan Zikes, Jesper Steen M\u00f8ller, Johannes Mayer, Justin Harris, Kashif Rasul, Kevin Robinson, Loo Rong Jie, Lucas Moura, \u0141ukasz Bieniasz-Krzywiec, Mario Cho, Maxim Grechkin, Michael Heilman, Mostafa Rahmani, Mourad Mourafiq, @ninotoshi, Orion Reblitz-Richardson, Yuncheng Li, @raoqiyu, Robert DiPietro, Sam Abrahams, Sebastian Raschka, Siddharth Agrawal, @snakecharmer1024, Stephen Roller, Sung Kim, SunYeop Lee, Thijs Vogels, Till Hoffmann, Victor Melo, Ville Kallioniemi, Waleed Abdulla, Wenjian Huang, Yaroslav Bulatov, Yeison Rodriguez, Yuan (Terry) Tang, Yuxin Wu, @zhongzyd, Ziming Dong, Zohar Jackson\n\nWe are also grateful to all who filed issues or helped resolve them, asked and \nanswered questions, and were part of inspiring discussions. \n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3064668", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3064668/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/3064668/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.8.0", "id": 3064668, "node_id": "MDc6UmVsZWFzZTMwNjQ2Njg=", "tag_name": "v0.8.0", "target_commitish": "r0.8", "name": "TensorFlow v0.8.0", "draft": false, "author": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-04-22T20:51:21Z", "published_at": "2016-04-30T03:49:34Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.8.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.8.0", "body": "Bugfixes on top of RC0.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3011703", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/3011703/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/3011703/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.8.0rc0", "id": 3011703, "node_id": "MDc6UmVsZWFzZTMwMTE3MDM=", "tag_name": "v0.8.0rc0", "target_commitish": "r0.8", "name": "TensorFlow v0.8.0 RC0", "draft": false, "author": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "prerelease": true, "created_at": "2016-04-13T15:26:19Z", "published_at": "2016-04-13T16:47:28Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.8.0rc0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.8.0rc0", "body": "## Major Features and Improvements\n- Added a distributed runtime using GRPC\n- Move skflow to `contrib/learn`\n- Better linear optimizer in `contrib/linear_optimizer`\n- Random forest implementation in `contrib/tensor_forest`\n- CTC loss and decoders in `contrib/ctc`\n- Basic support for `half` data type\n- Better support for loading user ops (see examples in `contrib/`)\n- Allow use of (non-blocking) Eigen threadpool with `TENSORFLOW_USE_EIGEN_THREADPOOL` define\n- Add an extension mechanism for adding network file system support\n- TensorBoard displays metadata stats (running time, memory usage and device used) and tensor shapes\n\n## Big Fixes and Other Changes\n- Utility for inspecting checkpoints\n- Basic tracing and timeline support\n- Allow building against cuDNN 5 (not incl. RNN/LSTM support) \n- Added instructions and binaries for ProtoBuf library with fast serialization and without 64MB limit\n- Added special functions\n- `bool`-strictness: Tensors have to be explictly compared to `None`\n- Shape strictness: all fed values must have a shape that is compatible with the tensor they are replacing\n- Exposed `tf.while_loop` (deprecated `control_flow_ops.While`)\n- run() now takes RunOptions and RunMetadata, which enable timing stats\n- Fixed lots of potential overflow problems in op kernels\n- Various performance improvements, especially for RNNs and convolutions\n- Many bugfixes\n- Nightly builds, tutorial tests, many test improvements\n- New examples: transfer learning and deepdream ipython notebook\n- Added tutorials, many documentation fixes.\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAbhinav Upadhyay, Aggelos Avgerinos, Alan Wu, Alexander G. de G. Matthews, Aleksandr Yahnev, @amchercashin, Andy Kitchen, Aurelien Geron, Awni Hannun, @BanditCat, Bas Veeling, Cameron Chen, @cg31, Cheng-Lung Sung, Christopher Bonnett, Dan Becker, Dan Van Boxel, Daniel Golden, Danijar Hafner, Danny Goodman, Dave Decker, David Dao, David Kretch, Dongjoon Hyun, Dustin Dorroh, @e-lin, Eurico Doirado, Erik Erwitt, Fabrizio Milo, @gaohuazuo, Iblis Lin, Igor Babuschkin, Isaac Hodes, Isaac Turner, Iv\u00e1n Vall\u00e9s, J Yegerlehner, Jack Zhang, Jan Zikes, Jay Young, Jeff Hodges, @jmtatsch, Johnny Lim, Jonas Meinertz Hansen, Kanit Wongsuphasawat, Kashif Rasul, Ken Shirriff, Kenneth Mitchner, Kenta Yonekura, Konrad Magnusson, Konstantin Lopuhin, @lahwran, @lekaha, @liyongsea, Lucas Adams, @makseq, Mandeep Singh, @manipopopo, Mark Amery, Memo Akten, Michael Heilman, Michael Peteuil, Nathan Daly, Nicolas Fauchereau, @ninotoshi, Olav Nymoen, @panmari, @papelita1234, Pedro Lopes, Pranav Sailesh Mani, RJ Ryan, Rob Culliton, Robert DiPietro, @ronrest, Sam Abrahams, Sarath Shekkizhar, Scott Graham, Sebastian Raschka, Sung Kim, Surya Bhupatiraju, Syed Ahmed, Till Hoffmann, @timsl, @urimend, @vesnica, Vlad Frolov, Vlad Zagorodniy, Wei-Ting Kuo, Wenjian Huang, William Dmitri Breaden Madden, Wladimir Schmidt, Yuan Tang, Yuwen Yan, Yuxin Wu, Yuya Kusakabe, @zhongzyd, @znah.\n\nWe are also grateful to all who filed issues or helped resolve them, asked and \nanswered questions, and were part of inspiring discussions. \n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/2664437", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/2664437/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/2664437/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.7.1", "id": 2664437, "node_id": "MDc6UmVsZWFzZTI2NjQ0Mzc=", "tag_name": "v0.7.1", "target_commitish": "master", "name": "TensorFlow v0.7.1", "draft": false, "author": {"login": "vrv", "id": 463737, "node_id": "MDQ6VXNlcjQ2MzczNw==", "avatar_url": "https://avatars0.githubusercontent.com/u/463737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vrv", "html_url": "https://github.com/vrv", "followers_url": "https://api.github.com/users/vrv/followers", "following_url": "https://api.github.com/users/vrv/following{/other_user}", "gists_url": "https://api.github.com/users/vrv/gists{/gist_id}", "starred_url": "https://api.github.com/users/vrv/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vrv/subscriptions", "organizations_url": "https://api.github.com/users/vrv/orgs", "repos_url": "https://api.github.com/users/vrv/repos", "events_url": "https://api.github.com/users/vrv/events{/privacy}", "received_events_url": "https://api.github.com/users/vrv/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-02-20T07:42:14Z", "published_at": "2016-02-22T18:59:16Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.7.1", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.7.1", "body": "## Bug Fixes and Other Changes\n- Added gfile.Open and gfile.Copy, used by input_data.py.\n- Fixed Saver bug when MakeDirs tried to create empty directory.\n- GPU Pip wheels are built with cuda 7.5 and cudnn-v4, making them\n  required for the binary releases. Lower versions of cuda/cudnn can\n  be supported by installing from sources and setting the options\n  during ./configure\n- Fix dataset encoding example for Python3 (@danijar)\n- Fix PIP installation by not packaging protobuf as part of wheel,\n  require protobuf 3.0.0b2.\n- Fix Mac pip installation of numpy by requiring pip >= 1.10.1.\n- Improvements and fixes to Docker image.\n"}, {"url": "https://api.github.com/repos/tensorflow/tensorflow/releases/2621242", "assets_url": "https://api.github.com/repos/tensorflow/tensorflow/releases/2621242/assets", "upload_url": "https://uploads.github.com/repos/tensorflow/tensorflow/releases/2621242/assets{?name,label}", "html_url": "https://github.com/tensorflow/tensorflow/releases/tag/v0.7.0", "id": 2621242, "node_id": "MDc6UmVsZWFzZTI2MjEyNDI=", "tag_name": "v0.7.0", "target_commitish": "r0.7", "name": "TensorFlow 0.7.0", "draft": false, "author": {"login": "martinwicke", "id": 577277, "node_id": "MDQ6VXNlcjU3NzI3Nw==", "avatar_url": "https://avatars2.githubusercontent.com/u/577277?v=4", "gravatar_id": "", "url": "https://api.github.com/users/martinwicke", "html_url": "https://github.com/martinwicke", "followers_url": "https://api.github.com/users/martinwicke/followers", "following_url": "https://api.github.com/users/martinwicke/following{/other_user}", "gists_url": "https://api.github.com/users/martinwicke/gists{/gist_id}", "starred_url": "https://api.github.com/users/martinwicke/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/martinwicke/subscriptions", "organizations_url": "https://api.github.com/users/martinwicke/orgs", "repos_url": "https://api.github.com/users/martinwicke/repos", "events_url": "https://api.github.com/users/martinwicke/events{/privacy}", "received_events_url": "https://api.github.com/users/martinwicke/received_events", "type": "User", "site_admin": false}, "prerelease": false, "created_at": "2016-02-16T16:57:59Z", "published_at": "2016-02-16T23:01:44Z", "assets": [], "tarball_url": "https://api.github.com/repos/tensorflow/tensorflow/tarball/v0.7.0", "zipball_url": "https://api.github.com/repos/tensorflow/tensorflow/zipball/v0.7.0", "body": "## Major Features and Improvements\n- Allow using any installed Cuda >= 7.0 and cuDNN >= R2, and add support\n  for cuDNN R4\n- Added a `contrib/` directory for unsupported or experimental features, \n  including higher level `layers` module\n- Added an easy way to add and dynamically load user-defined ops\n- Built out a good suite of tests, things should break less!\n- Added `MetaGraphDef` which makes it easier to save graphs with metadata\n- Added assignments for \"Deep Learning with TensorFlow\" udacity course \n\n## Bug Fixes and Other Changes\n- Added a versioning framework for `GraphDef`s to ensure compatibility\n- Enforced Python 3 compatibility\n- Internal changes now show up as sensibly separated commits\n- Open-sourced the doc generator\n- Un-fork Eigen\n- Simplified the `BUILD` files and cleaned up C++ headers\n- TensorFlow can now be used as a submodule in another bazel build\n- New ops (e.g., `*fft`, `*_matrix_solve`)\n- Support for more data types in many ops\n- Performance improvements\n- Various bugfixes\n- Documentation fixes and improvements\n\n## Breaking Changes to the API\n- `AdjustContrast` kernel deprecated, new kernel `AdjustContrastv2` takes and\n  outputs float only. `adjust_contrast` now takes all data types.\n- `adjust_brightness`'s `delta` argument is now always assumed to be in `[0,1]`\n  (as is the norm for images in floating point formats), independent of the\n  data type of the input image.\n- The image processing ops do not take `min` and `max` inputs any more, casting\n  safety is handled by `saturate_cast`, which makes sure over- and underflows\n  are handled before casting to data types with smaller ranges.\n- For C++ API users: `IsLegacyScalar` and `IsLegacyVector` are now gone from\n  `TensorShapeUtils` since TensorFlow is scalar strict within Google (for\n  example, the shape argument to `tf.reshape` can't be a scalar anymore).  The\n  open source release was already scalar strict, so outside Google `IsScalar`\n  and `IsVector` are exact replacements.\n- The following files are being removed from `tensorflow/core/public/`:\n  - `env.h` -> `../platform/env.h`\n  - `status.h` -> `../lib/core/status.h`\n  - `tensor.h` -> `../framework/tensor.h`\n  - `tensor_shape.h` -> `../framework/tensor_shape.h`\n  - `partial_tensor_shape.h` -> `../framework/partial_tensor_shape.h`\n  - `tensorflow_server.h` deleted\n- For C++ API users: `TensorShape::ShortDebugString` has been renamed to\n  `DebugString`, and the previous `DebugString` behavior is gone (it was\n  needlessly verbose and produced a confusing empty string for scalars).\n- `GraphOptions.skip_common_subexpression_elimination` has been removed. All\n  graph optimizer options are now specified via\n  `GraphOptions.OptimizerOptions`.\n- `ASSERT_OK` / `EXPECT_OK` macros conflicted with external projects, so they\n  were renamed `TF_ASSERT_OK`, `TF_EXPECT_OK`.  The existing macros are\n  currently maintained for short-term compatibility but will be removed.\n- The non-public `nn.rnn` and the various `nn.seq2seq` methods now return\n  just the final state instead of the list of all states.\n- `tf.scatter_update` now no longer guarantees that lexicographically largest\n  index be used for update when duplicate entries exist.\n- `tf.image.random_crop(image, [height, width])` is now\n  `tf.random_crop(image, [height, width, depth])`, and `tf.random_crop` works\n  for any rank (not just 3-D images).  The C++ `RandomCrop` op has been replaced\n  with pure Python.\n- Renamed `tf.test.GetTempDir` and `tf.test.IsBuiltWithCuda` to\n  `tf.test.get_temp_dir` and `tf.test.is_built_with_cuda` for PEP-8\n  compatibility.\n- `parse_example`'s interface has changed, the old interface is accessible in\n  `legacy_parse_example` (same for related functions).\n- New `Variable`s are not added to the same collection several times even if\n  a list with duplicates is passed to the constructor.\n- The Python API will now properly set the `list` member of `AttrValue` in\n  constructed `GraphDef` messages for empty lists.  The serialization of some\n  graphs will change, but the change is both forwards and backwards compatible.\n  It will break tests that compare a generated `GraphDef` to a golden serialized\n  `GraphDef` (which is discouraged).\n\n## Thanks to our Contributors\n\nThis release contains contributions from many people at Google, as well as:\n\nAkiomi Kamakura, Alex Vig, Alexander Rosenberg Johansen, Andre Cruz, Arun Ahuja,\nBart Coppens, Bernardo Pires, Carl Vondrick, Cesar Salgado, Chen Yu,\nChristian Jauvin, Damien Aymeric, Dan Vanderkam, Denny Britz, Dongjoon Hyun,\nEren G\u00fcven, Erik Erwitt, Fabrizio Milo, G. Hussain Chinoy, Jim Fleming,\nJoao Felipe Santos, Jonas Meinertz Hansen, Joshi Rekha, Julian Viereck,\nKeiji Ariyama, Kenton Lee, Krishna Sankar, Kristina Chodorow, Linchao Zhu,\nLukas Krecan, Mark Borgerding, Mark Daoust, Moussa Taifi,\nNathan Howell, Naveen Sundar Govindarajulu, Nick Sweeting, Niklas Riekenbrauck,\nOlivier Grisel, Patrick Christ, Povilas Liubauskas, Rainer Wasserfuhr,\nRomain Thouvenin, Sagan Bolliger, Sam Abrahams, Taehoon Kim, Timothy J Laurent,\nVlad Zavidovych, Yangqing Jia, Yi-Lin Juang, Yuxin Wu, Zachary Lipton,\nZero Chen, Alan Wu, @brchiu, @emmjaykay, @jalammar, @Mandar-Shinde,\n@nsipplswezey, @ninotoshi, @panmari, @prolearner and @rizzomichaelg.\n\nWe are also grateful to all who filed issues or helped resolve them, asked and \nanswered questions, and were part of inspiring discussions. \n"}]